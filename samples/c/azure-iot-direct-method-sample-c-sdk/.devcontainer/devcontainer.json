// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.194.0/containers/debian
{
    "name": "Azure IoT Edge C/C++",
    "build": {
        "dockerfile": "Dockerfile",
        // Update 'VARIANT' to pick an Debian version: bullseye, buster, stretch
        "args": { "VARIANT": "buster" }
    },
    "runArgs": ["--init", "--privileged"],
    "mounts": [
        // Keep command history 
        "source=ostf-bashhistory,target=/commandhistory,type=volume",
        // Use docker-in-docker socket
        "source=dind-var-lib-docker,target=/var/lib/docker,type=volume"
    ],
    "overrideCommand": false,

    // Set *default* container specific settings.json values on container create.
    "settings": { "terminal.integrated.defaultProfile.linux": "/bin/bash" },

    // Add the IDs of extensions you want installed when the container is created.
    "extensions": [
        "ms-vscode.cpptools",
        "ms-azuretools.vscode-docker",
        "ms-vscode.azure-account",
        "vsciot-vscode.vscode-iot-device-cube",
        "vsciot-vscode.azure-iot-tools"
    ],

    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    // "forwardPorts": [],

    // Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
    // "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],

    // Uncomment when using a ptrace-based debugger like C++, Go, and Rust
    // "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],

    "remoteUser": "vscode"
}
