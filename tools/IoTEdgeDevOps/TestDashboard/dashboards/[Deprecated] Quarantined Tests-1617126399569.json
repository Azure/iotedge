{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 5,
  "iteration": 1617126395035,
  "links": [],
  "panels": [
    {
      "columns": [],
      "datasource": "MSSQL Server",
      "fontSize": "100%",
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 20,
      "options": {},
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Status",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            },
            {
              "text": "⦸",
              "value": "0.5"
            }
          ]
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkTargetBlank": true,
          "linkTooltip": "Link to Azure DevOps",
          "linkUrl": "https://dev.azure.com/msazure/One/_releaseProgress?_a=release-environment-logs&releaseId=${ReleaseId}&environmentId=${__cell}",
          "mappingType": 1,
          "pattern": "Id",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "alias": "",
          "format": "table",
          "rawSql": "DECLARE @ReleaseEnvironmentStatus TABLE (Id VARCHAR(50), DefinitionName VARCHAR(50), Status VARCHAR(50))\n\nINSERT INTO @ReleaseEnvironmentStatus\nSELECT Id, DefinitionName, Status FROM VstsReleaseEnvironment\nWHERE ReleaseId = '$ReleaseId'\n\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'PartiallySucceeded', '0')\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'Succeeded', '1')\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'Canceled', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'NotStarted', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'InProgress', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'Failed', '0')\nUPDATE @ReleaseEnvironmentStatus SET Status = REPLACE(Status, 'Rejected', '0')\n\nSELECT * FROM @ReleaseEnvironmentStatus",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Old E2E Test Run Details",
      "transform": "table",
      "transparent": true,
      "type": "table"
    },
    {
      "content": "-----------------------\n# Failing Builds / Tests\n\n\n",
      "datasource": null,
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 10
      },
      "id": 18,
      "links": [],
      "mode": "markdown",
      "options": {},
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "columns": [],
      "datasource": "MSSQL Server",
      "fontSize": "100%",
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 16,
      "options": {},
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": false
      },
      "styles": [
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": true,
          "linkUrl": "${__cell:raw} ",
          "mappingType": 1,
          "pattern": "WebUri",
          "thresholds": [],
          "type": "number",
          "unit": "short"
        },
        {
          "alias": "TestName",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "DefinitionName",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "alias": "",
          "format": "table",
          "rawSql": "DECLARE @BuildStatus TABLE (SourceBranch VARCHAR(50), DefinitionName VARCHAR(50), Result VARCHAR(50), WebUri VARCHAR(200))\nINSERT INTO @BuildStatus\nSELECT VstsBuild.SourceBranch, VstsBuild.DefinitionName, Result, WebUri\nFROM \n  VstsBuild\n  INNER JOIN (SELECT VstsBuild.DefinitionName, SourceBranch, MAX(BuildNumber) AS MaxBuildNumber FROM VstsBuild GROUP BY VstsBuild.DefinitionName, SourceBranch) AS MostRecentBuildsPerDefinitionAndBranch\n    ON VstsBuild.DefinitionName = MostRecentBuildsPerDefinitionAndBranch.DefinitionName AND VstsBuild.SourceBranch = MostRecentBuildsPerDefinitionAndBranch.SourceBranch and VstsBuild.BuildNumber = MostRecentBuildsPerDefinitionAndBranch.MaxBuildNumber\n\nUPDATE @BuildStatus SET Result = REPLACE(Result, 'Succeeded', '1')\nUPDATE @BuildStatus SET Result = REPLACE(Result, 'Canceled', '0.5')\nUPDATE @BuildStatus SET Result = REPLACE(Result, 'Failed', '0')\n\n\nSELECT DefinitionName, WebUri\nFROM\n@BuildStatus\nWHERE SourceBranch = '$BranchName' AND Result != '1'",
          "refId": "A"
        },
        {
          "alias": "",
          "format": "table",
          "rawSql": "DECLARE @ReleaseEnvironmentStatus TABLE (ReleaseId VARCHAR(50), Result VARCHAR(50))\n\nINSERT INTO @ReleaseEnvironmentStatus\nSELECT ReleaseId, Status FROM VstsReleaseEnvironment\n\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Succeeded', '1')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Canceled', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'NotStarted', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'InProgress', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Failed', '0')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Rejected', '0')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'PartiallySucceeded', '0')\n\nSELECT VstsRelease.DefinitionName, VstsRelease.WebUri FROM \n  VstsRelease\n  INNER JOIN (SELECT ReleaseId, MIN(Result) AS Result FROM @ReleaseEnvironmentStatus GROUP BY ReleaseId) AS ReleaseIdToAggregatedStatus ON VstsRelease.Id = ReleaseIdToAggregatedStatus.ReleaseId\n    INNER JOIN (SELECT VstsRelease.DefinitionName, SourceBranch, MAX(Id) AS MaxReleaseId FROM VstsRelease GROUP BY VstsRelease.DefinitionName, SourceBranch) AS MostRecentReleasesPerDefinitionAndBranch\n      ON VstsRelease.DefinitionName = MostRecentReleasesPerDefinitionAndBranch.DefinitionName AND VstsRelease.SourceBranch = MostRecentReleasesPerDefinitionAndBranch.SourceBranch AND VstsRelease.Id = MostRecentReleasesPerDefinitionAndBranch.MaxReleaseId\n      WHERE VstsRelease.SourceBranch = '$BranchName' AND ReleaseIdToAggregatedStatus.Result != '1'",
          "refId": "B"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transform": "table",
      "transparent": true,
      "type": "table"
    },
    {
      "content": "-----------------------\n# End to End Tests\n\n\n",
      "datasource": null,
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 26
      },
      "id": 14,
      "links": [
        {
          "title": "Historical",
          "url": "/d/FYd7nYwZz/azure-dev-ops-old-e2e-status?orgId=1&var-BranchName=${BranchName}"
        }
      ],
      "mode": "markdown",
      "options": {},
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "columns": [],
      "datasource": "MSSQL Server",
      "fontSize": "100%",
      "gridPos": {
        "h": 18,
        "w": 24,
        "x": 0,
        "y": 29
      },
      "id": 12,
      "options": {},
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": ".*",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        }
      ],
      "targets": [
        {
          "alias": "",
          "format": "table",
          "hide": true,
          "rawSql": "WITH Release_CTE\nAS\n(\n    SELECT r.id releaseId, r.SourceBranch, e.Id envId, e.DefinitionName, e.Status, d.Id deploymentId, d.Attempt \n    FROM VstsRelease r\n    INNER JOIN VstsReleaseEnvironment e\n    ON r.Id = e.ReleaseId\n    INNER JOIN VstsReleaseDeployment d\n    ON e.Id = d.ReleaseEnvironmentId\n)\nSELECT * FROM\n(\n    SELECT DefinitionName, t.Name taskName, taskStatus = CASE t.Status WHEN 'succeeded' THEN 1 WHEN 'partiallySucceeded' THEN 0 WHEN 'failed' THEN 0 END\n    FROM Release_CTE x\n    INNER JOIN\n    (\n        SELECT releaseId, envId, MAX(Attempt) Attempt \n        FROM Release_CTE \n        WHERE releaseId = (SELECT MAX(releaseId) FROM Release_CTE WHERE SourceBranch = '$BranchName' AND Status != 'InProgress')\n        GROUP BY releaseId, envId\n    ) LatestDeployment\n    ON x.releaseId = LatestDeployment.releaseId\n    AND x.envId = LatestDeployment.envId\n    AND x.Attempt = LatestDeployment.Attempt\n    INNER JOIN VstsReleaseTask t\n    ON x.deploymentId = t.ReleaseDeploymentId\n    WHERE x.releaseId = (SELECT MAX(releaseId) FROM Release_CTE WHERE SourceBranch = '$BranchName' AND Status != 'InProgress')\n) t1\nPIVOT (\n    AVG(taskStatus) \n    FOR DefinitionName IN (\n        [Linux AMD64 Docker],\n        [Linux AMD64 Moby],\n        [RBPi ARM32 Moby],\n        [RBPi ARM64 Docker],\n        [VM Proxy],\n        [WinIoT-ARM32],\n        [WinPro-x64],\n        [WinSvr-x64]\n    )) AS pivot_t",
          "refId": "A"
        },
        {
          "alias": "",
          "format": "table",
          "hide": true,
          "rawSql": "WITH Release_CTE\nAS\n(\n    SELECT r.id releaseId, r.SourceBranch, e.Id envId, e.DefinitionName, e.Status, d.Id deploymentId, d.Attempt \n    FROM VstsRelease r\n    INNER JOIN VstsReleaseEnvironment e\n    ON r.Id = e.ReleaseId\n    INNER JOIN VstsReleaseDeployment d\n    ON e.Id = d.ReleaseEnvironmentId\n)\nSELECT * FROM Release_CTE WHERE releaseId = 1861540",
          "refId": "B"
        },
        {
          "alias": "",
          "format": "table",
          "hide": false,
          "rawSql": "WITH Release_CTE\nAS\n(\n    SELECT r.id releaseId, r.SourceBranch, e.Id envId, e.DefinitionName, e.Status, d.Id deploymentId, d.Attempt \n    FROM VstsRelease r\n    INNER JOIN VstsReleaseEnvironment e\n    ON r.Id = e.ReleaseId\n    INNER JOIN VstsReleaseDeployment d\n    ON e.Id = d.ReleaseEnvironmentId\n)\n, Most_Recent_Release\nAS\n(\n    SELECT MAX(releaseId) AS mostRecentCompletedReleaseId FROM\n    (\n        SELECT releaseId FROM Release_CTE WHERE SourceBranch = '$BranchName' AND Status != 'InProgress'\n        EXCEPT\n        SELECT releaseId FROM Release_CTE WHERE SourceBranch = '$BranchName' AND Status = 'InProgress'\n    ) CompletedReleases\n)\nSELECT * FROM\n(\n    SELECT DefinitionName, t.Name taskName, taskStatus = CASE t.Status WHEN 'succeeded' THEN 1 WHEN 'partiallySucceeded' THEN 0 WHEN 'failed' THEN 0 END\n    FROM Release_CTE x\n    INNER JOIN\n    (\n        SELECT releaseId, envId, MAX(Attempt) Attempt \n        FROM Release_CTE \n        WHERE releaseId IN (SELECT mostRecentCompletedReleaseId FROM Most_Recent_Release)\n        GROUP BY releaseId, envId\n    ) LatestDeployment\n    ON x.releaseId = LatestDeployment.releaseId\n    AND x.envId = LatestDeployment.envId\n    AND x.Attempt = LatestDeployment.Attempt\n    INNER JOIN VstsReleaseTask t\n    ON x.deploymentId = t.ReleaseDeploymentId\n    WHERE x.releaseId IN (SELECT mostRecentCompletedReleaseId FROM Most_Recent_Release)\n) t1\nPIVOT (\n    AVG(taskStatus) \n    FOR DefinitionName IN (\n        [Linux AMD64 Docker],\n        [Linux AMD64 Moby],\n        [RBPi ARM32 Moby],\n        [RBPi ARM64 Docker],\n        [VM Proxy],\n        [WinPro-x64],\n        [WinSvr-x64],\n        [WinIoT-x64]\n    )) AS pivot_t",
          "refId": "C"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transform": "table",
      "transparent": true,
      "type": "table"
    },
    {
      "cacheTimeout": null,
      "colorBackground": true,
      "colorValue": false,
      "colors": [
        "#d44a3a",
        "rgba(237, 129, 40, 0.89)",
        "#299c46"
      ],
      "datasource": "MSSQL Server",
      "description": "",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 0,
        "y": 47
      },
      "id": 10,
      "interval": null,
      "links": [
        {
          "title": "Old E2E History",
          "url": "d/FYd7nYwZz/azure-dev-ops-releases-status?orgId=1&var-BranchName=${BranchName}"
        }
      ],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false,
        "ymax": null,
        "ymin": null
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "",
          "format": "table",
          "rawSql": "DECLARE @ReleaseEnvironmentStatus TABLE (ReleaseId VARCHAR(50), Result VARCHAR(50))\n\nINSERT INTO @ReleaseEnvironmentStatus\nSELECT ReleaseId, Status FROM VstsReleaseEnvironment\n\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Failed', '0')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Rejected', '0')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'PartiallySucceeded', '0')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Canceled', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'NotStarted', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'InProgress', '0.5')\nUPDATE @ReleaseEnvironmentStatus SET Result = REPLACE(Result, 'Succeeded', '1')\n\nSELECT ReleaseIdToAggregatedStatus.Result AS [Old E2E] FROM \n  VstsRelease\n  INNER JOIN (SELECT ReleaseId, MIN(Result) AS Result FROM @ReleaseEnvironmentStatus GROUP BY ReleaseId) AS ReleaseIdToAggregatedStatus ON VstsRelease.Id = ReleaseIdToAggregatedStatus.ReleaseId\n    INNER JOIN (SELECT VstsRelease.DefinitionName, SourceBranch, MAX(Id) AS MaxReleaseId FROM VstsRelease GROUP BY VstsRelease.DefinitionName, SourceBranch) AS MostRecentReleasesPerDefinitionAndBranch\n      ON VstsRelease.DefinitionName = MostRecentReleasesPerDefinitionAndBranch.DefinitionName AND VstsRelease.SourceBranch = MostRecentReleasesPerDefinitionAndBranch.SourceBranch AND VstsRelease.Id = MostRecentReleasesPerDefinitionAndBranch.MaxReleaseId\n      WHERE VstsRelease.SourceBranch = '$BranchName'",
          "refId": "A"
        }
      ],
      "thresholds": "0.5, 1",
      "timeFrom": null,
      "timeShift": null,
      "title": "Old E2E",
      "type": "singlestat",
      "valueFontSize": "200%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        },
        {
          "op": "=",
          "text": "✓",
          "value": "1"
        },
        {
          "op": "=",
          "text": "✗",
          "value": "0"
        },
        {
          "op": "=",
          "text": "⦸",
          "value": "0.5"
        }
      ],
      "valueName": "first"
    },
    {
      "cacheTimeout": null,
      "colorBackground": true,
      "colorValue": false,
      "colors": [
        "#d44a3a",
        "rgba(237, 129, 40, 0.89)",
        "#299c46"
      ],
      "datasource": "MSSQL Server",
      "description": "",
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 0,
        "y": 51
      },
      "id": 8,
      "interval": null,
      "links": [
        {
          "title": "Stress Test Deployment History",
          "url": "d/XP0gH0QZz/azure-dev-ops-build-status?orgId=1&var-BranchName=${BranchName}&var-BuildType=Stress%20Test"
        },
        {
          "title": "Stress Test Deployment (Release Candidate) History",
          "url": "d/XP0gH0QZz/azure-dev-ops-build-status?orgId=1&var-BranchName=${BranchName}&var-BuildType=Stress%20Test%20Release%20Candidate"
        },
        {
          "title": "Stress Test Deployment (Release) History",
          "url": "d/XP0gH0QZz/azure-dev-ops-build-status?orgId=1&var-BranchName=${BranchName}&var-BuildType=Stress%20Test%20Release"
        }
      ],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false,
        "ymax": null,
        "ymin": null
      },
      "tableColumn": "",
      "targets": [
        {
          "alias": "",
          "format": "table",
          "hide": false,
          "rawSql": "DECLARE @Environment VARCHAR(50)\nIF ('$BranchName' = 'refs/heads/master') BEGIN\n    SET @Environment = 'Stress Test'\nEND\nELSE IF ('$BranchName' = 'refs/heads/release/1.0.9') BEGIN\n    SET @Environment = 'Stress Test Release Candidate'\nEND\nELSE BEGIN\n    SET @Environment = 'Stress Test Release'\nEND\n\nDECLARE @BuildStatus TABLE (SourceBranch VARCHAR(50), DefinitionName VARCHAR(50), Result VARCHAR(50), QueueTime DATETIME)\nINSERT INTO @BuildStatus\nSELECT VstsBuild.SourceBranch, VstsBuild.DefinitionName, Result, QueueTime\nFROM \n  VstsBuild\n  INNER JOIN (SELECT VstsBuild.DefinitionName, SourceBranch, MAX(BuildNumber) AS MaxBuildNumber FROM VstsBuild GROUP BY VstsBuild.DefinitionName, SourceBranch) AS MostRecentBuildsPerDefinitionAndBranch\n    ON VstsBuild.DefinitionName = MostRecentBuildsPerDefinitionAndBranch.DefinitionName AND VstsBuild.SourceBranch = MostRecentBuildsPerDefinitionAndBranch.SourceBranch and VstsBuild.BuildNumber = MostRecentBuildsPerDefinitionAndBranch.MaxBuildNumber\n\nUPDATE @BuildStatus SET Result = REPLACE(Result, 'Succeeded', '1')\nUPDATE @BuildStatus SET Result = REPLACE(Result, 'Canceled', '0.5')\nUPDATE @BuildStatus SET Result = REPLACE(Result, 'Failed', '0')\n\n---We will eventually only care about the desired environment instead of the most recent across all environments\n-- SELECT Result FROM @BuildStatus\n-- WHERE DefinitionName = @Environment AND SourceBranch = '$BranchName'\n-- ORDER BY QueueTime ASC\n\nSELECT TOP 1 RESULT FROM @BuildStatus\nWHERE SourceBranch = '$BranchName' AND DefinitionName LIKE '%Stress%'\nORDER BY QueueTime DESC\n",
          "refId": "A"
        }
      ],
      "thresholds": "0.5, 1",
      "timeFrom": null,
      "timeShift": null,
      "title": "Stress Deployment",
      "type": "singlestat",
      "valueFontSize": "200%",
      "valueMaps": [
        {
          "op": "=",
          "text": "✓",
          "value": "1"
        },
        {
          "op": "=",
          "text": "✗",
          "value": "0"
        },
        {
          "op": "=",
          "text": "⦸",
          "value": "0.5"
        },
        {
          "op": "=",
          "text": "-",
          "value": "null"
        },
        {
          "op": "=",
          "text": "-",
          "value": ""
        }
      ],
      "valueName": "first"
    },
    {
      "columns": [],
      "datasource": "Azure Monitor",
      "fontSize": "100%",
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 55
      },
      "id": 6,
      "options": {},
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "",
          "colorMode": "cell",
          "colors": [
            "rgb(0, 0, 0)",
            "rgba(50, 172, 45, 0.97)",
            "rgba(245, 54, 54, 0.9)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 2,
          "pattern": "/.*/",
          "rangeMaps": [
            {
              "from": "0",
              "text": "✓",
              "to": "0"
            },
            {
              "from": "-1",
              "text": "N/A",
              "to": "-1"
            }
          ],
          "thresholds": [
            "-.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "11",
              "value": ".*"
            }
          ]
        }
      ],
      "targets": [
        {
          "appInsights": {
            "dimension": "none",
            "metricName": "select",
            "rawQuery": false,
            "rawQueryString": "",
            "timeColumn": "timestamp",
            "timeGrain": "auto",
            "valueColumn": ""
          },
          "azureLogAnalytics": {
            "query": "let mostRecentTestBuildNumber = toscalar(sanitizedTestMetrics\n| where testType == 'LongHaul' and imagesBranchName == \"$BranchName\"\n| summarize arg_max(TimeGenerated, testBuildNumber)\n| project testBuildNumber);\nlet filtered = sanitizedTestMetrics\n| where testBuildNumber == mostRecentTestBuildNumber and testType == \"LongHaul\";\nlet filteredWithMinTime = filtered\n| summarize minTimeGenerated = min(TimeGenerated);\nlet filteredWithMaxTime = filtered\n| summarize maxTimeGenerated = max(TimeGenerated);\nlet minTimeGenerated = toscalar(filteredWithMinTime);\nlet maxTimeGenerated = toscalar(filteredWithMaxTime);\nlet environmentPrefix = toscalar(filtered\n| where device contains \"Linux\"\n| extend device = substring(device, 0, 3)\n| project device);\nlet alerts = Alert\n| where TimeGenerated > minTimeGenerated + 15m and TimeGenerated < maxTimeGenerated and AlertName contains environmentPrefix\n| extend device = extract(\".*longhaul\", 0, AlertName)\n| order by TimeGenerated;\nlet descriptions = datatable(description: string)\n[\"Reported Metrics\",\n \"Queue Length\",\n \"Upstream Message Rate\",\n \"Local Message Rate\",\n \"Reported Property Rate\",\n \"Queue Length\",\n \"Edge Agent CPU\",\n \"Edge Hub CPU\",\n \"Edge Agent Memory\",\n \"Edge Hub Memory\",\n \"Failed Module Starts\",\n \"Disk Space\"\n ];\n let getConsecutiveFailures = (T1:(AlertName: string, TimeGenerated: datetime)) {\n    T1\n    | order by AlertName, TimeGenerated asc\n    | extend nextAlertName = next(AlertName, 1)\n    | extend nextTime = next(TimeGenerated, 1)\n    | extend next2Time = next(TimeGenerated, 2)\n    | project-reorder AlertName, TimeGenerated\n    | extend isError = iff(nextTime - TimeGenerated < 20m and next2Time - nextTime < 20m and AlertName == nextAlertName, 1, 0)\n    | where isError == 1\n};\nlet consecutivelyFailedAlerts = getConsecutiveFailures(alerts);\nlet devices = filtered\n| summarize count() by device\n| extend device = tolower(device)\n| project device;\nlet deviceDescriptions = devices \n| extend dummy=1 | join kind = inner (descriptions | extend dummy=1) on dummy // dummy cross join from AzureDiagnostics\n| project device, description\n| extend violations = 0; \nlet numberOfMetrics = alerts\n| where AlertDescription contains \"number-of-metrics-too-low\" or AlertDescription contains \"number-of-metrics-too-high\"\n| summarize violations = count() by device\n| extend description = \"Reported Metrics\";\nlet upstreamMessageRate = consecutivelyFailedAlerts\n| where AlertDescription contains \"upstream-message-rate\" or AlertDescription contains \"no-upstream-messages\"\n| summarize violations = count() by device\n| extend description = \"Upstream Message Rate\";\nlet localMessageRate = alerts\n| where AlertDescription contains \"local-message-rate\" or AlertDescription contains \"no-local-messages\"\n| summarize violations = count() by device\n| extend description = \"Local Message Rate\";\nlet reportedPropertyRate = consecutivelyFailedAlerts\n| where AlertDescription contains \"reported-property-rate\" or AlertDescription contains \"no-reported-properties\"\n| summarize violations = count() by device\n| extend description = \"Reported Property Rate\";\nlet queueLength = consecutivelyFailedAlerts\n| where AlertDescription contains \"queue-length\"\n| summarize violations = count() by device\n| extend description = \"Queue Length\";\nlet edgeAgentCPU = consecutivelyFailedAlerts\n| where AlertDescription contains \"edge-agent-cpu\"\n| summarize violations = count() by device\n| extend description = \"Edge Agent CPU\";\nlet edgeHubCPU = consecutivelyFailedAlerts\n| where AlertDescription contains \"edge-hub-cpu\"\n| summarize violations = count() by device\n| extend description = \"Edge Hub CPU\";\nlet edgeAgentMemory = consecutivelyFailedAlerts\n| where AlertDescription contains \"edge-agent-memory\"\n| summarize violations = count() by device\n| extend description = \"Edge Agent Memory\";\nlet edgeHubMemory = consecutivelyFailedAlerts\n| where AlertDescription contains \"edge-hub-memory\"\n| summarize violations = count() by device\n| extend description = \"Edge Hub Memory\";\nlet moduleStarts = alerts\n| where AlertDescription contains \"failed-module-starts\"\n| summarize violations = count() by device\n| extend description = \"Failed Module Starts\";\nlet diskSpace = consecutivelyFailedAlerts\n| where AlertDescription contains \"disk-space\"\n| summarize violations = count() by device\n| extend description = \"Disk Space\";\nlet mergeViolations = (T1:(device: string, description: string, violations: long), T2:(device: string, description: string, violations: long)) {\nT1\n  | join kind = leftouter (T2 | extend device = tolower(device)) on device, description\n  | project-away device1, description1\n  | extend violations = iff(isnull(violations1) == false, violations1, violations)\n  | project-away violations1\n  | extend violations = iff(device contains \"winpro\" and (description contains \"Memory\" or description contains \"Disk\" or description contains \"cpu\"), -1, violations)\n};\nlet tmp0 = mergeViolations(deviceDescriptions, numberOfMetrics);\nlet tmp1 = mergeViolations(tmp0, upstreamMessageRate);\nlet tmp2 = mergeViolations(tmp1, localMessageRate);\nlet tmp3 = mergeViolations(tmp2, reportedPropertyRate);\nlet tmp4 = mergeViolations(tmp3, queueLength);\nlet tmp5 = mergeViolations(tmp4, edgeAgentCPU);\nlet tmp6 = mergeViolations(tmp5, edgeHubCPU);\nlet tmp7 = mergeViolations(tmp6, edgeAgentMemory);\nlet tmp8 = mergeViolations(tmp7, edgeHubMemory);\nlet tmp9 = mergeViolations(tmp8, moduleStarts);\nlet tmp10 = mergeViolations(tmp9, diskSpace);\ntmp10\n| evaluate pivot(description, avg(violations))\n| project-reorder * asc\n",
            "resultFormat": "table",
            "workspace": "fdf47b96-87f3-4b86-90b9-d83e2deae8a0"
          },
          "azureMonitor": {
            "aggOptions": [],
            "dimensionFilter": "*",
            "metricDefinition": "select",
            "metricName": "select",
            "metricNamespace": "select",
            "resourceGroup": "select",
            "resourceName": "select",
            "timeGrain": "auto",
            "timeGrains": [],
            "top": "10"
          },
          "queryType": "Azure Log Analytics",
          "refId": "A",
          "subscription": "5ed2dcb6-29bb-40de-a855-8c24a8260343"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "KPI Violations",
      "transform": "table",
      "transparent": true,
      "type": "table"
    },
    {
      "content": "-----------------------\n# Stress\n\n\n",
      "datasource": null,
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 63
      },
      "id": 2,
      "links": [
        {
          "title": "Report Viewer",
          "url": "/d/aAVz4M_Zz/longhaul-stress-report-details?orgId=1&var-TestType=Stress"
        }
      ],
      "mode": "markdown",
      "options": {},
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "columns": [],
      "datasource": "Azure Monitor",
      "description": "",
      "fontSize": "100%",
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 65
      },
      "id": 4,
      "options": {},
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Platform",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "testInfo_HostPlatform_s",
          "thresholds": [
            ""
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "twin (amqp-tcp)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "twinTester1",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "twin (amqp-ws)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "twinTester2",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "messaging (amqp-tcp)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "link": false,
          "mappingType": 1,
          "pattern": "loadGen1",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "messaging (amqp-ws)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "loadGen2",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "messaging(mqtt-tcp)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "loadGen3",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "messaging(mqtt-ws)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "loadGen4",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "twin(mqtt-tcp)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "twinTester3",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        },
        {
          "alias": "twin(mqtt-ws)",
          "colorMode": "cell",
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "twinTester4",
          "thresholds": [
            "0.5",
            " 1"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "✓",
              "value": "1"
            },
            {
              "text": "✗",
              "value": "0"
            }
          ]
        }
      ],
      "targets": [
        {
          "appInsights": {
            "dimension": "none",
            "metricName": "select",
            "rawQuery": false,
            "rawQueryString": "",
            "timeColumn": "timestamp",
            "timeGrain": "auto",
            "valueColumn": ""
          },
          "azureLogAnalytics": {
            "query": "let branchIdentifier = case(\"$BranchName\" == \"refs/heads/master\", \"master\", \"$BranchName\" == \"refs/heads/release/1.0.8\", \"1.0.8\", \"$BranchName\" == \"refs/heads/release/1.0.9\", \"1.0.9\", \"None\");\nlet stressIdentifier = \"Stress\";\nlet mostRecentBuildNumber = toscalar(messagingReportsLonghaulStress_CL\n| where testInfo_TestName_s == stressIdentifier and branchIdentifier == testInfo_BuildSourceBranch_s\n| summarize arg_max(TimeGenerated, testInfo_TestBuildNumber_s)\n| project testInfo_TestBuildNumber_s);\nlet twinsReport = twinReportsLonghaulStress_CL\n| where testInfo_TestBuildNumber_s == mostRecentBuildNumber and testInfo_TestName_s == stressIdentifier\n| extend Result = replace(\"True\", \"1\", tostring(isPassed_b))\n| extend Result = replace(\"False\", \"0\", tostring(Result)) \n| summarize arg_max(TimeGenerated, *) by testInfo_HostPlatform_s, moduleId_s\n| where testInfo_HostPlatform_s != \"\"\n| extend testInfo_HostPlatform_s = strcat(testInfo_HostPlatform_s, \" | \", testInfo_TestBuildNumber_s)\n| project testInfo_HostPlatform_s, moduleId_s, Result\n| evaluate pivot(moduleId_s, max(Result)); // have to use aggreation function max, but there will only ever be a max of 1 record \nlet messagingReport = messagingReportsLonghaulStress_CL\n| where testInfo_TestBuildNumber_s == mostRecentBuildNumber and testInfo_TestName_s == stressIdentifier\n| extend Result = replace(\"True\", \"1\", tostring(isPassed_b))\n| extend Result = replace(\"False\", \"0\", tostring(Result)) \n| summarize arg_max(TimeGenerated, *) by testInfo_HostPlatform_s, moduleId_s\n| where testInfo_HostPlatform_s != \"\"\n| extend testInfo_HostPlatform_s = strcat(testInfo_HostPlatform_s, \" | \", testInfo_TestBuildNumber_s)\n| project testInfo_HostPlatform_s, moduleId_s, Result\n| evaluate pivot(moduleId_s, max(Result)); // have to use aggreation function max, but there will only ever be a max of 1 record\ntwinsReport\n| join kind= leftouter (\n   messagingReport \n) on testInfo_HostPlatform_s\n| project-away testInfo_HostPlatform_s1\n| extend loadGen1 = columnifexists(\"loadGen1\", \"0\")\n| extend loadGen2 = columnifexists(\"loadGen2\", \"0\")\n| extend loadGen3 = columnifexists(\"loadGen3\", \"0\")\n| extend loadGen4 = columnifexists(\"loadGen4\", \"0\")\n| extend twinTester1 = columnifexists(\"twinTester1\", \"0\")\n| extend twinTester2 = columnifexists(\"twinTester2\", \"0\")\n| extend twinTester3 = columnifexists(\"twinTester3\", \"0\")\n| extend twinTester4 = columnifexists(\"twinTester4\", \"0\")\n| project-reorder testInfo_HostPlatform_s, loadGen1, loadGen2, loadGen3, loadGen4, twinTester1, twinTester2, twinTester3, twinTester4",
            "resultFormat": "table",
            "workspace": "fdf47b96-87f3-4b86-90b9-d83e2deae8a0"
          },
          "azureMonitor": {
            "aggOptions": [],
            "dimensionFilter": "*",
            "metricDefinition": "select",
            "metricName": "select",
            "metricNamespace": "select",
            "resourceGroup": "select",
            "resourceName": "select",
            "timeGrain": "auto",
            "timeGrains": [],
            "top": "10"
          },
          "datasource": "Azure Monitor",
          "queryType": "Azure Log Analytics",
          "refId": "A",
          "subscription": "5ed2dcb6-29bb-40de-a855-8c24a8260343"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Test Scenarios",
      "transform": "table",
      "transparent": true,
      "type": "table"
    }
  ],
  "schemaVersion": 21,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "text": "refs/heads/master",
          "value": "refs/heads/master"
        },
        "datasource": "MSSQL Server",
        "definition": "SELECT SourceBranch from VstsBuild GROUP BY SourceBranch",
        "hide": 0,
        "includeAll": false,
        "label": "BranchName",
        "multi": false,
        "name": "BranchName",
        "options": [
          {
            "selected": true,
            "text": "refs/heads/master",
            "value": "refs/heads/master"
          },
          {
            "selected": false,
            "text": "refs/heads/release/1.0.8",
            "value": "refs/heads/release/1.0.8"
          },
          {
            "selected": false,
            "text": "refs/heads/release/1.0.9",
            "value": "refs/heads/release/1.0.9"
          }
        ],
        "query": "SELECT SourceBranch from VstsBuild GROUP BY SourceBranch",
        "refresh": 0,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "[Deprecated] Quarantined Tests",
  "uid": "UK50cyqWk",
  "version": 12
}