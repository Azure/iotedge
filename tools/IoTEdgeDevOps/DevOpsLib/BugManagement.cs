// Copyright (c) Microsoft. All rights reserved.
namespace DevOpsLib
{
    using System;
    using System.Threading.Tasks;
    using DevOpsLib.VstsModels;
    using Flurl;
    using Flurl.Http;
    using Newtonsoft.Json.Linq;

    public class BugManagement
    {
        const string WorkItemPathSegmentFormat = "{0}/{1}/{2}/_apis/wit/workitems/$Bug";

        readonly DevOpsAccessSetting accessSetting;

        public BugManagement(DevOpsAccessSetting accessSetting)
        {
            this.accessSetting = accessSetting;
        }

        /// <summary>
        /// This method is used to execute a Dev Ops work item query and get the number of bugs for a given query.
        /// If result is not found for a query, it will return 0.
        /// Reference: https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/wiql/query%20by%20wiql?view=azure-devops-rest-5.1
        /// </summary>
        /// <param name="bugQuery">Bug query object representing vsts shared queries</param>
        /// <returns>Number of bugs output by query</returns>
        public async Task<string> CreateBugAsync(string branch, VstsBuild build)
        {
            string requestPath = string.Format(WorkItemPathSegmentFormat, DevOpsAccessSetting.BaseUrl, this.accessSetting.Organization, this.accessSetting.Project);
            IFlurlRequest workItemQueryRequest = ((Url)requestPath)
                .WithBasicAuth(string.Empty, this.accessSetting.PersonalAccessToken)
                .WithHeader("Content-Type", "application/json-patch+json")
                .SetQueryParam("api-version", "6.0");

            var jsonBody = new[]
            {
                new {
                    op = "add",
                    path = "/fields/System.Title",
                    from = string.Empty,
                    value = $"Test failure on {branch}: {build.DefinitionId.ToString()} {build.BuildNumber}"
                },
                new
                {
                    op = "add",
                    path = "/fields/Microsoft.VSTS.TCM.ReproSteps",
                    from = string.Empty,
                    value = $"This bug is autogenerated by the vsts-pipeline-sync service. Link to failing build:<div> {build.WebUri}"
                },
                new
                {
                    op = "add",
                    path = "/fields/Microsoft.VSTS.Common.Priority",
                    from = string.Empty,
                    value = "0"
                },
                new
                {
                    op = "add",
                    path = "/fields/System.AreaPath",
                    from = string.Empty,
                    value = "One\\IoT\\Platform\\IoTEdge"
                }
            };

            JObject result;
            try
            {
                IFlurlResponse response = await workItemQueryRequest
                    .PostJsonAsync(jsonBody);

                result = await response.GetJsonAsync<JObject>();
                Console.WriteLine(result.ToString());
            }
            catch (FlurlHttpException e)
            {
                string message = $"Failed making call to vsts work item api: {e.Message}";
                Console.WriteLine(message);
                Console.WriteLine(e.Call.RequestBody);
                Console.WriteLine(e.Call.Response.StatusCode);
                Console.WriteLine(e.Call.Response.ResponseMessage);

                throw new Exception(message);
            }

            return result["id"].ToString();
        }
    }
}
