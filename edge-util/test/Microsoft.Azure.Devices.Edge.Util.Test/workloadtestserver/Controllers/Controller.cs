//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Microsoft.Azure.Devices.Edge.Util.Test.Common.WorkloadTestServer.Controllers
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IController
    {
        /// <summary>List modules.</summary>
        /// <param name="api_version">The version of the API.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<ModuleList> ListModulesAsync(string api_version);
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the payload will be signed. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="payload">The data to be signed.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<SignResponse> SignAsync(string api_version, string name, string genid, SignRequest payload);
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the plaintext will be encrypted. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="payload">The data to be encrypted.</param>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<EncryptResponse> EncryptAsync(string api_version, string name, string genid, EncryptRequest payload);
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the ciphertext will be decrypted. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="payload">The data to be decrypted.</param>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<DecryptResponse> DecryptAsync(string api_version, string name, string genid, DecryptRequest payload);
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module needed to obtain the certificate. (urlencoded)</param>
        /// <param name="request">Parameters for certificate creation.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<CertificateResponse> CreateIdentityCertificateAsync(string api_version, string name, IdentityCertificateRequest request);
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to get certificate. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="request">Parameters for certificate creation.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<CertificateResponse> CreateServerCertificateAsync(string api_version, string name, string genid, ServerCertificateRequest request);
    
        /// <param name="api_version">The version of the API.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<TrustBundleResponse> TrustBundleAsync(string api_version);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.Controller
    {
        private IController _implementation;
    
        public Controller(IController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>List modules.</summary>
        /// <param name="api_version">The version of the API.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("modules")]
        public System.Threading.Tasks.Task<ModuleList> ListModules([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {
            return _implementation.ListModulesAsync(api_version);
        }
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the payload will be signed. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="payload">The data to be signed.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/genid/{genid}/sign")]
        public System.Threading.Tasks.Task<SignResponse> Sign([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string name, string genid, [Microsoft.AspNetCore.Mvc.FromBody] SignRequest payload)
        {
            return _implementation.SignAsync(api_version, name, genid, payload);
        }
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the plaintext will be encrypted. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="payload">The data to be encrypted.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/genid/{genid}/encrypt")]
        public System.Threading.Tasks.Task<EncryptResponse> Encrypt([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string name, string genid, [Microsoft.AspNetCore.Mvc.FromBody] EncryptRequest payload)
        {
            return _implementation.EncryptAsync(api_version, name, genid, payload);
        }
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the ciphertext will be decrypted. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="payload">The data to be decrypted.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/genid/{genid}/decrypt")]
        public System.Threading.Tasks.Task<DecryptResponse> Decrypt([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string name, string genid, [Microsoft.AspNetCore.Mvc.FromBody] DecryptRequest payload)
        {
            return _implementation.DecryptAsync(api_version, name, genid, payload);
        }
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module needed to obtain the certificate. (urlencoded)</param>
        /// <param name="request">Parameters for certificate creation.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/certificate/identity")]
        public System.Threading.Tasks.Task<CertificateResponse> CreateIdentityCertificate([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string name, [Microsoft.AspNetCore.Mvc.FromBody] IdentityCertificateRequest request)
        {
            return _implementation.CreateIdentityCertificateAsync(api_version, name, request);
        }
    
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to get certificate. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT Hub.</param>
        /// <param name="request">Parameters for certificate creation.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/genid/{genid}/certificate/server")]
        public System.Threading.Tasks.Task<CertificateResponse> CreateServerCertificate([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string name, string genid, [Microsoft.AspNetCore.Mvc.FromBody] ServerCertificateRequest request)
        {
            System.Threading.Tasks.Task<CertificateResponse> certificateResponse = _implementation.CreateServerCertificateAsync(api_version, name, genid, request);
            this.HttpContext.Response.StatusCode = 201;
            return certificateResponse;
        }
    
        /// <param name="api_version">The version of the API.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("trust-bundle")]
        public System.Threading.Tasks.Task<TrustBundleResponse> TrustBundle([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {
            return _implementation.TrustBundleAsync(api_version);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ModuleList 
    {
        [Newtonsoft.Json.JsonProperty("modules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<ModuleDetails> Modules { get; set; } = new System.Collections.Generic.List<ModuleDetails>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ModuleDetails 
    {
        /// <summary>System generated unique identitier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>The name of the module.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>The type of a module.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Config Config { get; set; } = new Config();
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Status Status { get; set; } = new Status();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Config 
    {
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Settings { get; set; } = new object();
    
        [Newtonsoft.Json.JsonProperty("env", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EnvVar> Env { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Status 
    {
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exitStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExitStatus ExitStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runtimeStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RuntimeStatus RuntimeStatus { get; set; } = new RuntimeStatus();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EnvVar 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExitStatus 
    {
        [Newtonsoft.Json.JsonProperty("exitTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ExitTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RuntimeStatus 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SignRequest 
    {
        /// <summary>Name of key to perform sign operation.</summary>
        [Newtonsoft.Json.JsonProperty("keyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string KeyId { get; set; }
    
        /// <summary>Sign algorithm to be used.</summary>
        [Newtonsoft.Json.JsonProperty("algo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignRequestAlgo Algo { get; set; }
    
        /// <summary>Data to be signed.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Data { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SignResponse 
    {
        /// <summary>Signature of the data.</summary>
        [Newtonsoft.Json.JsonProperty("digest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Digest { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EncryptRequest 
    {
        /// <summary>The data to be encrypted.</summary>
        [Newtonsoft.Json.JsonProperty("plaintext", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Plaintext { get; set; }
    
        /// <summary>An initialization vector used to encrypt the data.</summary>
        [Newtonsoft.Json.JsonProperty("initializationVector", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] InitializationVector { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EncryptResponse 
    {
        /// <summary>The encrypted form of the data encoded in base 64.</summary>
        [Newtonsoft.Json.JsonProperty("ciphertext", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Ciphertext { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DecryptRequest 
    {
        /// <summary>The data to be decrypted.</summary>
        [Newtonsoft.Json.JsonProperty("ciphertext", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Ciphertext { get; set; }
    
        /// <summary>An initialization vector used to decrypt the data.</summary>
        [Newtonsoft.Json.JsonProperty("initializationVector", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] InitializationVector { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DecryptResponse 
    {
        /// <summary>The decrypted form of the data encoded in base 64.</summary>
        [Newtonsoft.Json.JsonProperty("plaintext", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Plaintext { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ServerCertificateRequest 
    {
        /// <summary>Subject common name</summary>
        [Newtonsoft.Json.JsonProperty("commonName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CommonName { get; set; }
    
        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Expiration { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentityCertificateRequest 
    {
        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Expiration { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CertificateResponse 
    {
        [Newtonsoft.Json.JsonProperty("privateKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PrivateKey PrivateKey { get; set; } = new PrivateKey();
    
        /// <summary>Base64 encoded PEM formatted byte array containing the certificate and its chain.</summary>
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Certificate { get; set; }
    
        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Expiration { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TrustBundleResponse 
    {
        /// <summary>Base64 encoded PEM formatted byte array containing the trusted certificates.</summary>
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Certificate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PrivateKey 
    {
        /// <summary>Indicates format of the key (present in PEM formatted bytes or a reference)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrivateKeyType Type { get; set; }
    
        /// <summary>Reference to private key.</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref { get; set; }
    
        /// <summary>Base64 encoded PEM formatted byte array</summary>
        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bytes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SignRequestAlgo
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMACSHA256")]
        HMACSHA256 = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PrivateKeyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ref")]
        Ref = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"key")]
        Key = 1,
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108