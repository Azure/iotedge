trigger: none
pr: none

# Input:
#   - edgelet & IIS: 
#      - PMC
#      - GitHub
#      - DevOps pipeline (edgebuild, edgerelease)
#   - Images:
#      - MCR
#      - DevOps pipeline (edgebuild, edgerelease)

stages:
  - stage: RunSmokeTest
    displayName: Smoke Test
    # BEARWASHERE -- For the current build pipeline from the previous build edgelet/images artifacts.
    # dependsOn:
    #   - PublishManifests
    #   - BuildPackages
    # condition: |
    #   and
    #   ( 
    #     in(dependencies.PublishManifests.result, 'Succeeded','Skipped', 'SucceededWithIssues'),
    #     in(dependencies.BuildPackages.result, 'Succeeded','Skipped', 'SucceededWithIssues')
    #   )
    # jobs:
    #   - job: ubuntu_2004_msmoby
    #     displayName: Ubuntu 20.04 with iotedge-moby
    #     variables:
    #       verbose: false
    #       os: linux
    #       arch: amd64
    #       artifactName: iotedged-ubuntu20.04-amd64
    #       identityServiceArtifactName: packages_ubuntu-20.04_amd64
    #       identityServicePackageFilter: aziot-identity-service_*_amd64.deb
    #       builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
    #       builtPackages: $[ stageDependencies.BuildPackages.linux.result ]

    # BEARWASHERE -- For other sources edgelet,IIS artifacts
    jobs:
    - job: downloadFromGitHub
      displayName: Download Artifacts from GitHub
      # BEARWASHERE -- have the test agents download a proper artifact for their OS & arch
      strategy:
        matrix:
          Centos75-amd64:
            arch: amd64
            os: centos7
            target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
      pool:
      name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
      steps: 
      - task: Bash@3
        displayName: Download Edgelet
        condition: true
        env:
          VERSION: "1.1.13"
        inputs:
          targetType: 'inline'
          script: |
            #wget https://github.com/Azure/azure-iotedge/releases/download/1.1.13/iotedge_1.1.13-1_debian10_amd64.deb 
            pushd
            wget https://github.com/Azure/azure-iotedge/releases/download/1.1.13/iotedge_1.1.13-1_debian10_amd64.deb 


    #     steps:
    #     - template: ../e2e/templates/e2e-setup.yaml
    #     - template: ../e2e/templates/e2e-run.yaml  
    jobs:
    - job: job1
      displayName: job1
      steps:
      - checkout: self
        submodules: recursive
      - checkout: iotedge
        submodules: recursive
      - checkout: azure-iotedge
        submodules: recursive
      - checkout: iot-identity-service
        submodules: recursive
      - task: Bash@3
        displayName: Directory layout
        inputs:
          targetType: 'inline'
          script: |
            echo "=============================================="
            echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
            ls -a $(Build.SourcesDirectory)
            # find $(Build.SourcesDirectory) -type d | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
            # ls -R $(Build.SourcesDirectory) | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
            echo " "
            echo "=============================================="
            echo "Agent.BuildDirectory:   $(Agent.BuildDirectory)"
            ls -a $(Agent.BuildDirectory)
            # find $(Agent.BuildDirectory) -type d | sed -e "s/[^-][^\/]*\// |/g" -e "s/|\([^ ]\)/|-\1/"
            # ls -R $(Agent.BuildDirectory) | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
      - task: AzureKeyVault@1
        displayName: Get secrets
        inputs:
          azureSubscription: azureiotedge-arm
          keyVaultName: edgebuildkv
          secretsFilter: >-
            GitHubAccessToken
      - task: Bash@3
        displayName: Test GitHub
        inputs:
          targetType: 'inline'
          script: |
            echo "=============================================="

            # echo "git config --global user.name IotEdge1"
            # git config --global user.name "IotEdge1"

            # echo "git config --global user.email \"iotedge1@microsoft.com\""
            # git config --global user.email "iotedge1@microsoft.com"

            # git push https://<GITHUB_ACCESS_TOKEN>@github.com/<GITHUB_USERNAME>/<REPOSITORY_NAME>.git

            echo "cd $(Build.SourcesDirectory)/iotedge"
            cd $(Build.SourcesDirectory)/iotedge

            gitCmd="git remote -vv"
            echo "$gitCmd"
            $gitCmd || true

            gitCmd="git branch -vv"
            echo "$gitCmd"
            $gitCmd || true

            gitCmd="git checkout -b yophilav/TestGhCli"
            echo "$gitCmd"
            $gitCmd || true

            echo "BearTest" > ./test
            git add ./test
            git commit -am "Testing $(Build.BuildId)"
            git push https://$GITHUB_PAT@github.com/Azure/azure-iotedge.git

        env:
            GITHUB_PAT: "$(GitHubAccessToken)"