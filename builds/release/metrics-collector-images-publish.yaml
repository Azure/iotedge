trigger: none
pr: none

variables:
  DisableDockerDetector: true
  NugetSecurityAnalysisWarningLevel: warn

resources:
  pipelines:
  - pipeline: stage-metrics-collector
    source: 'Stage Metrics Collector Images'
    trigger: true

pool:
  name: $(pool.linux.name)
  demands:
  - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby    

jobs:
################################################################################
- job: version_from_pipeline
################################################################################
  displayName: Get version from triggering pipeline
  condition: |
    and(
      eq(variables['Build.Reason'],'ResourceTrigger'),
      eq(variables['Resources.TriggeringCategory'],'pipeline'),
      eq(variables['Resources.TriggeringAlias'],'stage-metrics-collector')
    )            
  steps:
  - download: stage-metrics-collector
    artifact: version
  - script: |
      version=$(cat '$(Pipeline.Workspace)/stage-metrics-collector/version/version.txt')
      echo "Version from triggering pipeline is $version"
      echo "##vso[task.setvariable variable=version;isOutput=true]$version"
    displayName: Set version
    name: set

################################################################################
# - deployment: publish
- job: publish
################################################################################
  displayName: Publish Metrics Collector
  dependsOn: version_from_pipeline
  variables:
    ${{ if eq(variables['Build.Reason'],'ResourceTrigger') }}:
      version: $[ dependencies.version_from_pipeline.outputs['set.version'] ]
    ${{ else }}:
      version: $[ variables.version ]
  # workspace:
  #   clean: all
  # environment: 'Azure-IoT-Edge-Core Release Env'
  # strategy:
  #   runOnce:
  #     deploy:
  steps:
  - checkout: self
    fetchDepth: 0

  - task: Docker@2
    displayName: Docker login edgerelease
    inputs:
      command: login
      containerRegistry: $(service-connection.registry.release)

  - script: |
      scripts/linux/moveImage.sh \
        --from $(registry.address)/$(from.registry.namespace)/azureiotedge-metrics-collector:$(version)-linux-amd64 \
        --to $(registry.address)/$(to.registry.namespace)/azureiotedge-metrics-collector:$(version)-linux-amd64
    displayName: 'Publish Image - Linux amd64'

  - script: |
      scripts/linux/moveImage.sh \
        --from $(registry.address)/$(from.registry.namespace)/azureiotedge-metrics-collector:$(version)-linux-arm32v7 \
        --to $(registry.address)/$(to.registry.namespace)/azureiotedge-metrics-collector:$(version)-linux-arm32v7
    displayName: 'Publish Image - Linux arm32v7'

  - script: |
      scripts/linux/moveImage.sh \
        --from $(registry.address)/$(from.registry.namespace)/azureiotedge-metrics-collector:$(version)-linux-arm64v8 \
        --to $(registry.address)/$(to.registry.namespace)/azureiotedge-metrics-collector:$(version)-linux-arm64v8
    displayName: 'Publish Image - Linux arm64v8'

  - script: |
      scripts/linux/buildManifest.sh \
        -r $(registry.address) \
        -v $(version) \
        -t $(System.DefaultWorkingDirectory)/edge-modules/metrics-collector/docker/manifest.yaml.template \
        -n $(to.registry.namespace) \
        --tags "$(tags)"
    displayName: 'Publish Manifest'
