trigger: none
pr: none

variables:
  DisableDockerDetector: true
  NugetSecurityAnalysisWarningLevel: warn
  Build.Configuration: release

stages:
# This stage builds Rocks DB and adds the files to staging directory
# It's only needed for building E2E test images and not needed for the Metrics Collector
################################################################################
- template: ../misc/templates/build-rocksdb.yaml
################################################################################

- stage: BuildReleaseImages
  dependsOn: BuildRocksDB

  jobs:
  ################################################################################
    - job: MetricsCollector_Linux
  ################################################################################
      displayName: Metrics Collector Linux Build
      timeoutInMinutes: 30
      pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
      steps:
        # If you need to test this job. Create a new Service Connection in the Project Settings (Azure DevOps)
        # and update the pipeline variable.
        - task: Docker@2
          displayName: Docker login edgerelease
          inputs:
            command: login
            containerRegistry: $(service.connection)

        - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
          displayName: Build ($(Build.Configuration))

        # The code sign task requires .NET Core 2.1.
        # TODO: Investigate why we have to toggle primary installs on linux, when we didn't have to do this on windows (now removed).
        - template: ../templates/force-dotnet21.yaml
        # Code Sign
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: "Metrics Collector Code Sign"
          inputs:
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: $(Build.BinariesDirectory)/publish/Microsoft.Azure.Devices.Edge.Azure.Monitor
            Pattern: Microsoft.Azure.Devices.Edge.Azure.Monitor*.dll
            SessionTimeout: 20
            inlineOperation: |
                [
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolSign",
                      "parameters": [
                      {
                          "parameterName": "OpusName",
                          "parameterValue": "Microsoft"
                      },
                      {
                          "parameterName": "OpusInfo",
                          "parameterValue": "http://www.microsoft.com"
                      },
                      {
                          "parameterName": "Append",
                          "parameterValue": "/as"
                      },
                      {
                          "parameterName": "FileDigest",
                          "parameterValue": "/fd \"SHA256\""
                      },
                      {
                          "parameterName": "PageHash",
                          "parameterValue": "/NPH"
                      },
                      {
                          "parameterName": "TimeStamp",
                          "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolVerify",
                      "parameters": [
                      {
                          "parameterName": "VerifyAll",
                          "parameterValue": "/all"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
                ]
            signConfigType: inlineSignParams
        # We're done with code signing, so remove dotnet version override
        - template: ../templates/restore-default-dotnet.yaml

        - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
          displayName: 'SBOM Generation Task'
          inputs:
              BuildDropPath: '$(Build.BinariesDirectory)/publish'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts'
          inputs:
            PathtoPublish: '$(Build.BinariesDirectory)/publish'
            ArtifactName: 'core-linux'

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'librocksdb'
            path: '$(Pipeline.Workspace)/librocksdb'

        - task: CopyFiles@2
          displayName: Copy rocksdb libs
          inputs:
            sourceFolder: '$(Pipeline.Workspace)/librocksdb'
            contents: '**'
            targetFolder: '$(Build.BinariesDirectory)/publish/librocksdb'

        - template: ../misc/templates/image-linux.yaml
          parameters:
            name: Metrics Collector (customer-facing)
            imageName: azureiotedge-metrics-collector
            project: Microsoft.Azure.Devices.Edge.Azure.Monitor
            version: $(version)

        # for E2E tests only
        - template: ../misc/templates/image-linux.yaml
          parameters:
            imageName: azureiotedge-agent
            name: "Edge Agent"
            project: Microsoft.Azure.Devices.Edge.Agent.Service
            version: $(version)
            buildx_flag: 'true'
            use_rocksdb: true
        - template: ../misc/templates/image-linux.yaml
          parameters:
            imageName: azureiotedge-hub
            name: "Edge Hub"
            project: Microsoft.Azure.Devices.Edge.Hub.Service
            version: $(version)
            buildx_flag: 'true'
            use_rocksdb: true
        - template: ../misc/templates/image-linux.yaml
          parameters:
            name: "Direct Method Sender"
            imageName: azureiotedge-direct-method-sender
            project: DirectMethodSender
            bin_dir: '$(Build.BinariesDirectory)'
            buildx_flag: 'true'

################################################################################
- stage: PublishManifests
################################################################################
  displayName: Publish Manifest Images
  dependsOn: BuildReleaseImages
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  jobs:
    - job:
      steps:
      # If you need to test this job. Create a new Service Connection in the Project Settings (Azure DevOps)
      # and update the pipeline variable.
      - task: Docker@2
        displayName: Docker login edgerelease
        inputs:
          command: login
          containerRegistry: "$(service.connection)"
      - script: scripts/linux/buildManifest.sh -r "$(registry.address)" -v "$(version)" -t "$(System.DefaultWorkingDirectory)"/edge-modules/metrics-collector/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
        displayName: 'Publish Metrics Collector Manifest'

################################################################################
- stage: RunE2ETest
################################################################################
  dependsOn: PublishManifests
  condition: in(dependencies.PublishManifests.result, 'Succeeded', 'SucceededWithIssues')
  variables:
    # A 'minimal' pipeline only runs one end-to-end test (TempSensor). This is useful for platforms or
    # environments that are very similar to other platforms/environments in our matrix, Ubuntu 18.04
    # with the 'docker-ce' package vs. Ubuntu 18.04 with the 'iotedge-moby' package vs. the same
    # variations in Ubuntu 20.04. In these instances the platforms/environments are so similar that we
    # don't reasonably expect to encounter differences--if we do, it would likely manifest during
    # installation, or in running a very basic test. We don't need to repeat the entire test suite.
    # The 'minimal' variable defaults to 'false'; we override it in specific jobs as needed.
    minimal: false
    verbose: false
  jobs:
  ################################################################################
    - job: linux_arm32v7
  ################################################################################
      displayName: Linux arm32v7

      pool:
        name: $(pool.custom.name)
        demands: rpi3-e2e-tests

      variables:
        os: linux
        arch: arm32v7
        artifactName: iotedged-debian9-arm32v7
        builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

      timeoutInMinutes: 120

      steps:
      - task: Docker@2
        displayName: Docker login edgerelease
        inputs:
          command: login
          containerRegistry: iotedge-release-acr
      - template: ../e2e/../e2e/templates/e2e-clean-directory.yaml
      - template: ../e2e/templates/e2e-setup-base-image-update-release.yaml
      - template: ../e2e/templates/e2e-clear-docker-cached-images.yaml
      - template: ../e2e/templates/e2e-run-metrics-collector.yaml

  ################################################################################
    - job: ubuntu_1804_msmoby
  ################################################################################
      displayName: Ubuntu 18.04 with iotedge-moby

      pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-18.04-msmoby

      variables:
        os: linux
        arch: amd64
        artifactName: iotedged-ubuntu18.04-amd64
        builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

      steps:
      - template: ../e2e/templates/e2e-setup-base-image-update-release.yaml
      - template: ../e2e/templates/e2e-run-metrics-collector.yaml

  ################################################################################
    - job: ubuntu_1804_docker
  ################################################################################
      displayName: Ubuntu 18.04 with Docker (minimal)

      pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker

      variables:
        os: linux
        arch: amd64
        artifactName: iotedged-ubuntu18.04-amd64
        builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
        minimal: true

      steps:
      - template: ../e2e/templates/e2e-setup-base-image-update-release.yaml
      - template: ../e2e/templates/e2e-run-metrics-collector.yaml

  ################################################################################
    - job: ubuntu_2004_msmoby
  ################################################################################
      displayName: Ubuntu 20.04 with iotedge-moby

      pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby

      variables:
        os: linux
        arch: amd64
        artifactName: iotedged-ubuntu20.04-amd64
        builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

      steps:
      - template: ../e2e/templates/e2e-setup-base-image-update-release.yaml
      - template: ../e2e/templates/e2e-run-metrics-collector.yaml

  ################################################################################
    - job: ubuntu_2004_arm64v8
  ################################################################################
      displayName: Ubuntu 20.04 with arm64v8
      pool:
        name: $(pool.linux.arm.name)
        demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-arm64-docker

      variables:
        os: linux
        arch: arm64v8
        artifactName: iotedged-ubuntu20.04-aarch64
        builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

      steps:
      - task: Docker@2
        displayName: Docker login edgerelease
        inputs:
          command: login
          containerRegistry: iotedge-release-acr
      - template: ../e2e/templates/e2e-clean-directory.yaml
      - template: ../e2e/templates/e2e-setup-base-image-update-release.yaml
      - template: ../e2e/templates/e2e-clear-docker-cached-images.yaml
      - template: ../e2e/templates/e2e-run-metrics-collector.yaml

  ################################################################################
    - job: ubuntu_2004_docker
  ################################################################################
      displayName: Ubuntu 20.04 with Docker (minimal)

      pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker

      variables:
        os: linux
        arch: amd64
        artifactName: iotedged-ubuntu20.04-amd64
        builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
        minimal: true

      steps:
      - template: ../e2e/templates/e2e-setup-base-image-update-release.yaml
      - template: ../e2e/templates/e2e-run-metrics-collector.yaml
