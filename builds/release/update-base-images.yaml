trigger: none
pr: none

resources:
  repositories:
  - repository: azure-iotedge
    type: github
    endpoint: Azure/azure-iotedge
    name: Azure/azure-iotedge
    ref: refs/pull/101/head # TODO: Remove PR ref once it is merged

variables:
  NugetSecurityAnalysisWarningLevel: warn
  DisableDockerDetector: true
  registry: mcr.microsoft.com

pool:
  name: $(pool.linux.name)
  demands:
  - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker

steps:
- script: |
    needs_update=( )

    images=( $(cat product-versions.json | jq -r '
      def parse_components(c): c[] | select(has("type")) | select(.type == "dockerImage") | { name, version };
      def parse_types(t): t[] | select(.name == "dockerImage") | .platforms[] | .os as $os | .arch[] | { os: $os, arch: . };
      .channels[] | .products[] as { $components, $types } |
        parse_components($components) as { $name, $version } |
        parse_types($types) as { $os, $arch } |
        @text "\($name):\($version)-\($os)-\($arch)"
    ') )

    for image in ${images[@]}
    do
      echo "image: $image"

      # This command assumes that the $image has a manifest, not a manifest list.
      # In other words, $image is _not_ a multi-arch image.
      read base_image current_digest <<< $(\
        docker buildx imagetools inspect $image --format "{{json .BuildInfo}}" |
        jq -r '@text "\(.sources[0].ref) \(.sources[0].pin)"'
      )

      latest_digest="sha256:$(docker buildx imagetools inspect --raw $base_image | shasum --algorithm 256 | awk '{print$1}')"

      echo -e "  base:\t\t$base_image\n  current:\t$current_digest\n  latest:\t$latest_digest"

      if [ "$current_digest" != 'null' ] && [ "$current_digest" != "$latest_digest" ]
      then
        echo "  ## NEEDS UPDATE ##"
        needs_update+=( "$image" )
      fi
    done

    echo "Found ${#needs_update[@]} images that need to be updated:"
    printf '  %s\n' "${needs_update[@]}"
    printf '%s\n' "${needs_update[@]}" > $(Build.ArtifactStagingDirectory)/updates.txt
  displayName: Detect base image updates
  env:
    PUBLISHED_IMAGES: ${{ convertToJson(parameters.published_images) }}

- task: PublishBuildArtifacts@1
  displayName: Save list of images to update
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/updates.txt
    ArtifactName: image-updates
