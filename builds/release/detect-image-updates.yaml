trigger: none
pr: none

schedules:
# Twice daily (7AM/PM PST)
- cron: "0 3,15 * * *"
  displayName: Twice daily check (8AM/PM PDT)
  branches:
    include:
    - main
    - release/*
  always: true

resources:
  repositories:
  - repository: product
    type: github
    endpoint: Azure/azure-iotedge
    name: Azure/azure-iotedge

variables:
  NugetSecurityAnalysisWarningLevel: warn
  DisableDockerDetector: true

pool:
  name: $(pool.linux.name)
  demands:
  - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker

steps:
- checkout: product
  fetchDepth: 0

- script: |
    #!/bin/bash
    set -euo pipefail

    branch="${BUILD_SOURCEBRANCH#refs/heads/}"

    # transform product-versions.json into a list of images for each product in this branch
    images_json=$(cat product-versions.json | jq --arg registry "$REGISTRY" --arg branch "$branch" '
      def is_image: has("type") and .type == "dockerImage";
      def platforms: .componentTypes[] | select(.name == "dockerImage") | .platforms[] | { os, arch: .arch[] | . };
      [
        .channels[] | .products[] | select(
          .components | any(is_image and .repo == "Azure/iotedge" and .branch == $branch)
        ) | {
          product: .id, version, images: [
            platforms as $platforms | .components[] | select(is_image) | . as { $name, $version } | $platforms
              | @text "\($registry)/\($name):\($version)-\(.os)-\(.arch)"
          ] | sort
        }
      ] | unique
    ')

    # use build metadata present in each published image to determine if it is out of date
    remove=( )
    images=( $(echo "$images_json" | jq -r '[ .[].images ] | flatten | join("\n")') )
    for image in ${images[@]}
    do
      echo "image: $image"

      # This command assumes that the $image has a manifest, not a manifest list.
      # In other words, $image is _not_ a multi-arch image.
      read base_image current_digest <<< $(\
        docker buildx imagetools inspect $image --format "{{json .BuildInfo}}" |
        jq -r '@text "\(.sources[0].ref) \(.sources[0].pin)"'
      )

      if [ "$base_image" == 'null' ]
      then
        echo "'$image' does not contain Docker BuildInfo metadata. Skipping..."
        remove+=( "$image" )
        continue
      fi

      latest_digest="sha256:$(docker buildx imagetools inspect --raw $base_image | shasum --algorithm 256 | awk '{print$1}')"

      echo -e "  base:\t\t$base_image\n  current:\t$current_digest\n  latest:\t$latest_digest"

      if [ "$current_digest" != 'null' ] && [ "$current_digest" != "$latest_digest" ]
      then
        echo "  ## NEEDS UPDATE ##"
      else
        remove+=( "$image" )
      fi
    done

    # filter up-to-date images out of the list
    remove_json=$(printf '%s\n' "${remove[@]}" | jq -R '.' | jq -s '.')
    images_json=$(echo "$images_json" | jq --argjson remove "$remove_json" '
      [ .[] | { product, version, images: (.images - $remove) } | select(.images | length != 0) ]
    ')

    if [ $(echo "$images_json" | jq '. | length != 0') == 'true' ]
    then
      echo 'Found images that need to be updated:'
      echo "$images_json" | jq '.'
    else
      echo 'All images are up to date. Nothing to do...'
    fi

    echo "$images_json" > $(Build.ArtifactStagingDirectory)/updates.json
  displayName: Detect base image updates
  env:
    REGISTRY: mcr.microsoft.com

- task: PublishBuildArtifacts@1
  displayName: Save list of images to update
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/updates.json'
    artifactName: image-updates
