parameters:
  changelog: ''
  tags: ''
  version.core: ''
  version.core.previous: ''
  version.diagnostics: ''

jobs:
- job: publish_images
  displayName: Publish Images

  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker

  steps:
  - checkout: self
    fetchDepth: 0
  - checkout: product
    fetchDepth: 0

  - task: Docker@2
    displayName: Docker login
    inputs:
      command: login
      containerRegistry: $(service-connection.registry.release)

  - script: |
      #!/bin/bash
      set -euo pipefail

      version='${{ parameters['version.core'] }}'
      platform_tags=( "$version-linux-amd64" "$version-linux-arm64v8" "$version-linux-arm32v7" )

      # first, copy the platform-specific tags from source to destination repositories
      for tag in ${$platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(registry.address)' \
          --src-repo 'microsoft/azureiotedge-agent' \
          --src-ref "$tag" \
          --dst-repo 'public/azureiotedge-agent' \
          --dst-tag "$tag"
      done

      # next, copy the source repo's multi-platform image into the given tags in the destination repo
      multi_platform_tags=( $(echo '${{ parameters.tags }}' |
          jq -r --arg primary_tag "$version" '. + [ $primary_tag ] | join("\n")') )

      for tag in ${multi_platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(from.registry.address)' \
          --src-repo 'microsoft/azureiotedge-agent' \
          --src-ref "$version" \
          --dst-repo 'public/azureiotedge-agent' \
          --dst-tag "$tag"
      done
    displayName: 'Publish Edge Agent images'

  - script: |
      #!/bin/bash
      set -euo pipefail

      version='${{ parameters['version.core'] }}'
      platform_tags=( "$version-linux-amd64" "$version-linux-arm64v8" "$version-linux-arm32v7" )

      # first, copy the platform-specific tags from source to destination repositories
      for tag in ${$platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(registry.address)' \
          --src-repo 'microsoft/azureiotedge-hub' \
          --src-ref "$tag" \
          --dst-repo 'public/azureiotedge-hub' \
          --dst-tag "$tag"
      done

      # next, copy the source repo's multi-platform image into the given tags in the destination repo
      multi_platform_tags=( $(echo '${{ parameters.tags }}' |
          jq -r --arg primary_tag "$version" '. + [ $primary_tag ] | join("\n")') )

      for tag in ${multi_platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(from.registry.address)' \
          --src-repo 'microsoft/azureiotedge-hub' \
          --src-ref "$version" \
          --dst-repo 'public/azureiotedge-hub' \
          --dst-tag "$tag"
      done
    displayName: 'Publish Edge Hub images'

  - script: |
      #!/bin/bash
      set -euo pipefail

      version='${{ parameters['version.core'] }}'
      platform_tags=( "$version-linux-amd64" "$version-linux-arm64v8" "$version-linux-arm32v7" )

      # first, copy the platform-specific tags from source to destination repositories
      for tag in ${$platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(registry.address)' \
          --src-repo 'microsoft/azureiotedge-simulated-temperature-sensor' \
          --src-ref "$tag" \
          --dst-repo 'public/azureiotedge-simulated-temperature-sensor' \
          --dst-tag "$tag"
      done

      # next, copy the source repo's multi-platform image into the given tags in the destination repo
      multi_platform_tags=( $(echo '${{ parameters.tags }}' |
          jq -r --arg primary_tag "$version" '. + [ $primary_tag, "latest" ] | join("\n")') )

      for tag in ${multi_platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(from.registry.address)' \
          --src-repo 'microsoft/azureiotedge-simulated-temperature-sensor' \
          --src-ref "$version" \
          --dst-repo 'public/azureiotedge-simulated-temperature-sensor' \
          --dst-tag "$tag"
      done
    displayName: 'Publish Simulated Temperature Sensor images'

  - script: |
      #!/bin/bash
      set -euo pipefail

      version='${{ parameters['version.diagnostics'] }}'
      platform_tags=( "$version-linux-amd64" "$version-linux-arm64v8" "$version-linux-arm32v7" )

      # first, copy the platform-specific tags from source to destination repositories
      for tag in ${$platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(registry.address)' \
          --src-repo 'microsoft/azureiotedge-diagnostics' \
          --src-ref "$tag" \
          --dst-repo 'unlisted/azureiotedge-diagnostics' \
          --dst-tag "$tag"
      done

      # next, copy the source repo's multi-platform image into the given tags in the destination repo
      multi_platform_tags=( $(echo '${{ parameters.tags }}' |
          jq -r --arg primary_tag "$version" '. + [ $primary_tag ] | join("\n")') )

      for tag in ${multi_platform_tags[@]}
      do
        scripts/linux/copyImage.sh \
          --registry '$(from.registry.address)' \
          --src-repo 'microsoft/azureiotedge-diagnostics' \
          --src-ref "$version" \
          --dst-repo 'unlisted/azureiotedge-diagnostics' \
          --dst-tag "$tag"
      done
    displayName: 'Publish Diagnostics images'

  - task: AzureKeyVault@1
    displayName: Get secrets
    inputs:
      azureSubscription: $(az.subscription)
      keyVaultName: $(kv.name)
      secretsFilter: TestGitHubAccessToken

  - script: |
      #!/bin/bash
      set -euo pipefail

      # update product-versions.json
      echo "$(jq '
        def product: .channels[] | .products[] | select(
          .id=="aziot-edge" and .version=="${{ parameters['version.core.previous'] }}"
        );
        def core_components: product | .components[] | select(
          .name=="azureiotedge-agent"
            or .name=="azureiotedge-hub"
            or .name=="azureiotedge-simulated-temperature-sensor"
        );
        def diagnostics_component: product | .components[] | select(
          .name=="azureiotedge-diagnostics"
        );
        (core_components).version |= "${{ parameters['version.core'] }}"
          | (diagnostics_component).version |= "${{ parameters['version.diagnostics'] }}"
          | (product).version |= "${{ parameters['version.core'] }}"
      ' product-versions.json )" > product-versions.json
      git add product-versions.json

      # configure git
      git config user.email '$(service-account.email)'
      git config user.name 'IoT Edge Bot'
      origin_url="$(git config --get remote.origin.url)"
      origin_url="${origin_url/#https:\/\//https:\/\/$GITHUB_TOKEN@}" # add token to URL

      # commit changes, tag, and push
      git commit -m 'Prepare for release ${{ parameters['version.core'] }}'
      git tag '${{ parameters['version.core'] }}'
      git push "$origin_url" "HEAD:$PRODUCT_REPO_BRANCH"
      git push "$origin_url" '${{ parameters['version.core'] }}'
    displayName: Create release commit in product repo
    env:
      GITHUB_TOKEN: $(TestGitHubAccessToken)
      PRODUCT_REPO_BRANCH: main
    workingDirectory: azure-iotedge

  - script: |
      #!/bin/bash
      set -euo pipefail

      # deserialize the changelog
      printf -v CHANGELOG '${{ parameters.changelog }}'
      # Remove 1st line (header) because GitHub Release page has its own header
      CHANGELOG="$(echo "$CHANGELOG" | tail -n +2 -)"

      . scripts/linux/release-tools.sh
      create_github_release_page_in_product_repo

      echo "##vso[task.setvariable variable=release_url]$RELEASE_URL"
    displayName: Create GitHub release page in product repo
    env:
      CORE_VERSION: ${{ parameters['version.core'] }}
      DIAG_VERSION: ${{ parameters['version.diagnostics'] }}
      GITHUB_TOKEN: $(TestGitHubAccessToken)
      BRANCH: main
      REPO_NAME: $(repo.product.name)
    workingDirectory: iotedge

  - script: |
      #!/bin/bash
      set -euo pipefail

      BRANCH="${BUILD_SOURCEBRANCH#refs/heads/}"

      . scripts/linux/release-tools.sh
      create_github_release_page_for_core_images_in_project_repo
    displayName: Create GitHub release page in project repo
    env:
      CORE_VERSION: ${{ parameters['version.core'] }} 
      GITHUB_TOKEN: $(TestGitHubAccessToken)
      RELEASE_URL: $(release_url)
      REPO_NAME: $(repo.project.name)
    workingDirectory: iotedge
