parameters:
  az.subscription: ''
  dps.idScope: ''
  kv.name: ''
  pool.linux.arm.name: ''
  pool.linux.name: ''
  registry.address: ''
  registry.username: ''
  verbose: false
  version.core: ''
  version.diagnostics: ''

jobs:
- job: test
  displayName: Test Linux

  variables:
    build.config: Release
    os: linux

  strategy:
    matrix:
      arm32v7:
        pool: ${{ parameters['pool.linux.arm.name'] }}
        # Since this pipeline is about testing the Metrics Collector Docker image for release
        # and not our host components, we'll run the arm32v7 Docker image on an arm64v8 host
        # OS, with arm64v8 host components, for speed and convenience.
        agent: agent-aziotedge-ubuntu-20.04-arm64-docker
        arch: arm32v7
      arm64v8:
        pool: ${{ parameters['pool.linux.arm.name'] }}
        agent: agent-aziotedge-ubuntu-20.04-arm64-docker
        arch: arm64v8
      amd64:
        pool: ${{ parameters['pool.linux.name'] }}
        agent: agent-aziotedge-ubuntu-20.04-msmoby
        arch: amd64

  pool:
    name: $(pool)
    demands:
    - ImageOverride -equals $(agent)

  steps:

  - checkout: self
    fetchDepth: 0

  - task: AzureKeyVault@1
    displayName: Get secrets
    inputs:
      azureSubscription: ${{ parameters['az.subscription'] }}
      keyVaultName: ${{ parameters['kv.name'] }}
      secretsFilter: >-
        ReleaseContainerRegistryPassword,
        TestDpsGroupKeySymmetric,
        TestEventHubCompatibleEndpoint,
        TestGitHubAccessToken,
        TestIotHubConnectionString,
        TestRootCaCertificate,
        TestRootCaKey,
        TestRootCaPassword,
        TestBlobStoreSas

  - pwsh: |
      $certsDir = '$(System.ArtifactsDirectory)/certs'
      New-Item "$certsDir" -ItemType Directory -Force | Out-Null
      $env:ROOT_CERT | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.cert.pem"
      $env:ROOT_KEY | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.key.pem"
      Write-Output "##vso[task.setvariable variable=certsDir]$certsDir"
    displayName: Install CA keys
    env:
      ROOT_CERT: $(TestRootCaCertificate)
      ROOT_KEY: $(TestRootCaKey)

  - pwsh: |
      $testDir = '$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test'
      dotnet build -c $(build.config) $testDir

      $binDir = Convert-Path "$testDir/bin/$(build.config)/net6.0"
      Write-Output "##vso[task.setvariable variable=binDir]$binDir"
    displayName: Build tests
    env:
      http_proxy: $(Agent.ProxyUrl)
      https_proxy: $(Agent.ProxyUrl)

  - pwsh: |
      $caCertScriptPath = Convert-Path '$(Build.SourcesDirectory)/tools/CACertificates'
      $rootCaCertificatePath = Convert-Path '$(certsDir)/rsa_root_ca.cert.pem'
      $rootCaPrivateKeyPath = Convert-Path '$(certsDir)/rsa_root_ca.key.pem'
      $imagePrefix = '${{ parameters['registry.address'] }}/microsoft/azureiotedge'
      $coreTag = '${{ parameters['version.core'] }}-$(os)-$(arch)'
      $diagnosticsTag = '${{ parameters['version.diagnostics'] }}-$(os)-$(arch)'
      $testTag = '$(Build.BuildNumber)-$(os)-$(arch)'

      $context = @{
        caCertScriptPath = "$caCertScriptPath";
        diagnosticsImage = "$imagePrefix-diagnostics:$diagnosticsTag";
        dpsIdScope = '${{ parameters['dps.idScope'] }}';
        edgeAgentImage = "$imagePrefix-agent:$coreTag";
        edgeHubImage = "$imagePrefix-hub:$coreTag";
        getSupportBundle = $true;
        loadGenImage = "$imagePrefix-load-gen:$testTag";
        logFile = Join-Path '$(binDir)' 'testoutput.log';
        methodReceiverImage = "$imagePrefix-direct-method-receiver:$testTag";
        methodSenderImage = "$imagePrefix-direct-method-sender:$testTag";
        metricsValidatorImage = "$imagePrefix-metrics-validator:$testTag";
        networkControllerImage = "$imagePrefix-network-controller:$testTag";
        numberLoggerImage = "$imagePrefix-number-logger:$testTag";
        registries = @(
          @{
            address = '${{ parameters['registry.address'] }}';
            username = '${{ parameters['registry.username'] }}';
          }
        );
        relayerImage = "$imagePrefix-relayer:$testTag";
        rootCaCertificatePath = "$rootCaCertificatePath";
        rootCaPrivateKeyPath = "$rootCaPrivateKeyPath";
        tempFilterFuncImage = "$imagePrefix-functions-filter:$testTag";
        tempFilterImage = "$imagePrefix-temperature-filter:$testTag";
        tempSensorImage = "$imagePrefix-simulated-temperature-sensor:$coreTag";
        testResultCoordinatorImage = "$imagePrefix-test-result-coordinator:$testTag";
        verbose = '${{ parameters.verbose }}' -eq 'true';
      }

      if ('$(arch)' -eq 'arm32v7' -or '$(arch)' -eq 'arm64v8')
      {
        $context['optimizeForPerformance'] = $false
        $context['setupTimeoutMinutes'] = 10
        $context['teardownTimeoutMinutes'] = 10
        $context['testTimeoutMinutes'] = 10
      }

      if ($env:AGENT_PROXYURL)
      {
        $context['testRunnerProxy'] = $env:AGENT_PROXYURL
        $context['edgeProxy'] = $env:AGENT_PROXYURL
      }

      $context | ConvertTo-Json | Out-File -Encoding Utf8 '$(binDir)/context.json'
      Get-Content -Path '$(binDir)/context.json'
    displayName: Create test arguments file (context.json)

  - pwsh: |
      $testFile = '$(binDir)/Microsoft.Azure.Devices.Edge.Test.dll'

      # Filter out flaky tests.
      $filter = 'Category!=Flaky&Category!=NestedEdgeOnly'
      if ('$(arch)' -eq 'arm32v7' -Or '$(arch)' -eq 'arm64v8')
      {
        $filter += '&Category!=FlakyOnArm'
        $filter += '&Category!=Amd64Only'
      }

      sudo --preserve-env dotnet test $testFile --no-build --logger 'trx' --filter "$filter"
    displayName: Run tests
    env:
      E2E_DPS_GROUP_KEY: $(TestDpsGroupKeySymmetric)
      E2E_EVENT_HUB_ENDPOINT: $(TestEventHubCompatibleEndpoint)
      E2E_IOT_HUB_CONNECTION_STRING: $(TestIotHubConnectionString)
      E2E_REGISTRIES__0__PASSWORD: $(ReleaseContainerRegistryPassword)
      E2E_ROOT_CA_PASSWORD: $(TestRootCaPassword)
      E2E_BLOB_STORE_SAS: $(TestBlobStoreSas)
      no_proxy: 'localhost'

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testRunner: vstest
      testResultsFiles: '**/*.trx'
      searchFolder: $(Build.SourcesDirectory)/TestResults
      testRunTitle: End-to-end tests ($(Build.BuildNumber) $(System.JobDisplayName))
      buildPlatform: $(arch)
    # This task takes 15 min when behind a proxy, so disable it
    # see https://github.com/microsoft/azure-pipelines-tasks/issues/11831
    condition: and(succeededOrFailed(), not(variables['Agent.ProxyUrl']))

  - pwsh: |
      $logDir = '$(Build.ArtifactStagingDirectory)/logs'
      New-Item $logDir -ItemType Directory -Force | Out-Null
      Out-File "$logDir/$(Build.DefinitionName)-$(Build.BuildNumber)"
      Copy-Item "$(Build.SourcesDirectory)/TestResults" "$logDir/" -Recurse
      # The setup fixtures run outside the scope of any test, so their logs (*-[test|device]-*.log)
      # aren't included in the TRX. Copy them manually here.
      Copy-Item '$(binDir)/context.json' "$logDir/"
      Copy-Item "$(binDir)/*-test-*.log" "$logDir/"
      Copy-Item "$(binDir)/*-device-*.log" "$logDir/"
      Copy-Item "$(binDir)/testoutput.log" "$logDir/"
      Copy-Item "$(binDir)/supportbundle*" "$logDir/"
      $artifactSuffix = '$(Build.BuildNumber)-$(Agent.JobName)' -replace '[_\s]','-'
      Write-Output "##vso[task.setvariable variable=artifactSuffix]$artifactSuffix"
    displayName: Collect Logs
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: Publish logs
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/logs
      ArtifactName: logs-end-to-end-$(artifactSuffix)
    condition: always()
