trigger:
  batch: true
  branches:
    include:
      - master
pr: none
variables:
  test.filter: "Category=Integration&Category!=Stress"
  build.configuration: "Release"
jobs:
  - job: linux
    displayName: Linux
    timeoutInMinutes: 120
    pool:
      vmImage: ubuntu-16.04
    variables:
      testEnvironment: linux
      netCorePackageUri: https://download.microsoft.com/download/4/0/9/40920432-3302-47a8-b13c-bbc4848ad114/dotnet-sdk-2.1.302-linux-x64.tar.gz
    steps:
      - script: |
          sudo apt-get update
          sudo apt-get install -y libsnappy1v5
          exit 1
        displayName: Does ubuntu-16.04 image include libsnappy1v5?
      - script: scripts/linux/installPrereqs.sh -u $(NetCorePackageUri)
        name: install_dependencies
        displayName: Install dependencies
      - script: scripts/linux/installKvPrereqs_Ubuntu.sh
        name: install_test_dependencies
        displayName: 'Install test dependencies'
      - bash: |
          az login --service-principal --username $(kv.sp.user) --tenant $(kv.sp.tenant) --password $(kv.sp.password)
          scripts/linux/downloadAndInstallCert.sh -c IoTEdgeTestCert -v $(kv.name)
          scripts/linux/downloadAndInstallCert.sh -c IotHubMqttHeadCert -v $(kv.name) -s 'Root'
        name: install_certs
        displayName: 'Install test certificate'
      - script: scripts/linux/buildBranch.sh -c "$BUILD_CONFIGURATION" --no-rocksdb-bin
        name: build
        displayName: 'Build'
      - script: sudo -E bash -c './scripts/linux/runTests.sh "--filter $TEST_FILTER" "$BUILD_CONFIGURATION"'
        name: test
        displayName: Test
      - task: PublishTestResults@1
        displayName: 'Publish test results'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/TestResults/result.trx'
        condition: succeededOrFailed()
      - task: CopyFiles@2
        displayName: Copy cert files
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/publish
          contents: |
            CACertificates/openssl_root_ca.cnf
            CACertificates/certGen.sh
            IotEdgeQuickstart.linux-*.tar.gz
            LeafDevice.linux-*.tar.gz
            e2e_deployment_files/*
            e2e_test_files/*
            scripts/linux/runE2ETest.sh
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: e2e-linux
  - job: windows
    displayName: Windows
    timeoutInMinutes: 120
    pool:
      name: $(windows.pool.name)
      demands:
        - azureps
        - Run-CI -equals true
    variables:
      netCorePackageUri: https://download.microsoft.com/download/4/0/9/40920432-3302-47a8-b13c-bbc4848ad114/dotnet-sdk-2.1.302-win-x64.zip
      testEnvironment: windows
    steps:
      - task: AzurePowerShell@2
        displayName: 'Install test certificate'
        inputs:
          azureSubscription: "$(azure.subscription)"
          scriptPath: 'scripts/windows/setup/Install-VaultCertificate.ps1'
          scriptArguments: '-VaultName $(kv.name) -CertificateName IoTEdgeTestCert'
          azurePowerShellVersion: LatestVersion
      - powershell: scripts/windows/setup/Install-Prerequisites.ps1 -DotnetSdkUrl $(NetCorePackageUri)
        name: install_dependencies
        displayName: Install dependencies
      - powershell: scripts/windows/build/Publish-Branch.ps1 -Configuration:$env:BUILD_CONFIGURATION -UpdateVersion
        name: build
        displayName: Build
      - powershell: scripts/windows/test/Test-Branch.ps1 -Filter "$env:TEST_FILTER" -BuildConfig "$env:BUILD_CONFIGURATION"
        name: test
        displayName: Test
        env:
          TEST_FILTER: $(test.filter)
      - task: PublishTestResults@1
        name: publish_results
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testRunner: VSTest
          testResultsFiles: '**\TestResults\*.trx'
      - task: CopyFiles@2
        displayName: Copy cert files
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/publish
          contents: |
            CACertificates\openssl_root_ca.cnf
            CACertificates\ca-certs.ps1
            IotEdgeQuickstart.win10-*.zip
            LeafDevice.win10-*.zip
            e2e_deployment_files\*
            e2e_test_files\*
            scripts\windows\setup\IotEdgeSecurityDaemon.ps1
            scripts\windows\test\Run-E2ETest.ps1
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: e2e-windows
      - powershell: docker system prune -a -f
        name: clean_machine
        displayName: Clean machine
