trigger:
  batch: true
  branches:
    include:
      - master
pr: none
variables:
  test.filter: "Category=Integration&Category!=Stress"
  build.configuration: "Release"
jobs:
  - job: linux
    displayName: Linux
    condition: false
    timeoutInMinutes: 120
    pool:
      vmImage: ubuntu-16.04
    variables:
      testEnvironment: linux
      netCoreVersion: 2.1.302
    steps:
      - task: AzureKeyVault@1
        displayName: Get secrets
        inputs:
          azureSubscription: $(azure.subscription)
          keyVaultName: $(kv.name)
          secretsFilter: >-
            DummySecret1,
            EdgeCapableDevice2,
            EventHubConnStr2,
            IotDevice2ConnStr2,
            IotDevice3ConnStr2,
            IotHubConnStr2,
            IotHubMqttHeadCert
      - task: DotNetCoreInstaller@0
        displayName: Install .NET Core
        inputs:
          packageType: sdk
          version: $(netCoreVersion)
      - script: |
          sudo apt-get update
          sudo apt-get install -y libsnappy1v5
        displayName: Install libsnappy1v5 # Needed for rocksdb integration tests
      - pwsh: |
          $store = [System.Security.Cryptography.X509Certificates.X509Store]::new('Root', 'CurrentUser')
          $store.Open('ReadWrite')
          $bytes = [System.Convert]::FromBase64String($env:CERT_VALUE)
          $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($bytes)
          $store.Add($cert)
        displayName: Install protocol head certificate # Needed for integration tests
        env:
          CERT_VALUE: $(IotHubMqttHeadCert)
      - script: scripts/linux/buildBranch.sh -c "$BUILD_CONFIGURATION" --no-rocksdb-bin
        displayName: Build
      - script: sudo -E bash -c './scripts/linux/runTests.sh "--filter $TEST_FILTER" "$BUILD_CONFIGURATION"'
        displayName: Test
        env:
          DummySecret1: $(DummySecret1)
          EdgeCapableDevice2: $(EdgeCapableDevice2)
          EventHubConnStr2: $(EventHubConnStr2)
          IotDevice2ConnStr2: $(IotDevice2ConnStr2)
          IotDevice3ConnStr2: $(IotDevice3ConnStr2)
          IotHubConnStr2: $(IotHubConnStr2)
          IotHubMqttHeadCert: $(IotHubMqttHeadCert)
      - task: PublishTestResults@1
        displayName: Publish test results
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/TestResults/result.trx'
        condition: succeededOrFailed()
      - task: CopyFiles@2
        displayName: Stage artifacts
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/publish
          contents: |
            CACertificates/openssl_root_ca.cnf
            CACertificates/certGen.sh
            IotEdgeQuickstart.linux-*.tar.gz
            LeafDevice.linux-*.tar.gz
            e2e_deployment_files/*
            e2e_test_files/*
            scripts/linux/runE2ETest.sh
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: e2e-linux
  - job: windows
    displayName: Windows
    timeoutInMinutes: 120
    pool:
      name: $(windows.pool.name)
      demands:
        - azureps
        - Run-CI -equals true
    variables:
      testEnvironment: windows
      netCoreVersion: 2.1.302
    steps:
      # - task: AzureKeyVault@1
      #   displayName: Get secrets
      #   inputs:
      #     azureSubscription: $(azure.subscription)
      #     keyVaultName: $(kv.name)
      #     secretsFilter: >-
      #       DummySecret1,
      #       EdgeCapableDevice2,
      #       EventHubConnStr2,
      #       IotDevice2ConnStr2,
      #       IotDevice3ConnStr2,
      #       IotHubConnStr2,
      #       IotHubMqttHeadCert
      - task: DotNetCoreInstaller@0
        displayName: Install .NET Core
        inputs:
          packageType: sdk
          version: $(netCoreVersion)
      # - task: AzurePowerShell@2
      #   displayName: 'Install test certificate'
      #   inputs:
      #     azureSubscription: "$(azure.subscription)"
      #     scriptPath: 'scripts/windows/setup/Install-VaultCertificate.ps1'
      #     scriptArguments: '-VaultName $(kv.name) -CertificateName IoTEdgeTestCert'
      #     azurePowerShellVersion: LatestVersion
      # - powershell: scripts/windows/setup/Install-Prerequisites.ps1 -DotnetSdkUrl $(NetCorePackageUri)
      #   name: install_dependencies
      #   displayName: Install dependencies
      - powershell: scripts/windows/build/Publish-Branch.ps1 -Configuration:$env:BUILD_CONFIGURATION -UpdateVersion
        name: build
        displayName: Build
      - powershell: scripts/windows/test/Test-Branch.ps1 -Filter "$env:TEST_FILTER" -BuildConfig "$env:BUILD_CONFIGURATION"
        name: test
        displayName: Test
        env:
          TEST_FILTER: $(test.filter)
      - task: PublishTestResults@1
        name: publish_results
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testRunner: VSTest
          testResultsFiles: '**\TestResults\*.trx'
      - task: CopyFiles@2
        displayName: Copy cert files
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/publish
          contents: |
            CACertificates\openssl_root_ca.cnf
            CACertificates\ca-certs.ps1
            IotEdgeQuickstart.win10-*.zip
            LeafDevice.win10-*.zip
            e2e_deployment_files\*
            e2e_test_files\*
            scripts\windows\setup\IotEdgeSecurityDaemon.ps1
            scripts\windows\test\Run-E2ETest.ps1
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: e2e-windows
      - powershell: docker system prune -a -f
        name: clean_machine
        displayName: Clean machine
