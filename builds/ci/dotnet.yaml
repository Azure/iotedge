trigger:
  batch: true
  branches:
    include:
      - master
      - release/*
pr: none
variables:
  build.configuration: Release
  dotnet.version: 2.1.x
  test.filter: Category=Integration&Category!=Stress
jobs:
  - job: linux
    displayName: Linux
    timeoutInMinutes: 120
    pool:
      vmImage: ubuntu-16.04
    variables:
      testEnvironment: linux
    steps:
      - task: AzureKeyVault@1
        displayName: Get secrets
        inputs:
          azureSubscription: $(azure.subscription)
          keyVaultName: $(kv.name)
          secretsFilter: >-
            DummySecret1,
            EdgeCapableDevice2,
            EventHubConnStr2,
            IotDevice2ConnStr2,
            IotDevice3ConnStr2,
            IotHubConnStr2,
            IotHubMqttHeadCert
      - task: UseDotNet@2
        displayName: Install .NET Core sdk
        inputs:
          packageType: sdk
          version: $(dotnet.version)
      - script: |
          sudo apt-get update
          sudo apt-get install -y libsnappy1v5
        displayName: Install libsnappy1v5 # Needed for rocksdb integration tests
      - pwsh: |
          $store = [System.Security.Cryptography.X509Certificates.X509Store]::new('Root', 'CurrentUser')
          $store.Open('ReadWrite')
          $bytes = [System.Convert]::FromBase64String($env:CERT_VALUE)
          $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($bytes)
          $store.Add($cert)
        displayName: Install protocol head certificate # Needed for integration tests
        env:
          CERT_VALUE: $(IotHubMqttHeadCert)
      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
        displayName: Build
      - script: sudo -E bash -c './scripts/linux/runTests.sh "--filter $(test.filter)&Category!=Kubernetes" $(Build.Configuration)'
        displayName: Integration Tests
        env:
          DummySecret1: $(DummySecret1)
          EdgeCapableDevice2: $(EdgeCapableDevice2)
          EventHubConnStr2: $(EventHubConnStr2)
          IotDevice2ConnStr2: $(IotDevice2ConnStr2)
          IotDevice3ConnStr2: $(IotDevice3ConnStr2)
          IotHubConnStr2: $(IotHubConnStr2)
          IotHubMqttHeadCert: $(IotHubMqttHeadCert)
#      - script: |
#          # download kind binary and make it executable
#          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.5.1/kind-$(uname)-amd64
#          chmod +x ./kind
#          # move it to $AGENT_TOOLSDIRECTORY\kind
#          mkdir $AGENT_TOOLSDIRECTORY/kind 
#          mv ./kind $AGENT_TOOLSDIRECTORY/kind/kind
#          # make kind to be available for integration tests 
#          echo "##vso[task.setvariable variable=PATH;]$AGENT_TOOLSDIRECTORY/kind:$PATH"
#        displayName: Install Kubernetes cluster manager (kind)
#        condition: succeededOrFailed()
#      - script: |
#          kind create cluster --name "edgy" --wait 5m
#          KUBECONFIG=$(kind get kubeconfig-path --name "edgy")
#          echo "##vso[task.setvariable variable=KUBECONFIG;]$KUBECONFIG"
#          echo "##vso[task.setvariable variable=USE_EXISTING_KUBERNETES_CLUSTER;]true"
#        displayName: Create Kubernetes cluster (edgy)
#        condition: succeededOrFailed()
#      - script: |
#          sudo -E bash -c './scripts/linux/runTests.sh "--filter $(test.filter)&Category=Kubernetes" $(Build.Configuration)'
#        displayName: Kubernetes Integration Tests
#        condition: succeededOrFailed()
      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/TestResults/*.trx'
        condition: succeededOrFailed()
  - job: windows
    displayName: Windows
    timeoutInMinutes: 120
    pool:
      vmImage: windows-2019
    variables:
      testEnvironment: windows
    steps:
      - task: AzureKeyVault@1
        displayName: Get secrets
        inputs:
          azureSubscription: $(azure.subscription)
          keyVaultName: $(kv.name)
          secretsFilter: >-
            DummySecret1,
            EdgeCapableDevice2,
            EventHubConnStr2,
            IotDevice2ConnStr2,
            IotDevice3ConnStr2,
            IotHubConnStr2,
            IotHubMqttHeadCert
      - task: UseDotNet@2
        displayName: Install .NET Core sdk
        inputs:
          packageType: sdk
          version: $(dotnet.version)
      - powershell: scripts/windows/build/Publish-Branch.ps1 -Configuration $(Build.Configuration) -UpdateVersion
        displayName: Build
      - powershell: scripts/windows/test/Test-Branch.ps1 -Filter "$(test.filter)&Category!=Kubernetes" -BuildConfig $(Build.Configuration)
        displayName: Test
        env:
          DummySecret1: $(DummySecret1)
          EdgeCapableDevice2: $(EdgeCapableDevice2)
          EventHubConnStr2: $(EventHubConnStr2)
          IotDevice2ConnStr2: $(IotDevice2ConnStr2)
          IotDevice3ConnStr2: $(IotDevice3ConnStr2)
          IotHubConnStr2: $(IotHubConnStr2)
          IotHubMqttHeadCert: $(IotHubMqttHeadCert)
      - task: PublishTestResults@2
        displayName: Publish test results
        condition: succeededOrFailed()
        inputs:
          testRunner: VSTest
          testResultsFiles: '**\TestResults\*.trx'
