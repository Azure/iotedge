trigger:
  batch: true
  branches:
    include:
      - master
pr: none
jobs:

################################################################################
  - job: linux_amd64
################################################################################
    displayName: Linux amd64
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
          echo "##vso[task.setvariable variable=CARGO_INCREMENTAL;]0"
          echo "##vso[task.setvariable variable=RUSTFLAGS;]-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
          echo "##vso[task.setvariable variable=IOTEDGE_HOMEDIR;]/tmp"
        displayName: Set env variables
      - script: edgelet/build/linux/install.sh -t nightly
        displayName: Install Rust
      - script: |
          curl -L https://github.com/mozilla/grcov/releases/download/v0.4.1/grcov-linux-x86_64.tar.bz2 | tar jxf -
          curl -L https://raw.github.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py > lcov_cobertura.py
          sudo apt-get install lcov
        workingDirectory: edgelet
        displayName: Install code coverage tools
      - script: cargo +nightly build --verbose
        displayName: Build
        workingDirectory: edgelet
      - script: cargo +nightly test --verbose
        displayName: Test
        workingDirectory: edgelet
      - script: |
          zip -0 ccov.zip `find ./target \( -name "*.gc*" \) -print`
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "/*" > target/lcov.info
          python lcov_cobertura.py target/lcov.info --output target/coverage.xml --demangle
          genhtml -o target/report/ --show-details --highlight --ignore-errors source --legend target/lcov.info
        displayName: Assemble code coverage results
        workingDirectory: edgelet
      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage results
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: "edgelet/target/coverage.xml"
          reportDirectory: "edgelet/target/report"
          pathToSources: "$(System.DefaultWorkingDirectory)/edgelet"

################################################################################
  - job: linux_arm32v7
################################################################################
    displayName: Linux arm32v7
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          echo "##vso[task.setvariable variable=RUSTUP_HOME;]$VSTS_WORK/rustup"
          echo "##vso[task.setvariable variable=CARGO_HOME;]$VSTS_WORK/cargo"
          echo "##vso[task.setvariable variable=PATH;]$VSTS_WORK/cargo/bin:$PATH"
        displayName: Modify path
      - task: Bash@3
        displayName: Install Rust
        inputs:
          filePath: edgelet/build/linux/install.sh
      - script: cargo install --git https://github.com/arsing/cross.git --branch set-path
        displayName: Install cross (fork with docker fix)
      - task: Bash@3
        displayName: armv7-unknown-linux-gnueabihf build
        inputs:
          filePath: edgelet/build/linux/cross.sh
          arguments: --toolchain armv7-unknown-linux-gnueabihf --release true
      - task: Bash@3
        displayName: armv7-unknown-linux-gnueabihf test
        inputs:
          filePath: edgelet/build/linux/cross-test.sh
          arguments: --toolchain armv7-unknown-linux-gnueabihf --release true

################################################################################
  - job: windows_amd64
################################################################################
    displayName: Windows amd64
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - powershell: Write-Host ("##vso[task.setvariable variable=NO_VALGRIND;]true")
        displayName: Set env variables
      - task: PowerShell@2
        displayName: Install Rust
        inputs:
          filePath: edgelet/build/windows/install.ps1
      - task: PowerShell@2
        displayName: Clippy
        inputs:
          filePath: edgelet/build/windows/clippy.ps1
      - task: PowerShell@2
        displayName: Build
        inputs:
          filePath: edgelet/build/windows/build.ps1
      - task: PowerShell@2
        displayName: Test
        inputs:
          filePath: edgelet/build/windows/test.ps1

################################################################################
  - job: style_check
################################################################################
    displayName: Style Check
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
        displayName: Set env variables
      - task: Bash@3
        displayName: Install Rust
        inputs:
          filePath: edgelet/build/linux/install.sh
      - task: Bash@3
        displayName: Format Code
        inputs:
          filePath: edgelet/build/linux/format.sh
      - task: Bash@3
        displayName: Clippy
        inputs:
          filePath: edgelet/build/linux/clippy.sh
