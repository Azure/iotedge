trigger:
  batch: true
  branches:
    include:
      - master
      - iiot
      - preview/iiot
pr: none
jobs:

################################################################################
  - job: linux
################################################################################
    displayName: Linux
    pool:
      vmImage: 'ubuntu-18.04'
    strategy:
      matrix:
        Centos75-amd64:
          arch: amd64
          os: centos7
          target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
        Debian9-amd64:
          os: debian9
          arch: amd64
          target.iotedged: edgelet/target/release
        Debian9-arm32v7:
          os: debian9
          arch: arm32v7
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Debian9-aarch64:
          os: debian9
          arch: aarch64
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

        Debian10-amd64:
          os: debian10
          arch: amd64
          target.iotedged: edgelet/target/release
        Debian10-arm32v7:
          os: debian10
          arch: arm32v7
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Debian10-aarch64:
          os: debian10
          arch: aarch64
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
          
        Ubuntu1804-amd64:
          os: ubuntu18.04
          arch: amd64
          target.iotedged: edgelet/target/release
        Ubuntu1804-arm32v7:
          os: ubuntu18.04
          arch: arm32v7
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Ubuntu1804-aarch64:
          os: ubuntu18.04
          arch: aarch64
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
        Ubuntu2004-amd64:
          arch: amd64
          os: ubuntu20.04
          target.iotedged: edgelet/target/release
        Ubuntu2004-arm32v7:
          arch: arm32v7
          os: ubuntu20.04
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Ubuntu2004-aarch64:
          arch: aarch64
          os: ubuntu20.04
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
    steps:
      - bash: |
          BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
          VERSION="$BASE_VERSION$BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=VERSION;]$VERSION"

          echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
          echo "##vso[task.setvariable variable=PACKAGE_OS;]$(os)"
        displayName: Set Version
      - script: edgelet/build/linux/package.sh
        displayName: Create iotedged packages
      - task: CopyFiles@2
        displayName: Copy iotedged Files to Artifact Staging
        inputs:
          SourceFolder: $(target.iotedged)
          Contents: |
            *.deb
            *.rpm
          TargetFolder: '$(build.artifactstagingdirectory)'
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: 'iotedged-$(os)-$(arch)'
        condition: succeededOrFailed()

################################################################################
  - job: mariner_linux
################################################################################
    displayName: Linux
    pool:
      vmImage: 'ubuntu-18.04'
    strategy:
      matrix:
        CBL-Mariner1.0-amd64:
          arch: amd64
          os: mariner
          release: tags/1.0-stable
          target.iotedged: builds/mariner/out/RPMS/x86_64/
    steps:
      - bash: |
          BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
          VERSION="$BASE_VERSION$BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=VERSION;]$VERSION"

          echo "PACKAGE_ARCH=$(arch)"
          echo "PACKAGE_OS=$(os)"
          echo "##vso[task.setvariable variable=MARINER_RELEASE;]$(release)"
        displayName: Set Version
      - task: AzureKeyVault@1
        displayName: Get secrets
        inputs:
          azureSubscription: $(az.subscription)
          keyVaultName: $(kv.name)
          secretsFilter: >-
            marineriotedge-key
      - task: AzureCLI@2
        displayName: Download from Azure Blob Storage
        inputs:
          azureSubscription: $(az.subscription)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az --version
            mkdir -p "builds/mariner/SPECS/rust/SOURCES/"
            az storage blob download --account-name "marineriotedge" --container-name "iotedge-build-pipeline" --file "builds/mariner/SPECS/rust/SOURCES/rust-1.44.1-x86_64-unknown-linux-gnu.tar.gz" --name "rust-1.44.1-x86_64-unknown-linux-gnu.tar.gz" --account-key "$(marineriotedge-key)"
            az storage blob download --account-name "marineriotedge" --container-name "iotedge-build-pipeline" --file "edgelet/azure-iotedge-cargo-vendor.zip" --name "azure-iotedge-cargo-vendor.zip" --account-key "$(marineriotedge-key)"
      - script: edgelet/build/linux/package-mariner.sh
        displayName: Create libiothsm and iotedged packages
      - task: CopyFiles@2
        displayName: Copy iotedged and libiothsm build logs to artifact staging
        inputs:
          SourceFolder: builds/mariner/build/logs/pkggen/rpmbuilding/
          Contents: |
            **/*.rpm.log
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()
      - task: CopyFiles@2
        displayName: Copy iotedged and libiothsm Files to Artifact Staging
        inputs:
          SourceFolder: $(target.iotedged)
          Contents: |
            *.rpm
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: 'iotedged-$(os)-$(arch)'
        condition: succeededOrFailed()