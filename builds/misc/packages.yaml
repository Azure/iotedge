trigger:
  batch: true
  branches:
    include:
      - master
pr: none
variables:
  REVISION: '1'
jobs:

################################################################################
  - job: windows_amd64
################################################################################
    displayName: Windows amd64
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - powershell: |
          $base_version = Get-Content -Path "$(Build.SourcesDirectory)\edgelet\version.txt"
          $version = ("{0}{1}" -f $base_version, $(Build.BuildNumber))
          Write-Host ("##vso[task.setvariable variable=VERSION;]$version")
          Write-Host "Setting VERSION: '$version'"
          $path = "$env:PATH;C:\Program Files (x86)\Windows Kits\10\bin\x64;C:\Program Files (x86)\Windows Kits\10\tools\bin\i386"
          Write-Host ("##vso[task.setvariable variable=PATH;]$path")
          Write-Host "Setting PATH: '$path'"
          $signtool_oem_sign='/a /s my /i "Windows OEM Intermediate 2017 (TEST ONLY)" /n "Windows OEM Test Cert 2017 (TEST ONLY)" /fd SHA256'
          Write-Host ("##vso[task.setvariable variable=SIGNTOOL_OEM_SIGN;]$signtool_oem_sign")
          Write-Host ("##vso[task.setvariable variable=SIGN_MODE;]Test")
          Write-Host ("##vso[task.setvariable variable=SIGN_OEM;]1")
          Write-Host ("##vso[task.setvariable variable=SIGN_WITH_TIMESTAMP;]0")
          Write-Host ("##vso[task.setvariable variable=WSKCONTENTROOT;]C:\Program Files (x86)\Windows Kits\10")
          Write-Host ("##vso[task.setvariable variable=NO_VALGRIND;]true")
        displayName: Set Version
      - powershell: cmd /c installoemcerts.cmd
        displayName: Install OEM certificates
      - powershell: edgelet/build/windows/install.ps1
        displayName: Install Rust
      - powershell: edgelet/build/windows/build.ps1 -Release
        displayName: Build
      - task: CMake@1
        displayName: 'Setup libiothsm'
        inputs:
          workingDirectory: 'edgelet/hsm-sys/azure-iot-hsm-c/build'
          cmakeArgs: '-G "Visual Studio 15 2017 Win64" -DBUILD_SHARED=ON -Duse_emulator=OFF ..'
      - task: CMake@1
        displayName: 'Build libiothsm'
        inputs:
          workingDirectory: 'edgelet/hsm-sys/azure-iot-hsm-c/build'
          cmakeArgs: '--build . --config Release'
      - powershell: edgelet/build/windows/package.ps1
        displayName: Package iotedged, iotedge, libiothsm and docker/dockerd
      - task: CopyFiles@2
        displayName: 'Copy iotedged to Artifact Staging'
        inputs:
          SourceFolder: edgelet/target/release
          Contents: |
            *.exe
            *.pdb
            *.dll
          TargetFolder: '$(build.artifactstagingdirectory)'
      - task: CopyFiles@2
        displayName: 'Copy libiothsm to Artifact Staging'
        inputs:
          SourceFolder: 'edgelet/hsm-sys/azure-iot-hsm-c/build/Release'
          Contents: |
            *.dll
            *.pdb
          TargetFolder: '$(build.artifactstagingdirectory)'
      - task: CopyFiles@2
        displayName: 'Copy legal docs to Artifact Staging'
        inputs:
          SourceFolder: edgelet/contrib/docs
          TargetFolder: '$(build.artifactstagingdirectory)/LICENSE'
      - task: CopyFiles@2
        displayName: 'Copy config to Artifact Staging'
        inputs:
          SourceFolder: edgelet/contrib/config/windows
          TargetFolder: '$(build.artifactstagingdirectory)'
      - task: CopyFiles@2
        displayName: 'Copy package to Artifact Staging'
        inputs:
          SourceFolder: .
          Contents: |
            *.cab
          TargetFolder: '$(build.artifactstagingdirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: iotedged-windows'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: 'iotedged-windows'
