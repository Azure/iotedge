#Your build pipeline references a secret variable named ‘build.registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘configuration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘configuration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘configuration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
jobs:
################################################################################
  - job: linux_dotnet_projects
################################################################################
    DisplayName: LinuxDotnet
    pool:
      name: Hosted Ubuntu 1604
    variables:
      build.registry.address: 'edgebuilds.azurecr.io'
      build.registry.user: 'EdgeBuilds'
      registry.address: 'edgerelease.azurecr.io'
      registry.user: 'EdgeRelease'

    steps:
    - bash: |
      docker login '$(build.registry.address)' --username '$(build.registry.user)' --password '$(build.registry.password)'
      docker login '$(registry.address)' --username '$(registry.user)' --password '$(registry.password)'
      displayName: 'Docker Login'

    - task: Bash@3
      displayName: 'Install Rust'
      inputs:
        targetType: filePath
        filePath: ./edgelet/build/linux/install.sh
        arguments: '--package-arm'

    - bash: 'echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"'
      displayName: 'Modify path'

    - task: DotNetCoreInstaller@0
      displayName: 'Install .NET Core - 3.1.3'
      inputs:
        version: 3.1.201

    - task: ShellScript@2
      displayName: 'Install build prerequisites'
      inputs:
        scriptPath: scripts/linux/installPrereqs.sh

    - bash: 'cargo install --git https://github.com/arsing/cross.git --branch set-path'
      displayName: 'Install cross (fork with docker fix)'

    - task: ShellScript@2
      displayName: 'Build Azure-IoT-Edge-Core'
      inputs:
        scriptPath: scripts/linux/buildBranch.sh
        args: '-c Release'

    - task: DotNetCoreInstaller@0
      displayName: 'Install .NET Core 2.1'
      inputs:
        version: 2.1.700

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Edge Agent Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)/publish/Microsoft.Azure.Devices.Edge.Agent.Service'
        Pattern: 'Microsoft.Azure.Devices.Edge.*.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Edge Hub Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)/publish/Microsoft.Azure.Devices.Edge.Hub.Service'
        Pattern: 'Microsoft.Azure.Devices.Edge.*.dll,Microsoft.Azure.Devices.Routing.*.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Temp Sensor Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)/publish/SimulatedTemperatureSensor'
        Pattern: 'Microsoft.Azure.Devices.Edge.*.dll,SimulatedTemperatureSensor.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Functions Binding Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)/publish/Microsoft.Azure.WebJobs.Extensions.EdgeHub'
        Pattern: 'Microsoft.Azure.WebJobs.Extensions*.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: DotNetCoreInstaller@0
      displayName: 'Install .NET Core - 3.1.3'
      inputs:
        version: 3.1.201

    - task: DotNetCoreCLI@2
      displayName: 'Functions Binding nuget package'
      inputs:
        command: pack
        packagesToPack: '**/Microsoft.Azure.WebJobs.Extensions.EdgeHub.csproj'
        packDirectory: '$(Build.BinariesDirectory)/publish/'
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: version
        buildProperties: 'OutDir=$(Build.BinariesDirectory)/publish/Microsoft.Azure.WebJobs.Extensions.EdgeHub'

    - task: DotNetCoreInstaller@0
      displayName: 'Install .NET Core 2.1'
      inputs:
        version: 2.1.700

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Functions Binding nuget package Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)/publish'
        Pattern: 'Microsoft.Azure.WebJobs.Extensions*.nupkg'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-401405",
                "operationSetCode": "NuGetSign",
                "parameters": [],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-401405",
                "operationSetCode": "NuGetVerify",
                "parameters": [],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]

    - task: Bash@3
      displayName: 'Build iotedge-diagnostics'
      inputs:
        targetType: filePath
        filePath: ./scripts/linux/buildEdgelet.sh
        arguments: '-i azureiotedge-diagnostics -n microsoft -P iotedge-diagnostics -c $(Build.Configuration)'

    - bash: |
      scripts/linux/buildEdgelet.sh -i azureiotedge-diagnostics -n microsoft -P iotedge-diagnostics -c $(configuration) &&
      scripts/linux/buildImage.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(version) -i azureiotedge-diagnostics -n $(namespace) -P azureiotedge-diagnostics
      displayName: 'Build Image - azureiotedge-diagnostics - amd64'

    - bash: |
      scripts/linux/buildEdgelet.sh -i azureiotedge-diagnostics -n microsoft -P iotedge-diagnostics -c $(configuration) --target-arch armv7l &&
      scripts/linux/buildImage.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(version) -i azureiotedge-diagnostics -n $(namespace) -P azureiotedge-diagnostics --target-arch armv7l
      displayName: 'Build Image - azureiotedge-diagnostics - ARM32'

    - bash: |
      scripts/linux/buildEdgelet.sh -i azureiotedge-diagnostics -n microsoft -P iotedge-diagnostics -c $(configuration) --target-arch aarch64 &&
      scripts/linux/buildImage.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(version) -i azureiotedge-diagnostics -n $(namespace) -P azureiotedge-diagnostics --target-arch aarch64
      displayName: 'Build Image - azureiotedge-diagnostics - ARM64'

    # Edge Agent
    - template: templates/image-linux.yaml
      parameters:
        name: Edge Agent
        imageName: azureiotedge-agent
        project: Microsoft.Azure.Devices.Edge.Agent.Service

    # Edge Hub
    - template: templates/image-linux.yaml
      parameters:
        name: Edge Hub
        imageName: azureiotedge-hub
        project: Microsoft.Azure.Devices.Edge.Hub.Service

    # Simulated Temperature Sensor
    - template: templates/image-linux.yaml
      parameters:
        name: Temperature Sensor
        imageName: azureiotedge-simulated-temperature-sensor
        project: SimulatedTemperatureSensor

#Your build pipeline references a secret variable named ‘build.registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘registry.password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘version’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
################################################################################
  - job: windows
################################################################################
    displayName: Windows
    pool:
    name: Azure-IoT-Edge-Core
    demands:
    - Build-Image -equals true
    - win-rs5
    - DotNetFramework

    variables:
      build.registry.address: 'edgebuilds.azurecr.io'
      build.registry.user: 'EdgeBuilds'
      registry.address: 'edgerelease.azurecr.io'
      registry.user: 'EdgeRelease'

    steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Install .NET Core - 3.1.3'
      inputs:
        version: 3.1.201

    - powershell: scripts/windows/build/Publish-Branch.ps1 -Configuration:"$(Build.Configuration)" -PublishTests:$False -UpdateVersion
      name: build
      displayName: Build ($(Build.Configuration))

    - script: |
      docker login $(build.registry.address) -u $(build.registry.user) -p $(build.registry.password)
      docker login $(registry.address) -u $(registry.user) -p $(registry.password)
      displayName: 'docker login'

    - task: PowerShell@2
      displayName: 'Build iotedge-diagnostics'
      inputs:
        targetType: filePath
        filePath: './edgelet/build/windows/build-diagnostics.ps1'

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'azureiotedge-diagnostics Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)\publish\azureiotedge-diagnostics'
        Pattern: 'iotedge-diagnostics.exe'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Edge Agent Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)\publish\Microsoft.Azure.Devices.Edge.Agent.Service'
        Pattern: 'Microsoft.Azure.Devices.Edge.*.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Edge Hub Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)\publish\Microsoft.Azure.Devices.Edge.Hub.Service'
        Pattern: 'Microsoft.Azure.Devices.Edge.*.dll,Microsoft.Azure.Devices.Routing.*.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
      displayName: 'Temp Sensor Code Sign'
      inputs:
        ConnectedServiceName: 'Azure IoT Edge Code Sign 2'
        FolderPath: '$(Build.BinariesDirectory)\publish\SimulatedTemperatureSensor'
        Pattern: 'Microsoft.Azure.Devices.Edge.*.dll,SimulatedTemperatureSensor.dll'
        signConfigType: inlineSignParams
        inlineOperation: |
        [
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                    "parameterName": "OpusName",
                    "parameterValue": "Microsoft"
                },
                {
                    "parameterName": "OpusInfo",
                    "parameterValue": "http://www.microsoft.com"
                },
                {
                    "parameterName": "Append",
                    "parameterValue": "/as"
                },
                {
                    "parameterName": "FileDigest",
                    "parameterValue": "/fd \"SHA256\""
                },
                {
                    "parameterName": "PageHash",
                    "parameterValue": "/NPH"
                },
                {
                    "parameterName": "TimeStamp",
                    "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                    "parameterName": "VerifyAll",
                    "parameterValue": "/all"
                }
                ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
        SessionTimeout: 20

    - task: PowerShell@2
      displayName: 'Build Image - Edge Agent - amd64'
      inputs:
        targetType: filePath
        filePath: './scripts/windows/build/Publish-DockerImage.ps1'
        arguments: '-Name ''azureiotedge-agent'' -Project ''Microsoft.Azure.Devices.Edge.Agent.Service'' -Version ''$(version)'' -Registry ''$(registry.address)'' -Namespace ''$(namespace)'' -Push'

    - task: PowerShell@2
      displayName: 'Build Image - Edge Hub - amd64'
      inputs:
        targetType: filePath
        filePath: './scripts/windows/build/Publish-DockerImage.ps1'
        arguments: '-Name ''azureiotedge-hub'' -Project ''Microsoft.Azure.Devices.Edge.Hub.Service'' -Version ''$(version)'' -Registry ''$(registry.address)'' -Namespace ''$(namespace)'' -Push'

    - task: PowerShell@2
      displayName: 'Build Image - Temp Sensor - amd64'
      inputs:
        targetType: filePath
        filePath: './scripts/windows/build/Publish-DockerImage.ps1'
        arguments: '-Name ''azureiotedge-simulated-temperature-sensor'' -Project ''SimulatedTemperatureSensor'' -Version ''$(version)'' -Registry ''$(registry.address)'' -Namespace ''$(namespace)'' -Push'

    - task: PowerShell@2
      displayName: 'Build Image - azureiotedge-diagnostics - amd64'
      inputs:
        targetType: filePath
        filePath: './scripts/windows/build/Publish-DockerImage.ps1'
        arguments: '-Name ''azureiotedge-diagnostics'' -Project ''azureiotedge-diagnostics'' -Version ''$(version)'' -Registry ''$(registry.address)'' -Namespace ''$(namespace)'' -Push'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts to VSTS'
      inputs:
        PathtoPublish: '$(Build.BinariesDirectory)\publish'
        ArtifactName: 'publish-win'

