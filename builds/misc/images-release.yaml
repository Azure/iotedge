name: $(version)

stages: 
################################################################################
  - stage: BuildExecutables
################################################################################
    displayName: Build Executables
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: []
    jobs:
    - job: BuildDotnetComponents
      # The code sign steps will fail unless we explicitly say to use dotnet 2 before.
      # This means we have to toggle back and forth between primary dotnet installations for the sign and build.
      # TODO: Investigate why we have to toggle primary installs on linux, when we didn't have to do this on windows (now removed).
      displayName: Build Dotnet Components
      steps: 
        - template: ../templates/dotnet3-globaljson.yaml # use dotnet 3 as primary install for build
        # Build
        - task: ShellScript@2
          displayName: "Build (Release) dotnet artifacts"
          inputs: 
            args: "-c Release"
            scriptPath: scripts/linux/buildBranch.sh
        # Code Sign
        - template: ../templates/dotnet2-globaljson.yaml # switch to dotnet 2 as primary install for code sign
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: "Edge Agent Code Sign"
          inputs: 
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: $(Build.BinariesDirectory)/publish/Microsoft.Azure.Devices.Edge.Agent.Service
            Pattern: Microsoft.Azure.Devices.Edge.*.dll
            SessionTimeout: 20
            inlineOperation: |
                [
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolSign",
                      "parameters": [
                      {
                          "parameterName": "OpusName",
                          "parameterValue": "Microsoft"
                      },
                      {
                          "parameterName": "OpusInfo",
                          "parameterValue": "http://www.microsoft.com"
                      },
                      {
                          "parameterName": "Append",
                          "parameterValue": "/as"
                      },
                      {
                          "parameterName": "FileDigest",
                          "parameterValue": "/fd \"SHA256\""
                      },
                      {
                          "parameterName": "PageHash",
                          "parameterValue": "/NPH"
                      },
                      {
                          "parameterName": "TimeStamp",
                          "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolVerify",
                      "parameters": [
                      {
                          "parameterName": "VerifyAll",
                          "parameterValue": "/all"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
                ]
            signConfigType: inlineSignParams
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: "Edge Hub Code Sign"
          inputs: 
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: $(Build.BinariesDirectory)/publish/Microsoft.Azure.Devices.Edge.Hub.Service
            Pattern: "Microsoft.Azure.Devices.Edge.*.dll,Microsoft.Azure.Devices.Routing.*.dll"
            SessionTimeout: 20
            inlineOperation: |
                [
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolSign",
                      "parameters": [
                      {
                          "parameterName": "OpusName",
                          "parameterValue": "Microsoft"
                      },
                      {
                          "parameterName": "OpusInfo",
                          "parameterValue": "http://www.microsoft.com"
                      },
                      {
                          "parameterName": "Append",
                          "parameterValue": "/as"
                      },
                      {
                          "parameterName": "FileDigest",
                          "parameterValue": "/fd \"SHA256\""
                      },
                      {
                          "parameterName": "PageHash",
                          "parameterValue": "/NPH"
                      },
                      {
                          "parameterName": "TimeStamp",
                          "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolVerify",
                      "parameters": [
                      {
                          "parameterName": "VerifyAll",
                          "parameterValue": "/all"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
                ]
            signConfigType: inlineSignParams
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: "Temp Sensor Code Sign"
          inputs: 
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: $(Build.BinariesDirectory)/publish/SimulatedTemperatureSensor
            Pattern: "Microsoft.Azure.Devices.Edge.*.dll,SimulatedTemperatureSensor.dll"
            SessionTimeout: 20
            inlineOperation: |
                [
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolSign",
                      "parameters": [
                      {
                          "parameterName": "OpusName",
                          "parameterValue": "Microsoft"
                      },
                      {
                          "parameterName": "OpusInfo",
                          "parameterValue": "http://www.microsoft.com"
                      },
                      {
                          "parameterName": "Append",
                          "parameterValue": "/as"
                      },
                      {
                          "parameterName": "FileDigest",
                          "parameterValue": "/fd \"SHA256\""
                      },
                      {
                          "parameterName": "PageHash",
                          "parameterValue": "/NPH"
                      },
                      {
                          "parameterName": "TimeStamp",
                          "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolVerify",
                      "parameters": [
                      {
                          "parameterName": "VerifyAll",
                          "parameterValue": "/all"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
                ]
            signConfigType: inlineSignParams
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: "Functions Binding Code Sign"
          inputs: 
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: $(Build.BinariesDirectory)/publish/Microsoft.Azure.WebJobs.Extensions.EdgeHub
            Pattern: Microsoft.Azure.WebJobs.Extensions*.dll
            SessionTimeout: 20
            inlineOperation: |
                [
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolSign",
                      "parameters": [
                      {
                          "parameterName": "OpusName",
                          "parameterValue": "Microsoft"
                      },
                      {
                          "parameterName": "OpusInfo",
                          "parameterValue": "http://www.microsoft.com"
                      },
                      {
                          "parameterName": "Append",
                          "parameterValue": "/as"
                      },
                      {
                          "parameterName": "FileDigest",
                          "parameterValue": "/fd \"SHA256\""
                      },
                      {
                          "parameterName": "PageHash",
                          "parameterValue": "/NPH"
                      },
                      {
                          "parameterName": "TimeStamp",
                          "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-230012",
                      "operationSetCode": "SigntoolVerify",
                      "parameters": [
                      {
                          "parameterName": "VerifyAll",
                          "parameterValue": "/all"
                      }
                      ],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
                ]
            signConfigType: inlineSignParams
        - template: ../templates/dotnet3-globaljson.yaml # switch to dotnet 3 as primary install for nuget package
        - task: DotNetCoreCLI@2
          displayName: "Functions Binding nuget package"
          inputs:
            buildProperties: OutDir=$(Build.BinariesDirectory)/publish/Microsoft.Azure.WebJobs.Extensions.EdgeHub
            command: pack
            nobuild: true
            packDirectory: $(Build.BinariesDirectory)/publish/
            packagesToPack: "**/Microsoft.Azure.WebJobs.Extensions.EdgeHub.csproj"
            versionEnvVar: version
            versioningScheme: byEnvVar
        - template: ../templates/dotnet2-globaljson.yaml # switch to dotnet 2 as primary install for code sign
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: "Functions Binding nuget package Sign"
          inputs:
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: $(Build.BinariesDirectory)/publish
            Pattern: Microsoft.Azure.WebJobs.Extensions*.nupkg
            inlineOperation: |
                [
                  {
                      "keyCode": "CP-401405",
                      "operationSetCode": "NuGetSign",
                      "parameters": [],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  },
                  {
                      "keyCode": "CP-401405",
                      "operationSetCode": "NuGetVerify",
                      "parameters": [],
                      "toolName": "sign",
                      "toolVersion": "1.0"
                  }
                ]
            signConfigType: inlineSignParams
        - bash: |
            mkdir $(Build.ArtifactStagingDirectory)/publish-linux && \
            mv $(Build.BinariesDirectory)/publish/{CACertificates,e2e_deployment_files,e2e_test_files,\
            scripts,IotEdgeQuickstart*,LeafDevice*,*.nupkg} $(Build.ArtifactStagingDirectory)/publish-linux
          displayName: Move/stage test file artifacts
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts to VSTS'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish-linux'
            artifactName: 'publish-linux'
        - task: PublishBuildArtifacts@1
          displayName: Publish Dotnet Artifacts
          inputs:
            PathtoPublish: '$(Build.BinariesDirectory)/publish'
            artifactName: 'dotnet_artifacts'
            StoreAsTar: true   

    - template: templates/build-broker-watchdog.yaml

# This stage builds Rocks DB and adds the files to staging directory
################################################################################
  - template: templates/build-rocksdb.yaml
################################################################################

# This stage first downloads the dotnet and rust artifacts from the previous stage, then
# copies the mqtt and watchdog artifacts into the appropriate directories 
# required by consolidate-build-artifacts.sh. It then runs consolidate-build-artifacts.sh,
# which moves the EH dockerfile, edge-hub executable, watchdog executable, and mqttd
# executable into the appropriate directories for later building the edge-hub image in the 
# 'Build Images' stage of this pipeline.  Finally, this stage consolidates the aforementioned
# EH artifacts with the other dotnet artifacts and publishes them all in an artifact named
# 'consolidated_artifacts'.      
################################################################################
  - stage: ConsolidateAndPubishArtifacts
################################################################################
    displayName: Consolidate And Publish Artifacts
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker  
    dependsOn: [BuildExecutables, BuildRocksDB]
    jobs:
    - job: ConsolidateAndPublishArtifacts
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download Artifacts
        inputs:
          buildType: 'current'
          downloadPath: '$(Build.ArtifactStagingDirectory)'
          downloadType: specific
          extractTars: true

      - task: CopyFiles@2
        displayName: Copy mqttd (amd64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/mqttd_amd64'
          contents: 'mqttd'
          targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/x86_64-unknown-linux-musl/release'   

      - task: CopyFiles@2
        displayName: Copy mqttd (arm32)    
        inputs:  
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/mqttd_arm32'        
          contents: 'mqttd'
          targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/armv7-unknown-linux-gnueabihf/release'

      - task: CopyFiles@2
        displayName: Copy mqttd (arm64)    
        inputs:    
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/mqttd_arm64'              
          contents: 'mqttd'
          targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/aarch64-unknown-linux-gnu/release'

      - task: CopyFiles@2
        displayName: Copy watchdog (amd64)    
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/watchdog_amd64'              
          contents: 'watchdog'
          targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/x86_64-unknown-linux-musl/release'

      - task: CopyFiles@2
        displayName: Copy watchdog (arm32)    
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/watchdog_arm32'              
          contents: 'watchdog'
          targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/armv7-unknown-linux-gnueabihf/release'

      - task: CopyFiles@2
        displayName: Copy watchdog (arm64)    
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/watchdog_arm64'              
          contents: 'watchdog'
          targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/aarch64-unknown-linux-gnu/release'                             
      - script: scripts/linux/consolidate-build-artifacts.sh --dotnet-artifacts-source-dir '$(Agent.TempDirectory)/extracted_tars/dotnet_artifacts' --rust-artifacts-source-dir '$(Build.ArtifactStagingDirectory)' --dest-dir '$(Build.BinariesDirectory)/publish' --artifact-name 'edge-hub'
        displayName: Consolidate Edge Hub Artifacts

      # TODO: Consider moving the following copies into consolidate-build-artifacts.sh
      - task: CopyFiles@2
        displayName: Copy/Stage dotnet artifacts
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/dotnet_artifacts'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'    

      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: 'SBOM Generation Task'
        inputs:
            BuildDropPath: '$(Build.BinariesDirectory)/publish'               

      - task: CopyFiles@2
        displayName: Copy rocksdb libs
        inputs:
          sourceFolder: '$(Build.ArtifactStagingDirectory)/librocksdb'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish/librocksdb' 

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          pathToPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'consolidated_artifacts'
          StoreAsTar: true   

################################################################################
  - stage:  BuildImages
################################################################################
    displayName: Build Images
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: ConsolidateAndPubishArtifacts
    jobs:
    - job: BuildImageEdgeHub
      steps:
      - template: templates/image-linux.yaml
        parameters: 
          imageName: azureiotedge-hub
          name: "Edge Hub"
          project: edge-hub
          version: $(version)
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
          use_rocksdb: true
    - job: BuildImageEdgeAgent
      steps:        
      - template: templates/image-linux.yaml
        parameters: 
          imageName: azureiotedge-agent
          name: "Edge Agent"
          project: Microsoft.Azure.Devices.Edge.Agent.Service
          version: $(version)
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
          use_rocksdb: true
    - job: BuildImageTemperatureSensor
      steps:        
      - template: templates/image-linux.yaml
        parameters: 
          imageName: azureiotedge-simulated-temperature-sensor
          name: "Temperature Sensor"
          project: SimulatedTemperatureSensor
          version: $(version)
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
    - job: BuildImageDiagnostics
      steps:        
      - template: templates/image-linux.yaml
        parameters:
          imageName: azureiotedge-diagnostics
          name: "Diagnostics Module"
          project: IotedgeDiagnosticsDotnet
          version: $(version)
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'

################################################################################
  - stage: PublishManifests
################################################################################
    displayName: Publish Manifests
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: BuildImages
    jobs:
    - job: PublishManifest
      displayName: Publish Manifest
      strategy:
        matrix:
          EdgeAgent:
            manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template'
          EdgeHub:
            manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template'
          SimulatedTemperatureSensor:
            manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.template'
          Diagnostics:
            manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/iotedge-diagnostics-dotnet/docker/manifest.yaml.template'
      steps:
      # Both docker logins needed for if we need to test this job. In this case images should go to edgebuilds.
      - task: Docker@2
        displayName: Docker login edgebuilds
        inputs:
          command: login
          containerRegistry: iotedge-edgebuilds-acr
      - task: Docker@2
        displayName: Docker login edgerelease
        inputs:
          command: login
          containerRegistry: iotedge-release-acr
      - script: scripts/linux/buildManifest.sh -r $(registry.address) -v $(version) -t $(manifestFilePath) -n '$(namespace)' --tags "$(tags)"