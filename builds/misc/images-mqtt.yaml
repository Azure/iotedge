trigger:
  batch: true
  branches:
    include:
      - master
pr: none

jobs:
################################################################################
  - job: linux_amd64
################################################################################
    displayName: Linux AMD64
    pool:
      vmImage: "ubuntu-latest"

    variables:
      os: linux
      arch: amd64
      imageName: azureiotedge/iotedge-mqtt-broker

    steps:
      - task: Docker@2
        displayName: Docker Login
        inputs:
          command: login
          containerRegistry: iotedge-edgebuilds-acr

      - task: Bash@3
        displayName: Build MQTT Broker - amd64
        inputs:
          filePath: scripts/linux/cross-platform-rust-build.sh
          arguments: --os alpine --arch amd64 --build-path mqtt/mqttd --cargo-flags '--no-default-features --features="generic"'

      - template: templates/move-rust-artifacts.yaml
        parameters:
          should.publish.amd64: "true"
          artifact.folder.path: "mqtt/target"
          destination.folder.path: "mqtt/build-context"
          artifact.name: "mqttd"

      - task: Docker@2
        displayName: Build amd64 image
        inputs:
          repository: $(imageName)
          command: buildAndPush
          containerRegistry: iotedge-edgebuilds-acr
          Dockerfile: mqtt/docker/$(os)/$(arch)/Dockerfile
          buildContext: mqtt/build-context
          tags: $(Build.BuildNumber)-$(os)-$(arch)

      - script: echo $(registry.address)/$(imageName):$(Build.BuildNumber)-$(os)-$(arch) > artifactInfo.txt
        displayName: Create image name

      - publish: artifactInfo.txt
        artifact: image-$(arch)
        displayName: Publish image name

################################################################################
  - job: linux_arm32
################################################################################
    displayName: Linux ARM32
    pool:
      vmImage: "ubuntu-latest"

    variables:
      os: linux
      arch: arm32v7
      imageName: azureiotedge/iotedge-mqtt-broker

    steps:
      - task: Docker@2
        displayName: Docker Login
        inputs:
          command: login
          containerRegistry: iotedge-edgebuilds-acr

      - task: Bash@3
        displayName: Build MQTT Broker - arm32
        inputs:
          filePath: scripts/linux/cross-platform-rust-build.sh
          arguments: --os ubuntu18.04 --arch arm32v7 --build-path mqtt/mqttd --cargo-flags '--no-default-features --features="generic"'

      - template: templates/move-rust-artifacts.yaml
        parameters:
          should.publish.arm32v7: "true"
          artifact.folder.path: "mqtt/target"
          destination.folder.path: "mqtt/build-context"
          artifact.name: "mqttd"

      - task: Docker@2
        displayName: Build arm32v7 image
        inputs:
          repository: $(imageName)
          command: buildAndPush
          containerRegistry: iotedge-edgebuilds-acr
          Dockerfile: mqtt/docker/$(os)/$(arch)/Dockerfile
          buildContext: mqtt/build-context
          tags: $(Build.BuildNumber)-$(os)-$(arch)

      - script: echo $(registry.address)/$(imageName):$(Build.BuildNumber)-$(os)-$(arch) > artifactInfo.txt
        displayName: Create image name

      - publish: artifactInfo.txt
        artifact: image-$(arch)
        displayName: Publish image name
