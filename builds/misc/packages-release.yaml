name: $(VERSION)
trigger: none
pr: none

variables:
  DisableDockerDetector: true

resources:
  repositories:
  - repository: azure-iotedge
    type: github
    endpoint: azure-iot-edge-iotedge1-github
    name: azure/azure-iotedge
  - repository: iot-identity-service
    type: github
    endpoint: azure-iot-edge-iotedge1-github
    name: azure/iot-identity-service
    ref: release/1.4

stages:
################################################################################
  - stage: BuildPackages
################################################################################
    displayName: Build Packages
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    jobs:
    - job: linux
      displayName: Linux
      strategy:
        matrix:
          Centos75-amd64:
            arch: amd64
            os: centos7
            target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
          RedHat8-amd64:
            arch: amd64
            os: redhat8
            target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
          RedHat9-amd64:
            arch: amd64
            os: redhat9
            target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64

          Debian10-amd64:
            os: debian10
            arch: amd64
            target.iotedged: edgelet/target/release
          Debian10-arm32v7:
            os: debian10
            arch: arm32v7
            target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
          Debian10-aarch64:
            os: debian10
            arch: aarch64
            target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

          Debian11-amd64:
            os: debian11
            arch: amd64
            target.iotedged: edgelet/target/release
          Debian11-arm32v7:
            os: debian11
            arch: arm32v7
            target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
          Debian11-aarch64:
            os: debian11
            arch: aarch64
            target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

          Ubuntu1804-amd64:
            os: ubuntu18.04
            arch: amd64
            target.iotedged: edgelet/target/release
          Ubuntu1804-arm32v7:
            os: ubuntu18.04
            arch: arm32v7
            target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
          Ubuntu1804-aarch64:
            os: ubuntu18.04
            arch: aarch64
            target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
          Ubuntu2004-amd64:
            arch: amd64
            os: ubuntu20.04
            target.iotedged: edgelet/target/release
          Ubuntu2004-arm32v7:
            arch: arm32v7
            os: ubuntu20.04
            target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
          Ubuntu2004-aarch64:
            arch: aarch64
            os: ubuntu20.04
            target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
          Ubuntu2204-amd64:
            arch: amd64
            os: ubuntu22.04
            target.iotedged: edgelet/target/release
          Ubuntu2204-arm32v7:
            arch: arm32v7
            os: ubuntu22.04
            target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
          Ubuntu2204-aarch64:
            arch: aarch64
            os: ubuntu22.04
            target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
      steps:
        - bash: |
            BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
            VERSION="$BASE_VERSION"
            echo "##vso[task.setvariable variable=VERSION;]$VERSION"

            echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
            echo "##vso[task.setvariable variable=PACKAGE_OS;]$(os)"
          displayName: Set Version
        - script: edgelet/build/linux/package.sh
          displayName: Create aziot-edge packages
        - task: CopyFiles@2
          displayName: Copy aziot-edge Files to Artifact Staging
          inputs:
            SourceFolder: $(target.iotedged)
            Contents: |
              *.deb
              *.rpm
            TargetFolder: '$(build.artifactstagingdirectory)'
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: ESRP Binary CodeSigning
          inputs:
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: '$(build.artifactstagingdirectory)'
            Pattern: "*.rpm"
            SessionTimeout: 20
            inlineOperation: |
              [
                {
                  "KeyCode": "CP-450779-Pgp",
                  "OperationCode": "LinuxSign",
                  "Parameters": {},
                  "ToolName": "sign",
                  "toolVersion": "1.0"
                }
              ]
            signConfigType: inlineSignParams
        - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
          displayName: 'SBOM Generation Task'
          inputs:
              BuildDropPath: '$(build.artifactstagingdirectory)'
        - task: PublishBuildArtifacts@1
          displayName: Publish Artifacts
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
            ArtifactName: 'iotedged-$(os)-$(arch)'
          condition: succeededOrFailed()

################################################################################
  - stage: PublishPackagesMicrosoft
################################################################################
    displayName: Publish Packages Microsoft
    dependsOn: [BuildPackages]
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    jobs:
    - deployment: safe_guard
      environment: 'Azure-IoT-Edge-Core Release Env'
      displayName: Get Approval
      strategy:
        runOnce:
          deploy:
            steps:
              - bash: |
                  echo "Approval Complete"
    - job: linux
      displayName: Linux
      strategy:
        matrix:
          # For ARM32 Debian10, we solely publishing iot-identity-service artifacts
          # for the partner teams. We don't fully support edgelet upload because 
          # there is a known docker issue with debian 10.
          Debian10-arm32v7:
            excludeEdgelet: true
            os: debian10
            artifactName: iotedged-debian10-arm32v7
            identityServiceArtifactName: packages_debian-10-slim_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          Debian11-arm32v7:
            os: debian11
            artifactName: iotedged-debian11-arm32v7
            identityServiceArtifactName: packages_debian-11-slim_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb

          RedHat8-amd64:
            os: redhat8
            artifactName: iotedged-redhat8-amd64
            identityServiceArtifactName: packages_redhat-ubi8-latest_amd64
            identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm
          RedHat9-amd64:
            os: redhat9
            artifactName: iotedged-redhat9-amd64
            identityServiceArtifactName: packages_redhat-ubi9-latest_amd64
            identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm

          Ubuntu1804-amd64:
            os: ubuntu18.04
            artifactName: iotedged-ubuntu18.04-amd64
            identityServiceArtifactName: packages_ubuntu-18.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Ubuntu1804-aarch64:
            os: ubuntu18.04
            artifactName: iotedged-ubuntu18.04-aarch64
            identityServiceArtifactName: packages_ubuntu-18.04_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

          Ubuntu2004-amd64:
            os: ubuntu20.04
            artifactName: iotedged-ubuntu20.04-amd64
            identityServiceArtifactName: packages_ubuntu-20.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Ubuntu2004-aarch64:
            os: ubuntu20.04
            artifactName: iotedged-ubuntu20.04-aarch64
            identityServiceArtifactName: packages_ubuntu-20.04_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

          Ubuntu2204-amd64:
            os: ubuntu22.04
            artifactName: iotedged-ubuntu22.04-amd64
            identityServiceArtifactName: packages_ubuntu-22.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Ubuntu2204-aarch64:
            os: ubuntu22.04
            artifactName: iotedged-ubuntu22.04-aarch64
            identityServiceArtifactName: packages_ubuntu-22.04_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

      steps:
        - task: AzureKeyVault@1
          displayName: Get secrets
          inputs:
            azureSubscription: $(az.subscription)
            keyVaultName: $(kv.name)
            secretsFilter: >-
              GitHubAccessToken
        - checkout: self
        - task: DownloadPipelineArtifact@2
          displayName: Download Pipeline Build Packages
          condition: not(eq(variables.excludeEdgelet, true))
          inputs:
            source: 'current'
            path: $(System.ArtifactsDirectory)
            patterns: |
                $(artifactName)/*.deb
                $(artifactName)/*.rpm
        - task: PowerShell@2
          displayName: 'Download aziot-identity-service'
          inputs:
            filePath: $(Build.SourcesDirectory)/scripts/local/test/DownloadIdentityService.ps1
            workingDirectory: $(Build.SourcesDirectory)
          env:
            GITHUB_TOKEN: $(GitHubAccessToken)
            ARTIFACT_NAME: $(identityServiceArtifactName)
            PACKAGE_FILTER: $(identityServicePackageFilter)
            DOWNLOAD_PATH: $(System.ArtifactsDirectory)/$(artifactName)
            IDENTITY_SERVICE_COMMIT: $(aziotis.commit)
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: ESRP Binary CodeSigning (IIS)
          inputs:
            ConnectedServiceName: "Azure IoT Edge Code Sign 2"
            FolderPath: '$(System.ArtifactsDirectory)/$(artifactName)'
            Pattern: "*.rpm"
            SessionTimeout: 20
            inlineOperation: |
              [
                {
                  "KeyCode": "CP-450779-Pgp",
                  "OperationCode": "LinuxSign",
                  "Parameters": {},
                  "ToolName": "sign",
                  "toolVersion": "1.0"
                }
              ]
            signConfigType: inlineSignParams
        - task: PublishBuildArtifacts@1
          displayName: Publish Artifacts
          inputs:
            PathtoPublish: '$(System.ArtifactsDirectory)/$(artifactName)'
            ArtifactName: '$(artifactName)'
          condition: succeededOrFailed()

        - task: AzureKeyVault@1
          displayName: 'Get Secret'
          inputs:
            azureSubscription: $(az.subscription)
            KeyVaultName: $(kv.name.pkgRelease)
            SecretsFilter: >-
              msint-spn-cert-pem
        - pwsh: |
            $env:MSINT_SPN_CERT_PEM | Out-File -Encoding Utf8 "$(System.ArtifactsDirectory)/msint-spn-cert.pem"
          displayName: Install msint cert
          env:
            MSINT_SPN_CERT_PEM: $(msint-spn-cert-pem)
        - bash: |
            az login --service-principal --use-cert-sn-issuer --username "$(servicePrincipal.clientId.msint)" --tenant "$(servicePrincipal.tenantId.msint)" -p "$(System.ArtifactsDirectory)/msint-spn-cert.pem"
            az acr login -n msint
            rm -f "$(System.ArtifactsDirectory)/msint-spn-cert.pem"
          name: login_msinternal
        - task: AzureCLI@2
          displayName: Publish Packages
          inputs:
            azureSubscription: $(az.subscription)
            scriptType: bash
            scriptPath: $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh
            arguments: -p $(os) -w $(System.ArtifactsDirectory) -d $(System.ArtifactsDirectory)/$(artifactName) -s $(package-server-name)

##############################################################################
  - stage: PublishPackagesGithub
##############################################################################
    displayName: Publish Packages Github
    dependsOn: [BuildPackages]
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    jobs:
    - deployment: safe_guard
      environment: 'Azure-IoT-Edge-Core Release Env'
      displayName: Get Approval
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureKeyVault@1
                displayName: Get secrets
                inputs:
                  azureSubscription: $(az.subscription)
                  keyVaultName: $(kv.name)
                  secretsFilter: >-
                    GitHubAccessToken
              - checkout: self
              - checkout: azure-iotedge
                submodules: recursive
              - checkout: iot-identity-service
                submodules: recursive
              - bash: | #Create Release Page Before Publishing Artifacts in Parallel in the Next Job.
                  echo "Approval Complete"
                  BASE_VERSION="$(cat $BUILD_SOURCESDIRECTORY/iotedge/edgelet/version.txt)"
                  VERSION="$BASE_VERSION"
                  AZURE_IOTEDGE_REPO_PATH="$(Build.SourcesDirectory)/azure-iotedge"
                  IOTEDGE_REPO_PATH="$(Build.SourcesDirectory)/iotedge"
                  IIS_REPO_PATH="$(Build.SourcesDirectory)/iot-identity-service"
                  BRANCH_NAME="$(Build.SourceBranch)"
                  echo "Version: $VERSION"
                  echo "Branch name: $BRANCH_NAME"
                  echo "azure-iotedge repo path: $AZURE_IOTEDGE_REPO_PATH"
                  echo "iotedge repo path: $IOTEDGE_REPO_PATH"
                  echo "iot-identity-service repo path: $IIS_REPO_PATH"

                  $(Build.SourcesDirectory)/iotedge/scripts/linux/publishReleasePackages.sh -p ubuntu20.04 -w $(Build.SourcesDirectory)/iotedge -d $(Build.SourcesDirectory)/iotedge -v "$BASE_VERSION" -s "github.com" -b  $(Build.SourceBranch) --skip-upload true

                  # Source the scripts & Update version files
                  source $(Build.SourcesDirectory)/iotedge/scripts/linux/github/updateLatestVersion.sh
                  update_latest_version_json

                  # Update Github and tag
                  github_update_and_push
                env:
                  GITHUB_PAT: "$(GitHubAccessToken)"
    - job: linux
      displayName: Linux
      dependsOn: safe_guard
      strategy:
        matrix:
          Centos75-amd64:
            os: centos7
            artifactName: iotedged-centos7-amd64
            identityServiceArtifactName: packages_centos-7_amd64
            identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm
          RedHat8-amd64:
              os: redhat8
              artifactName: iotedged-redhat8-amd64
              identityServiceArtifactName: packages_redhat-ubi8-latest_amd64
              identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm
          RedHat9-amd64:
              os: redhat9
              artifactName: iotedged-redhat9-amd64
              identityServiceArtifactName: packages_redhat-ubi9-latest_amd64
              identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm

          Debian10-amd64:
            os: debian10
            artifactName: iotedged-debian10-amd64
            identityServiceArtifactName: packages_debian-10-slim_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Debian10-arm32v7:
            os: debian10
            artifactName: iotedged-debian10-arm32v7
            identityServiceArtifactName: packages_debian-10-slim_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          Debian10-aarch64:
            os: debian10
            artifactName: iotedged-debian10-aarch64
            identityServiceArtifactName: packages_debian-10-slim_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

          Debian11-amd64:
            os: debian11
            artifactName: iotedged-debian11-amd64
            identityServiceArtifactName: packages_debian-11-slim_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Debian11-arm32v7:
            os: debian11
            artifactName: iotedged-debian11-arm32v7
            identityServiceArtifactName: packages_debian-11-slim_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          Debian11-aarch64:
            os: debian11
            artifactName: iotedged-debian11-aarch64
            identityServiceArtifactName: packages_debian-11-slim_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

          Ubuntu1804-amd64:
            os: ubuntu18.04
            artifactName: iotedged-ubuntu18.04-amd64
            identityServiceArtifactName: packages_ubuntu-18.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Ubuntu1804-arm32v7:
            os: ubuntu18.04
            artifactName: iotedged-ubuntu18.04-arm32v7
            identityServiceArtifactName: packages_ubuntu-18.04_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          Ubuntu1804-aarch64:
            os: ubuntu18.04
            artifactName: iotedged-ubuntu18.04-aarch64
            identityServiceArtifactName: packages_ubuntu-18.04_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

          Ubuntu2004-amd64:
            os: ubuntu20.04
            artifactName: iotedged-ubuntu20.04-amd64
            identityServiceArtifactName: packages_ubuntu-20.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Ubuntu2004-arm32v7:
            os: ubuntu20.04
            artifactName: iotedged-ubuntu20.04-arm32v7
            identityServiceArtifactName: packages_ubuntu-20.04_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          Ubuntu2004-aarch64:
            os: ubuntu20.04
            artifactName: iotedged-ubuntu20.04-aarch64
            identityServiceArtifactName: packages_ubuntu-20.04_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

          Ubuntu2204-amd64:
            os: ubuntu22.04
            artifactName: iotedged-ubuntu22.04-amd64
            identityServiceArtifactName: packages_ubuntu-22.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          Ubuntu2204-arm32v7:
            os: ubuntu22.04
            artifactName: iotedged-ubuntu22.04-arm32v7
            identityServiceArtifactName: packages_ubuntu-22.04_arm32v7
            identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          Ubuntu2204-aarch64:
            os: ubuntu22.04
            artifactName: iotedged-ubuntu22.04-aarch64
            identityServiceArtifactName: packages_ubuntu-22.04_aarch64
            identityServicePackageFilter: aziot-identity-service_*_arm64.deb

      steps:
        - task: AzureKeyVault@1
          displayName: Get secrets
          inputs:
            azureSubscription: $(az.subscription)
            keyVaultName: $(kv.name)
            secretsFilter: >-
              GitHubAccessToken
        - checkout: self
        - task: DownloadPipelineArtifact@2
          displayName: Download Pipeline Build Packages
          inputs:
            source: 'current'
            path: $(System.ArtifactsDirectory)
            patterns: |
                $(artifactName)/*.deb
                $(artifactName)/*.rpm
        - task: PowerShell@2
          displayName: 'Download aziot-identity-service'
          inputs:
            filePath: $(Build.SourcesDirectory)/scripts/local/test/DownloadIdentityService.ps1
            workingDirectory: $(Build.SourcesDirectory)
          env:
            GITHUB_TOKEN: $(GitHubAccessToken)
            ARTIFACT_NAME: $(identityServiceArtifactName)
            PACKAGE_FILTER: $(identityServicePackageFilter)
            DOWNLOAD_PATH: $(System.ArtifactsDirectory)/$(artifactName)
            IDENTITY_SERVICE_COMMIT: $(aziotis.commit)
        - bash: |
            BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
            $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh -p $(os) -w $(System.ArtifactsDirectory) -d $(System.ArtifactsDirectory)/$(artifactName) -v "$BASE_VERSION" -s "github.com" -b $(Build.SourceBranch)
          env:
            GITHUB_PAT: "$(GitHubAccessToken)"
          name: publish_artifacts

##############################################################################
  - stage: smokeTests
##############################################################################
    displayName: Post-release Smoke Tests
    dependsOn:
      - PublishPackagesMicrosoft
      - PublishPackagesGithub
    jobs:
    - job: smokeTests
      displayName: Release Artifact Smoke Tests
      strategy:
        matrix:
          Ubuntu2204-amd64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-22.04-msmoby'
            os: ubuntu22.04
            arch: amd64
            ext: deb
          Ubuntu2204-arm64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux-Arm64'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-22.04-arm64-msmoby'
            os: ubuntu22.04
            arch: arm64
            ext: deb

      pool:
        name: $(pool_name)
        demands:
        - $(agent_demands)

      steps:
      - checkout: azure-iotedge
      - checkout: self
      - task: AzureKeyVault@1
        displayName: Get secrets
        inputs:
          azureSubscription: $(az.subscription)
          keyVaultName: $(kv.name)
          secretsFilter: >-
            IotEdge1-PAT-msazure

      - bash: |
          # Source the scripts & Update version files
          source $(Build.SourcesDirectory)/iotedge/scripts/linux/smokeTestHelper.sh

          wait-for-dpkg-lock 120

          if ! command -v jq &> /dev/null
          then
              sudo apt-get install jq -y
          fi
        displayName: Setup Test Agent
        name: SetupTestAgent

      - bash: |
          # Fetch versions to be used for each component
          edgeletVersion=$(cat $(Build.SourcesDirectory)/azure-iotedge/latest-aziot-edge.json | jq ".\"aziot-edge\"" | tr -d '"')
          iisVersion=$(cat cat $(Build.SourcesDirectory)/azure-iotedge/latest-aziot-identity-service.json | jq ".\"aziot-identity-service\"" | tr -d '"')

          echo "##vso[task.setvariable variable=edgeletVersion;isOutput=true]$edgeletVersion"
          echo "##vso[task.setvariable variable=iisVersion;isOutput=true]$iisVersion"
        env:
          GITHUB_PAT: "$(GitHubAccessToken)"
        displayName: Get Parameters From Azure-iotedge
        name: GitHubParameters

      - bash: |
          edgeletVersion=$(GitHubParameters.edgeletVersion)
          iisVersion=$(GitHubParameters.iisVersion)

          wget https://github.com/Azure/azure-iotedge/releases/download/$edgeletVersion/aziot-edge_$edgeletVersion-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-edge_$edgeletVersion-1_$(os)_$(arch)_github.$(ext)
          wget https://github.com/Azure/azure-iotedge/releases/download/$edgeletVersion/aziot-identity-service_$iisVersion-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-identity-service_$iisVersion-1_$(os)_$(arch)_github.$(ext)
        displayName: Download Edgelet GitHub

      - bash: |
          # Source the scripts & Update version files
          source $(Build.SourcesDirectory)/iotedge/scripts/linux/smokeTestHelper.sh

          if [[ "$(os)" == "ubuntu"* ]]; then
          # Ubuntu
            if [[ "$(os)" == *"22.04" ]]; then
              setup-config-apt "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb"
            elif [[ "$(os)" == *"20.04" ]]; then
              setup-focal-source-apt
              setup-config-apt "https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb"
            else
              echo "Unsupported OS: $(os)"
              exit 1;
            fi
          elif [[ "$(os)" == "debian11" ]]; then
            setup-config-apt "https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb"
          else
            echo "Unsupported OS: $(os)"
            exit 1;
          fi

          echo $'\n\n================================================\n\n'
          echo "Aziot-edge"
          test-released-metadata "aziot-edge" "$(GitHubParameters.edgeletVersion)"

          test-released-artifact \
            "aziot-edge" \
            "$(GitHubParameters.edgeletVersion)" \
            "$(System.ArtifactsDirectory)" \
            "$(GitHubParameters.edgeletVersion)-1_$(os)_$(arch)_github.$(ext)" \
            "$(edgelet.maxPercentAllowed)" \
            "$(IsCheckPreviousPkg)"

          echo $'\n\n================================================\n\n'
          echo "Aziot-identity-service"
          test-released-metadata "aziot-identity-service" "$(GitHubParameters.iisVersion)"

          test-released-artifact \
            "aziot-identity-service" \
            "$(GitHubParameters.iisVersion)" \
            "$(System.ArtifactsDirectory)" \
            "$(GitHubParameters.iisVersion)-1_$(os)_$(arch)_github.$(ext)" \
            "$(edgelet.maxPercentAllowed)" \
            "$(IsCheckPreviousPkg)"
        displayName: Released Artifacts Smoke Tests

      - bash: |
          # Source the scripts & Update version files
          source $(Build.SourcesDirectory)/iotedge/scripts/linux/smokeTestHelper.sh

          test-released-images "$(Build.SourceBranchName)"
        displayName: Released Images Smoke Tests
        env:
          DEVOPS_PAT: "$(IotEdge1-PAT-msazure)"
