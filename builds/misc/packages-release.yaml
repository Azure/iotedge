name: $(VERSION)
trigger: none
pr: none

variables:
  Codeql.Enabled: false
  DisableDockerDetector: true

resources:
  repositories:
  - repository: azure-iotedge
    type: github
    endpoint: azure-iot-edge-iotedge1-github
    name: azure/azure-iotedge
  - repository: iot-identity-service
    type: github
    endpoint: azure-iot-edge-iotedge1-github
    name: azure/iot-identity-service
    ref: release/1.4

stages:
################################################################################
- stage: PublishPackagesMicrosoft
################################################################################
  displayName: Test Publish Packages Microsoft
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
  jobs:
  - job: linux
    displayName: Linux
    strategy:
      matrix:
        # Debian11-arm32v7:
        #   os: debian11
        #   artifactName: iotedged-debian11-arm32v7
        #   identityServiceArtifactName: packages_debian-11-slim_arm32v7
        #   identityServicePackageFilter: aziot-identity-service_*_armhf.deb
        #   pmcRepoName: microsoft-debian-bullseye-prod-apt
        #   pmcRelease: bullseye
        Debian12-arm32v7:
          os: debian12
          artifactName: iotedged-debian12-arm32v7
          identityServiceArtifactName: packages_debian-12-slim_arm32v7
          identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          pmcRepoName: microsoft-debian-bookworm-prod-apt
          pmcRelease: 12
        # Ubuntu2004-amd64:
        #   os: ubuntu20.04
        #   artifactName: iotedged-ubuntu20.04-amd64
        #   identityServiceArtifactName: packages_ubuntu-20.04_amd64
        #   identityServicePackageFilter: aziot-identity-service_*_amd64.deb
        #   pmcRepoName: microsoft-ubuntu-focal-prod-apt
        #   pmcRelease: focal

    steps:
    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: $(az.subscription)
        keyVaultName: $(kv.name)
        secretsFilter: >-
          GitHubAccessToken
    - checkout: self
    - bash: |
        mkdir -p $(System.ArtifactsDirectory)/$(artifactName)
        cd $(System.ArtifactsDirectory)/$(artifactName)
        wget https://github.com/Azure/azure-iotedge/releases/download/1.4.33/aziot-edge_1.4.33-1_debian11_amd64.deb -O aziot-edge_1.4.33~test_amd64.deb

    - task: AzureCLI@2
      displayName: Setup Package Publisher
      inputs:
        azureSubscription: $(az.subscription)
        scriptType: bash
        scriptPath: $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh
        arguments: --setup-pmc-only true -w "$(System.ArtifactsDirectory)" -d "$(System.ArtifactsDirectory)/$(artifactName)"

    - script: |
        $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh \
        -p "$(os)" \
        -w "$(System.ArtifactsDirectory)" \
        -d "$(System.ArtifactsDirectory)/$(artifactName)" \
        -s "$(package-server-name)" \
        --pmc-repository "$(pmcRepoName)" \
        --pmc-release "$(pmcRelease)"
      displayName: PMC Package Publication

    # - script: |
    #     logdir='$(Build.ArtifactStagingDirectory)/logs'
    #     mkdir -p "$logdir"

    #     docker run --volume "/path/to/pmc:/root/.config/pmc" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list | tee $(Build.ArtifactStagingDirectory)/logs/pmc-repo-list.txt
    #   displayName: Write the output to file
    #   condition: succeededOrFailed()
    # - task: PublishBuildArtifacts@1
    #   displayName: Save snapcraft logs
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
    #     ArtifactName: 'output-logs'
    #   condition: succeededOrFailed()
