name: $(VERSION)
trigger: none
pr: none

variables:
  Codeql.Enabled: false
  DisableDockerDetector: true

resources:
  repositories:
  - repository: azure-iotedge
    type: github
    endpoint: azure-iot-edge-iotedge1-github
    name: azure/azure-iotedge
  - repository: iot-identity-service
    type: github
    endpoint: azure-iot-edge-iotedge1-github
    name: azure/iot-identity-service
    ref: release/1.4

stages:
################################################################################
- stage: BuildPackages
################################################################################
  displayName: Build Packages
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
  jobs:
  - job: linux
    displayName: Linux
    strategy:
      matrix:
        Centos75-amd64:
          arch: amd64
          os: centos7
          target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
        RedHat8-amd64:
          arch: amd64
          os: redhat8
          target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
        RedHat9-amd64:
          arch: amd64
          os: redhat9
          target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64

        Debian10-amd64:
          os: debian10
          arch: amd64
          target.iotedged: edgelet/target/release
        Debian10-arm32v7:
          os: debian10
          arch: arm32v7
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Debian10-aarch64:
          os: debian10
          arch: aarch64
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

        Debian11-amd64:
          os: debian11
          arch: amd64
          target.iotedged: edgelet/target/release
        Debian11-arm32v7:
          os: debian11
          arch: arm32v7
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Debian11-aarch64:
          os: debian11
          arch: aarch64
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

        Ubuntu2004-amd64:
          arch: amd64
          os: ubuntu20.04
          target.iotedged: edgelet/target/release
        Ubuntu2004-arm32v7:
          arch: arm32v7
          os: ubuntu20.04
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Ubuntu2004-aarch64:
          arch: aarch64
          os: ubuntu20.04
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
        Ubuntu2204-amd64:
          arch: amd64
          os: ubuntu22.04
          target.iotedged: edgelet/target/release
        Ubuntu2204-arm32v7:
          arch: arm32v7
          os: ubuntu22.04
          target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
        Ubuntu2204-aarch64:
          arch: aarch64
          os: ubuntu22.04
          target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
    steps:
    - bash: |
        BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
        VERSION="$BASE_VERSION"
        echo "##vso[task.setvariable variable=VERSION;]$VERSION"

        echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
        echo "##vso[task.setvariable variable=PACKAGE_OS;]$(os)"
      displayName: Set Version
    - script: edgelet/build/linux/package.sh
      displayName: Create aziot-edge packages
    - task: CopyFiles@2
      displayName: Copy aziot-edge Files to Artifact Staging
      inputs:
        SourceFolder: $(target.iotedged)
        Contents: |
          *.deb
          *.ddeb
          *.rpm
          !*-debugsource-*.rpm
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@3
      displayName: ESRP Binary CodeSigning
      inputs:
        ConnectedServiceName: "aziotedge-pmc-v4-prod"
        FolderPath: '$(build.artifactstagingdirectory)'
        Pattern: |
          *.deb
          *.ddeb
          *.rpm
        SessionTimeout: 20
        inlineOperation: |
          [
            {
              "KeyCode": "CP-450779-Pgp",
              "OperationCode": "LinuxSign",
              "Parameters": {},
              "ToolName": "sign",
              "toolVersion": "1.0"
            }
          ]
        signConfigType: inlineSignParams
    - bash: |
        cd $(build.artifactstagingdirectory)
        rm -f ./CodeSignSummary*
      displayName: Remove CodeSign Summary
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generate SBOM'
      inputs:
        BuildDropPath: '$(build.artifactstagingdirectory)'
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'iotedged-$(os)-$(arch)'
      condition: succeededOrFailed()

  - job: snaps
    displayName: Snaps
    strategy:
      matrix:
        amd64:
          arch: amd64
          pool: $(pool.linux.name)
          image: agent-aziotedge-ubuntu-22.04
        aarch64:
          arch: aarch64
          pool: $(pool.linux.arm.name)
          image: agent-aziotedge-ubuntu-22.04-arm64
    pool:
      name: $(pool)
      demands:
      - ImageOverride -equals $(image)
    steps:
    - script: |
        sudo snap install snapcraft --classic
        lxd init --minimal
        SNAPCRAFT_BUILD_INFO=1 snapcraft --use-lxd
      displayName: Build snap
      env:
        SNAPCRAFT_BUILD_INFO: 1
    - task: CopyFiles@2
      displayName: Stage snap
      inputs:
        Contents: '*.snap'
        SourceFolder: '$(build.sourcesdirectory)'
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: PublishBuildArtifacts@1
      displayName: Publish snap as build artifact
      inputs:
        ArtifactName: 'iotedged-snap-$(arch)'
        PathtoPublish: '$(build.artifactstagingdirectory)'

################################################################################
- stage: PublishPackagesMicrosoft
################################################################################
  displayName: Publish Packages Microsoft
  dependsOn: [BuildPackages]
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
  jobs:
  - deployment: safe_guard
    environment: 'Azure-IoT-Edge-Core Release Env'
    displayName: Get Approval
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              echo "Approval Complete"
  - job: linux
    displayName: Linux
    strategy:
      matrix:
        # For ARM32 Debian10, we solely publishing iot-identity-service artifacts
        # for the partner teams. We don't fully support edgelet upload because 
        # there is a known docker issue with debian 10.
        Debian10-arm32v7:
          excludeEdgelet: true
          os: debian10
          artifactName: iotedged-debian10-arm32v7
          identityServiceArtifactName: packages_debian-10-slim_arm32v7
          identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          pmcRepoName: microsoft-debian-buster-prod-apt
          pmcRelease: buster
        Debian11-arm32v7:
          os: debian11
          artifactName: iotedged-debian11-arm32v7
          identityServiceArtifactName: packages_debian-11-slim_arm32v7
          identityServicePackageFilter: aziot-identity-service_*_armhf.deb
          pmcRepoName: microsoft-debian-bullseye-prod-apt
          pmcRelease: bullseye

        RedHat8-amd64:
          os: redhat8
          artifactName: iotedged-redhat8-amd64
          identityServiceArtifactName: packages_redhat-ubi8-latest_amd64
          identityServicePackageFilter: aziot-identity-service-?.*.x86_64.rpm
          pmcRepoName: microsoft-rhel8.0-prod-yum
          pmcRelease: ''
        RedHat9-amd64:
          os: redhat9
          artifactName: iotedged-redhat9-amd64
          identityServiceArtifactName: packages_redhat-ubi9-latest_amd64
          identityServicePackageFilter: aziot-identity-service-?.*.x86_64.rpm
          pmcRepoName: microsoft-rhel9.0-prod-yum
          pmcRelease: ''

        Ubuntu2004-amd64:
          os: ubuntu20.04
          artifactName: iotedged-ubuntu20.04-amd64
          identityServiceArtifactName: packages_ubuntu-20.04_amd64
          identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          pmcRepoName: microsoft-ubuntu-focal-prod-apt
          pmcRelease: focal
        Ubuntu2004-aarch64:
          os: ubuntu20.04
          artifactName: iotedged-ubuntu20.04-aarch64
          identityServiceArtifactName: packages_ubuntu-20.04_aarch64
          identityServicePackageFilter: aziot-identity-service_*_arm64.deb
          pmcRepoName: microsoft-ubuntu-focal-prod-apt
          pmcRelease: focal

        Ubuntu2204-amd64:
          os: ubuntu22.04
          artifactName: iotedged-ubuntu22.04-amd64
          identityServiceArtifactName: packages_ubuntu-22.04_amd64
          identityServicePackageFilter: aziot-identity-service_*_amd64.deb
          pmcRepoName: microsoft-ubuntu-jammy-prod-apt
          pmcRelease: jammy
        Ubuntu2204-aarch64:
          os: ubuntu22.04
          artifactName: iotedged-ubuntu22.04-aarch64
          identityServiceArtifactName: packages_ubuntu-22.04_aarch64
          identityServicePackageFilter: aziot-identity-service_*_arm64.deb
          pmcRepoName: microsoft-ubuntu-jammy-prod-apt
          pmcRelease: jammy

    steps:
    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: $(az.subscription)
        keyVaultName: $(kv.name)
        secretsFilter: >-
          GitHubAccessToken
    - checkout: self
    - task: DownloadPipelineArtifact@2
      displayName: Download Pipeline Build Packages
      condition: not(eq(variables.excludeEdgelet, true))
      inputs:
        source: 'current'
        path: $(System.ArtifactsDirectory)
        patterns: |
          $(artifactName)/*.deb
          $(artifactName)/*.rpm
    - task: PowerShell@2
      displayName: 'Download aziot-identity-service'
      inputs:
        filePath: $(Build.SourcesDirectory)/scripts/local/test/DownloadIdentityService.ps1
        workingDirectory: $(Build.SourcesDirectory)
      env:
        GITHUB_TOKEN: $(GitHubAccessToken)
        ARTIFACT_NAME: $(identityServiceArtifactName)
        PACKAGE_FILTER: $(identityServicePackageFilter)
        DOWNLOAD_PATH: $(System.ArtifactsDirectory)/$(artifactName)
        IDENTITY_SERVICE_COMMIT: $(aziotis.commit)
    - task: AzureCLI@2
      displayName: Setup Package Publisher
      inputs:
        azureSubscription: $(az.subscription)
        scriptType: bash
        scriptPath: $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh
        arguments: --setup-pmc-only true -w "$(System.ArtifactsDirectory)" -d "$(System.ArtifactsDirectory)/$(artifactName)"
    - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@3
      displayName: ESRP Binary CodeSigning (IIS)
      inputs:
        ConnectedServiceName: "aziotedge-pmc-v4-prod"
        FolderPath: '$(System.ArtifactsDirectory)/$(artifactName)'
        Pattern: "*.deb, *.rpm"
        SessionTimeout: 20
        inlineOperation: |
          [
            {
              "KeyCode": "CP-450779-Pgp",
              "OperationCode": "LinuxSign",
              "Parameters": {},
              "ToolName": "sign",
              "toolVersion": "1.0"
            }
          ]
        signConfigType: inlineSignParams
    - bash: |
        cd "$(System.ArtifactsDirectory)/$(artifactName)"
        rm -f ./CodeSignSummary*
      displayName: Remove CodeSign Summary
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(System.ArtifactsDirectory)/$(artifactName)'
        ArtifactName: '$(artifactName)'
      condition: succeededOrFailed()
    - script: |
        $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh \
        -p "$(os)" \
        -w "$(System.ArtifactsDirectory)" \
        -d "$(System.ArtifactsDirectory)/$(artifactName)" \
        -s "$(package-server-name)" \
        --pmc-repository "$(pmcRepoName)" \
        --pmc-release "$(pmcRelease)"
      displayName: PMC Package Publication

  - job: snaps
    displayName: Snaps
    steps:
    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: $(az.subscription)
        keyVaultName: $(kv.name)
        secretsFilter: >-
          GitHubAccessToken,
          snapcraft-store-credentials
    - task: DownloadPipelineArtifact@2
      displayName: Get azure-iot-edge snaps
      inputs:
        source: current
        path: '$(System.ArtifactsDirectory)'
        patterns: 'iotedged-snap-*/*.snap'
    - pwsh: |
        foreach ($arch in @('amd64', 'aarch64'))
        {
          $env:ARTIFACT_NAME = "packages_snap_$arch"
          $env:PACKAGE_FILTER = "azure-iot-identity_*_$($arch -eq 'aarch64' ? 'arm64' : $arch).snap"
          $env:DOWNLOAD_PATH = "$(System.ArtifactsDirectory)/packages_snap_$arch"
          New-Item $env:DOWNLOAD_PATH -ItemType Directory -Force | Out-Null
          scripts/local/test/DownloadIdentityService.ps1
        }
      displayName: Get azure-iot-identity snaps
      env:
        GITHUB_TOKEN: '$(GitHubAccessToken)'
        IDENTITY_SERVICE_COMMIT: '$(aziotis.commit)'
    - script: |
        sudo snap install snapcraft --classic
        for pkg in $(ls $(System.ArtifactsDirectory)/**/*.snap)
        do
          snapcraft upload --release=stable "$pkg"
        done

        logdir='$(Build.ArtifactStagingDirectory)/logs'
        mkdir -p "$logdir"
        cp $HOME/.local/state/snapcraft/log/*.log "$logdir/"
      displayName: Publish snaps to snapcraft
      env:
        SNAPCRAFT_STORE_CREDENTIALS: '$(snapcraft-store-credentials)'
    - task: PublishBuildArtifacts@1
      displayName: Save snapcraft logs
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
        ArtifactName: 'snapcraft-logs'
      condition: succeededOrFailed()

##############################################################################
- stage: PublishPackagesGithub
##############################################################################
  displayName: Publish Packages Github
  dependsOn: [BuildPackages]
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
  jobs:
  - deployment: safe_guard
    environment: 'Azure-IoT-Edge-Core Release Env'
    displayName: Get Approval
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@1
            displayName: Get secrets
            inputs:
              azureSubscription: $(az.subscription)
              keyVaultName: $(kv.name)
              secretsFilter: >-
                GitHubAccessToken
          - checkout: self
          - checkout: azure-iotedge
            submodules: recursive
          - checkout: iot-identity-service
            submodules: recursive
          - bash: | #Create Release Page Before Publishing Artifacts in Parallel in the Next Job.
              echo "Approval Complete"
              BASE_VERSION="$(cat $BUILD_SOURCESDIRECTORY/iotedge/edgelet/version.txt)"
              VERSION="$BASE_VERSION"
              AZURE_IOTEDGE_REPO_PATH="$(Build.SourcesDirectory)/azure-iotedge"
              IOTEDGE_REPO_PATH="$(Build.SourcesDirectory)/iotedge"
              IIS_REPO_PATH="$(Build.SourcesDirectory)/iot-identity-service"
              BRANCH_NAME="$(Build.SourceBranch)"
              echo "Version: $VERSION"
              echo "Branch name: $BRANCH_NAME"
              echo "azure-iotedge repo path: $AZURE_IOTEDGE_REPO_PATH"
              echo "iotedge repo path: $IOTEDGE_REPO_PATH"
              echo "iot-identity-service repo path: $IIS_REPO_PATH"

              $(Build.SourcesDirectory)/iotedge/scripts/linux/publishReleasePackages.sh -p ubuntu20.04 -w $(Build.SourcesDirectory)/iotedge -d $(Build.SourcesDirectory)/iotedge -v "$BASE_VERSION" -s "github.com" -b  $(Build.SourceBranch) --skip-upload true

              # Source the scripts & Update version files
              source $(Build.SourcesDirectory)/iotedge/scripts/linux/github/updateLatestVersion.sh
              update_latest_version_json

              # Update Github and tag
              github_update_and_push
            env:
              GITHUB_PAT: "$(GitHubAccessToken)"
  - job: linux
    displayName: Linux
    dependsOn: safe_guard
    strategy:
      matrix:
        Centos75-amd64:
          os: centos7
          artifactName: iotedged-centos7-amd64
          identityServiceArtifactName: packages_centos-7_amd64
          identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm
        RedHat8-amd64:
          os: redhat8
          artifactName: iotedged-redhat8-amd64
          identityServiceArtifactName: packages_redhat-ubi8-latest_amd64
          identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm
        RedHat9-amd64:
          os: redhat9
          artifactName: iotedged-redhat9-amd64
          identityServiceArtifactName: packages_redhat-ubi9-latest_amd64
          identityServicePackageFilter: aziot-identity-service-*.x86_64.rpm

        Debian10-amd64:
          os: debian10
          artifactName: iotedged-debian10-amd64
          identityServiceArtifactName: packages_debian-10-slim_amd64
          identityServicePackageFilter: aziot-identity-service*_amd64.deb
        Debian10-arm32v7:
          os: debian10
          artifactName: iotedged-debian10-arm32v7
          identityServiceArtifactName: packages_debian-10-slim_arm32v7
          identityServicePackageFilter: aziot-identity-service*_armhf.deb
        Debian10-aarch64:
          os: debian10
          artifactName: iotedged-debian10-aarch64
          identityServiceArtifactName: packages_debian-10-slim_aarch64
          identityServicePackageFilter: aziot-identity-service*_arm64.deb

        Debian11-amd64:
          os: debian11
          artifactName: iotedged-debian11-amd64
          identityServiceArtifactName: packages_debian-11-slim_amd64
          identityServicePackageFilter: aziot-identity-service*_amd64.deb
        Debian11-arm32v7:
          os: debian11
          artifactName: iotedged-debian11-arm32v7
          identityServiceArtifactName: packages_debian-11-slim_arm32v7
          identityServicePackageFilter: aziot-identity-service*_armhf.deb
        Debian11-aarch64:
          os: debian11
          artifactName: iotedged-debian11-aarch64
          identityServiceArtifactName: packages_debian-11-slim_aarch64
          identityServicePackageFilter: aziot-identity-service*_arm64.deb

        Ubuntu2004-amd64:
          os: ubuntu20.04
          artifactName: iotedged-ubuntu20.04-amd64
          identityServiceArtifactName: packages_ubuntu-20.04_amd64
          identityServicePackageFilter: aziot-identity-service*_amd64.*deb
        Ubuntu2004-arm32v7:
          os: ubuntu20.04
          artifactName: iotedged-ubuntu20.04-arm32v7
          identityServiceArtifactName: packages_ubuntu-20.04_arm32v7
          identityServicePackageFilter: aziot-identity-service*_armhf.*deb
        Ubuntu2004-aarch64:
          os: ubuntu20.04
          artifactName: iotedged-ubuntu20.04-aarch64
          identityServiceArtifactName: packages_ubuntu-20.04_aarch64
          identityServicePackageFilter: aziot-identity-service*_arm64.*deb

        Ubuntu2204-amd64:
          os: ubuntu22.04
          artifactName: iotedged-ubuntu22.04-amd64
          identityServiceArtifactName: packages_ubuntu-22.04_amd64
          identityServicePackageFilter: aziot-identity-service*_amd64.*deb
        Ubuntu2204-arm32v7:
          os: ubuntu22.04
          artifactName: iotedged-ubuntu22.04-arm32v7
          identityServiceArtifactName: packages_ubuntu-22.04_arm32v7
          identityServicePackageFilter: aziot-identity-service*_armhf.*deb
        Ubuntu2204-aarch64:
          os: ubuntu22.04
          artifactName: iotedged-ubuntu22.04-aarch64
          identityServiceArtifactName: packages_ubuntu-22.04_aarch64
          identityServicePackageFilter: aziot-identity-service*_arm64.*deb

        Snap-amd64:
          os: ubuntu22.04
          artifactName: iotedged-snap-amd64
          identityServiceArtifactName: packages_snap_amd64
          identityServicePackageFilter: azure-iot-identity_*_amd64.snap
        Snap-aarch64:
          os: ubuntu22.04
          artifactName: iotedged-snap-aarch64
          identityServiceArtifactName: packages_snap_aarch64
          identityServicePackageFilter: azure-iot-identity_*_arm64.snap

    steps:
    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: $(az.subscription)
        keyVaultName: $(kv.name)
        secretsFilter: >-
          GitHubAccessToken
    - checkout: self
    - task: DownloadPipelineArtifact@2
      displayName: Download Pipeline Build Packages
      inputs:
        source: 'current'
        path: $(System.ArtifactsDirectory)
        patterns: |
          $(artifactName)/*.deb
          $(artifactName)/*.ddeb
          $(artifactName)/*.rpm
          $(artifactName)/*.snap
    - task: PowerShell@2
      displayName: 'Download aziot-identity-service'
      inputs:
        filePath: $(Build.SourcesDirectory)/scripts/local/test/DownloadIdentityService.ps1
        workingDirectory: $(Build.SourcesDirectory)
      env:
        GITHUB_TOKEN: $(GitHubAccessToken)
        ARTIFACT_NAME: $(identityServiceArtifactName)
        PACKAGE_FILTER: $(identityServicePackageFilter)
        DOWNLOAD_PATH: $(System.ArtifactsDirectory)/$(artifactName)
        IDENTITY_SERVICE_COMMIT: $(aziotis.commit)
    - bash: |
        BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
        $(Build.SourcesDirectory)/scripts/linux/publishReleasePackages.sh \
        -p $(os) \
        -w $(System.ArtifactsDirectory) \
        -d $(System.ArtifactsDirectory)/$(artifactName) \
        -v "$BASE_VERSION" \
        -s "github.com" \
        -b $(Build.SourceBranch)
      env:
        GITHUB_PAT: "$(GitHubAccessToken)"
      name: publish_artifacts

##############################################################################
- stage: smokeTests
##############################################################################
  displayName: Post-release Smoke Tests
  dependsOn:
  - PublishPackagesMicrosoft
  - PublishPackagesGithub
  jobs:
  - job: smokeTests
    displayName: Release Artifact Smoke Tests
    strategy:
      matrix:
        Ubuntu2204-amd64:
          pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
          agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-22.04-msmoby'
          os: ubuntu22.04
          arch: amd64
          ext: deb
        Ubuntu2204-arm64:
          pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux-Arm64'
          agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-22.04-arm64-msmoby'
          os: ubuntu22.04
          arch: arm64
          ext: deb

    pool:
      name: $(pool_name)
      demands:
      - $(agent_demands)

    steps:
    - checkout: azure-iotedge
    - checkout: self
    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: $(az.subscription)
        keyVaultName: $(kv.name)
        secretsFilter: >-
          IotEdge1-PAT-msazure

    - bash: |
        # Source the scripts & Update version files
        source $(Build.SourcesDirectory)/iotedge/scripts/linux/smokeTestHelper.sh

        wait-for-dpkg-lock 120

        if ! command -v jq &> /dev/null
        then
            sudo apt-get install jq -y
        fi
      displayName: Setup Test Agent

    - bash: |
        # Fetch versions to be used for each component
        edgeletVersion=$(cat $(Build.SourcesDirectory)/azure-iotedge/latest-aziot-edge.json | jq ".\"aziot-edge\"" | tr -d '"')
        iisVersion=$(cat cat $(Build.SourcesDirectory)/azure-iotedge/latest-aziot-identity-service.json | jq ".\"aziot-identity-service\"" | tr -d '"')

        echo "##vso[task.setvariable variable=edgeletVersion;isOutput=true]$edgeletVersion"
        echo "##vso[task.setvariable variable=iisVersion;isOutput=true]$iisVersion"
      env:
        GITHUB_PAT: "$(GitHubAccessToken)"
      displayName: Get Parameters From Azure-iotedge
      name: GitHubParameters

    - bash: |
        edgeletVersion=$(GitHubParameters.edgeletVersion)
        iisVersion=$(GitHubParameters.iisVersion)

        wget https://github.com/Azure/azure-iotedge/releases/download/$edgeletVersion/aziot-edge_$edgeletVersion-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-edge_$edgeletVersion-1_$(os)_$(arch)_github.$(ext)
        wget https://github.com/Azure/azure-iotedge/releases/download/$edgeletVersion/aziot-identity-service_$iisVersion-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-identity-service_$iisVersion-1_$(os)_$(arch)_github.$(ext)
      displayName: Download Edgelet GitHub

    - bash: |
        # Source the scripts & Update version files
        source $(Build.SourcesDirectory)/iotedge/scripts/linux/smokeTestHelper.sh

        if [[ "$(os)" == "ubuntu"* ]]; then
        # Ubuntu
          if [[ "$(os)" == *"22.04" ]]; then
            setup-config-apt "https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb"
          elif [[ "$(os)" == *"20.04" ]]; then
            setup-focal-source-apt
            setup-config-apt "https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb"
          else
            echo "Unsupported OS: $(os)"
            exit 1;
          fi
        elif [[ "$(os)" == "debian11" ]]; then
          setup-config-apt "https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb"
        else
          echo "Unsupported OS: $(os)"
          exit 1;
        fi

        echo $'\n\n================================================\n\n'
        echo "Aziot-edge"
        test-released-metadata "aziot-edge" "$(GitHubParameters.edgeletVersion)"

        test-released-artifact \
          "aziot-edge" \
          "$(GitHubParameters.edgeletVersion)" \
          "$(System.ArtifactsDirectory)" \
          "$(GitHubParameters.edgeletVersion)-1_$(os)_$(arch)_github.$(ext)" \
          "$(edgelet.maxPercentAllowed)" \
          "$(IsCheckPreviousPkg)"

        echo $'\n\n================================================\n\n'
        echo "Aziot-identity-service"
        test-released-metadata "aziot-identity-service" "$(GitHubParameters.iisVersion)"

        test-released-artifact \
          "aziot-identity-service" \
          "$(GitHubParameters.iisVersion)" \
          "$(System.ArtifactsDirectory)" \
          "$(GitHubParameters.iisVersion)-1_$(os)_$(arch)_github.$(ext)" \
          "$(edgelet.maxPercentAllowed)" \
          "$(IsCheckPreviousPkg)"
      displayName: Released Artifacts Smoke Tests

    - bash: |
        # Source the scripts & Update version files
        source $(Build.SourcesDirectory)/iotedge/scripts/linux/smokeTestHelper.sh

        test-released-images "$(Build.SourceBranchName)"
      displayName: Released Images Smoke Tests
      env:
        DEVOPS_PAT: "$(IotEdge1-PAT-msazure)"
