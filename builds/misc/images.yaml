trigger:
  batch: true
  branches:
    include:
      - master
pr: none

jobs:
################################################################################
  - job: linux_dotnet_projects_arm64
################################################################################
    displayName: LinuxDotnet ARM64
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: UseDotNet@2
        displayName: Install .NET Core sdk
        inputs:
          packageType: sdk
          version: 3.0.x

      - bash: 'docker login $(registry.address) --username $(registry.user) --password $(registry.password)'
        displayName: 'Docker Login'

      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin --os Unix --dotnet_runtime netcoreapp3.0
        name: build
        displayName: Build ($(Build.Configuration))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-linux'

      # Edge Agent - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Edge Agent - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-agent -n microsoft -P Microsoft.Azure.Devices.Edge.Agent.Service --target-arch aarch64

     # Edge Hub - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Edge Hub - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-hub -n microsoft -P Microsoft.Azure.Devices.Edge.Hub.Service --target-arch aarch64

     # Simulated Temperature Sensor - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Temperature Sensor - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-simulated-temperature-sensor -n microsoft -P SimulatedTemperatureSensor --target-arch aarch64

      # Temperature Filter - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Temperature Filter - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-temperature-filter -n microsoft -P TemperatureFilter --target-arch aarch64

      # Load Gen - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Load Gen - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-load-gen -n microsoft -P load-gen --target-arch aarch64

      # Test Analyzer - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Test Analyzer - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-analyzer -n microsoft -P TestAnalyzer --target-arch aarch64

      # Functions Sample - Not Using Template for ARM64 because we have 2 different .NET Core.//TODO: Enable this once Functions supports arm64v8. Right now they are not ready.
      #- task: Bash@3
      #  displayName: Build Image - Functions Sample - aarch64
      #  inputs:
      #     filePath: scripts/linux/buildImage.sh
      #     arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-functions-filter -n azureiotedge -P EdgeHubTriggerCSharp --target-arch aarch64

      # Direct Method Sender - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Direct Method Sender - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-direct-method-sender -n microsoft -P DirectMethodSender --target-arch aarch64

      # Direct Method Receiver - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Direct Method Receiver - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-direct-method-receiver -n microsoft -P DirectMethodReceiver --target-arch aarch64

      # Metrics Validator - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Metrics Validator - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-metrics-validator -n microsoft -P MetricsValidator --target-arch aarch64

      # Module Restarter - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Module Restarter - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-module-restarter -n microsoft -P ModuleRestarter --target-arch aarch64

      # Twin Tester - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Twin Tester - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-twin-tester -n microsoft -P TwinTester --target-arch aarch64

      # Relayer - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Relayer - aarch64
        inputs:
          filePath: scripts/linux/buildImage.sh
          arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-relayer -n microsoft -P Relayer --target-arch aarch64

      # Metrics Collector - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Metrics Collector - aarch64
        inputs:
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-metrics-collector -n microsoft -P MetricsCollector --target-arch aarch64

      # TestResultCoordinator - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Test Result Coordinator - aarch64
        inputs:
          filePath: scripts/linux/buildImage.sh
          arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-test-result-coordinator -n microsoft -P TestResultCoordinator --target-arch aarch64

      # DeploymentTester - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Deployment Tester - aarch64
        inputs:
          filePath: scripts/linux/buildImage.sh
          arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-deployment-tester -n microsoft -P DeploymentTester --target-arch aarch64

      # EdgeHubRestartTester - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - EdgeHub Restart Tester - aarch64
        inputs:
          filePath: scripts/linux/buildImage.sh
          arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-edgehub-restart-tester -n microsoft -P EdgeHubRestartTester --target-arch aarch64

      # CloudToDeviceMessageTester - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image - Cloud To Device Message Receiver Tester - aarch64
        inputs:
          filePath: scripts/linux/buildImage.sh
          arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-c2dmessage-tester -n microsoft -P CloudToDeviceMessageTester --target-arch aarch64
          
################################################################################
  - job: linux_dotnet_projects
################################################################################
    displayName: LinuxDotnet
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core sdk'
        inputs:
          packageType: sdk
          version: 2.1.x
      - bash: 'docker login $(registry.address) --username $(registry.user) --password $(registry.password)'
        displayName: 'Docker Login'

      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
        name: build
        displayName: Build ($(Build.Configuration))

      - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.BinariesDirectory)/publish' --build-number $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-linux'

      # Edge Agent
      - template: templates/image-linux.yaml
        parameters:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service

      # Edge Hub
      - template: templates/image-linux.yaml
        parameters:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: Microsoft.Azure.Devices.Edge.Hub.Service

      # Simulated Temperature Sensor
      - template: templates/image-linux.yaml
        parameters:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor

      # Temperature Filter
      - template: templates/image-linux.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter

      # Load Gen
      - template: templates/image-linux.yaml
        parameters:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen

      # Test Analyzer
      - template: templates/image-linux.yaml
        parameters:
          name: Test Analyzer
          imageName: azureiotedge-analyzer
          project: TestAnalyzer

      # Functions Sample
      - template: templates/image-linux.yaml
        parameters:
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp

      # Direct Method Sender
      - template: templates/image-linux.yaml
        parameters:
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender

      # Direct Method Receiver
      - template: templates/image-linux.yaml
        parameters:
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver

      # Metrics Validator
      - template: templates/image-linux.yaml
        parameters:
          name: Metrics Validator
          imageName: azureiotedge-metrics-validator
          project: MetricsValidator

     # Module Restarter
      - template: templates/image-linux.yaml
        parameters:
          name: Module Restarter
          imageName: azureiotedge-module-restarter
          project: ModuleRestarter

     # Twin Tester
      - template: templates/image-linux.yaml
        parameters:
          name: TwinTester
          imageName: azureiotedge-twin-tester
          project: TwinTester

     # Relayer
      - template: templates/image-linux.yaml
        parameters:
          name: Relayer
          imageName: azureiotedge-relayer
          project: Relayer
          
    # Network Controller
      - template: templates/image-linux.yaml
        parameters:
          name: Network Controller
          imageName: azureiotedge-network-controller
          project: NetworkController

     # TestResultCoordinator
      - template: templates/image-linux.yaml
        parameters:
          name: TestResultCoordinator
          imageName: azureiotedge-test-result-coordinator
          project: TestResultCoordinator

     # Metrics Collector
      - template: templates/image-linux.yaml
        parameters:
          name: Metrics Collector
          imageName: azureiotedge-metrics-collector
          project: MetricsCollector

     # Deployment Tester
      - template: templates/image-linux.yaml
        parameters:
          name: DeploymentTester
          imageName: azureiotedge-deployment-tester
          project: DeploymentTester

     # EdgeHub Restart Tester
      - template: templates/image-linux.yaml
        parameters:
          name: EdgeHubRestartTester
          imageName: azureiotedge-edgehub-restart-tester
          project: EdgeHubRestartTester

     # Cloud To Device Message Tester
      - template: templates/image-linux.yaml
        parameters:
          name: Cloud To Device Message Tester
          imageName: azureiotedge-c2dmessage-tester
          project: CloudToDeviceMessageTester

################################################################################
# linux - Rust amd64
################################################################################
  - template: templates/image-linux-rust-jobs.yaml
    parameters:
      archName: amd64
      targetArch: x86_64

################################################################################
# linux - Rust arm32
################################################################################
  - template: templates/image-linux-rust-jobs.yaml
    parameters:
      archName: arm32
      targetArch: armv7l

################################################################################
# linux - Rust arm64
################################################################################
  - template: templates/image-linux-rust-jobs.yaml
    parameters:
      archName: arm64
      targetArch: aarch64

################################################################################
  - job: windows
################################################################################
    displayName: Windows
    timeoutInMinutes: 90
    pool:
      name: Azure-IoT-Edge-Core
      demands:
        - Build-Image -equals true
        - win-rs5
    workspace:
      clean: all
    variables:
      NetCorePackageUri: https://download.microsoft.com/download/4/0/9/40920432-3302-47a8-b13c-bbc4848ad114/dotnet-sdk-2.1.302-win-x64.zip
    steps:
      - powershell: scripts/windows/setup/Install-Prerequisites.ps1 -DotnetSdkUrl $(NetCorePackageUri) -Dotnet -Nuget
        name: install
        displayName: Install

      - script: echo $(registry.password)|docker login "edgebuilds.azurecr.io" -u "$(registry.user)" --password-stdin
        displayName: Docker Login

      - powershell: scripts/windows/build/Publish-Branch.ps1 -Configuration:"$(Build.Configuration)" -PublishTests:$False -UpdateVersion
        name: build
        displayName: Build ($(Build.Configuration))

      - powershell: edgelet/build/windows/build-diagnostics.ps1 -BuildConfiguration $(Build.Configuration)
        displayName: Build iotedge-diagnostics

      - powershell: scripts/windows/build/Create-ArtifactInfo.ps1 -outputFolder '$(Build.BinariesDirectory)/publish' -buildNumber $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-windows'

      # azureiotedge-diagnostics
      - template: templates/image-windows.yaml
        parameters:
          name: azureiotedge-diagnostics
          imageName: azureiotedge-diagnostics
          project: azureiotedge-diagnostics

      # Edge Agent
      - template: templates/image-windows.yaml
        parameters:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service

      # Edge Hub
      - template: templates/image-windows.yaml
        parameters:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: Microsoft.Azure.Devices.Edge.Hub.Service

      # Simulated Temperature Sensor
      - template: templates/image-windows.yaml
        parameters:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor

      # Temperature Filter
      - template: templates/image-windows.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter

      # Load Gen
      - template: templates/image-windows.yaml
        parameters:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen

      # Test Analyzer
      - template: templates/image-windows.yaml
        parameters:
          name: Test Analyzer
          imageName: azureiotedge-analyzer
          project: TestAnalyzer
          
      # Functions Sample
      - template: templates/image-windows.yaml
        parameters:
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp
          arm32v7: 'false'

      # Direct Method Sender
      - template: templates/image-windows.yaml
        parameters:
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender

      # Direct Method Receiver
      - template: templates/image-windows.yaml
        parameters:
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver
          
      # Metrics Validator
      - template: templates/image-windows.yaml
        parameters:
          name: Metrics Validator
          imageName: azureiotedge-metrics-validator
          project: MetricsValidator

     # Module Restarter
      - template: templates/image-windows.yaml
        parameters:
          name: Module Restarter
          imageName: azureiotedge-module-restarter
          project: ModuleRestarter

     # Twin Tester
      - template: templates/image-windows.yaml
        parameters:
          name: Twin Tester
          imageName: azureiotedge-twin-tester
          project: TwinTester

     # Relayer
      - template: templates/image-windows.yaml
        parameters:
          name: Relayer
          imageName: azureiotedge-relayer
          project: Relayer

     # Metrics Collector
      - template: templates/image-windows.yaml
        parameters:
          name: Metrics Collector
          imageName: azureiotedge-metrics-collector
          project: MetricsCollector

     # TestResultCoordinator
      - template: templates/image-windows.yaml
        parameters:
          name: TestResultCoordinator
          imageName: azureiotedge-test-result-coordinator
          project: TestResultCoordinator

     # Deployment Tester
      - template: templates/image-windows.yaml
        parameters:
          name: Deployment Tester
          imageName: azureiotedge-deployment-tester
          project: DeploymentTester

     # EdgeHub Restart Tester
      - template: templates/image-windows.yaml
        parameters:
          name: EdgeHubRestartTester
          imageName: azureiotedge-edgehub-restart-tester
          project: EdgeHubRestartTester

     # Cloud To Device Message Tester
      - template: templates/image-windows.yaml
        parameters:
          name: Cloud To Device Message Tester
          imageName: azureiotedge-c2dmessage-tester
          project: CloudToDeviceMessageTester

      - powershell: docker system prune -a -f
        displayName: Clean Machine

################################################################################
  - job: manifest
################################################################################
    displayName: Manifest
    pool:
      vmImage: 'ubuntu-16.04'
    dependsOn:
      - linux_dotnet_projects
      - linux_dotnet_projects_arm64
      - linux_rust_amd64
      - linux_rust_arm32
      - linux_rust_arm64
      - windows
    variables:
      tags: "['latest']"
    steps:
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Edge Agent Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Edge Hub Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Temperature Sensor Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edgelet/iotedged/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish azureiotedge-iotedged Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edgelet/iotedge-diagnostics/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish azureiotedge-diagnostics Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edgelet/iotedge-proxy/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish azureiotedge-proxy Manifest'
