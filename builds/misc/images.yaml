trigger:
  batch: true
  branches:
    include:
      - master
      - release/*
pr: none

variables:
  NugetSecurityAnalysisWarningLevel: warn

stages:
- stage: BuildExecutables
  displayName: Build Excecutables
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker  
  dependsOn: []
  jobs:
  - job: BuildDotnetComponents
    displayName: Build Dotnet Components
    steps:
    - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
      name: build
      displayName: Build ($(Build.Configuration)) dotnet artifacts
    - task: PublishPipelineArtifact@1
      displayName: Publish Dotnet Artifacts
      inputs:
        targetPath: '$(Build.BinariesDirectory)/publish'
        artifactName: 'dotnet_artifacts'
        artifactType: 'pipeline'
  - template: templates/build-broker-watchdog.yaml
  - template: templates/build-api-proxy.yaml
  - template: templates/rust-test-module-build.yaml
    parameters:
      module.path: 'test/modules/generic-mqtt-tester'
      module.name: 'generic-mqtt-tester'   

- stage: ConsolidateAndPubishArtifacts
  displayName: Consolidate And Publish Artifacts
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker  
  dependsOn: BuildExecutables
  jobs:
  - job: ConsolidateEdgeHubArtifacts
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download Artifacts
      inputs:
        source: 'current'
        path: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: Copy mqttd (amd64)
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/mqttd_amd64'
        contents: 'mqttd'
        targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/x86_64-unknown-linux-musl/release'        
    - task: CopyFiles@2
      displayName: Copy mqttd (arm32)    
      inputs:  
        sourceFolder: '$(Build.ArtifactStagingDirectory)/mqttd_arm32'        
        contents: 'mqttd'
        targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/armv7-unknown-linux-gnueabihf/release'
    - task: CopyFiles@2
      displayName: Copy mqttd (arm64)    
      inputs:    
        sourceFolder: '$(Build.ArtifactStagingDirectory)/mqttd_arm64'              
        contents: 'mqttd'
        targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/aarch64-unknown-linux-gnu/release'
    - task: CopyFiles@2
      displayName: Copy watchdog (amd64)    
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/watchdog_amd64'              
        contents: 'watchdog'
        targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/x86_64-unknown-linux-musl/release'
    - task: CopyFiles@2
      displayName: Copy watchdog (arm32)    
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/watchdog_arm32'              
        contents: 'watchdog'
        targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/armv7-unknown-linux-gnueabihf/release'
    - task: CopyFiles@2
      displayName: Copy watchdog (arm64)    
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/watchdog_arm64'              
        contents: 'watchdog'
        targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/aarch64-unknown-linux-gnu/release'                             
    - script: scripts/linux/consolidate-build-artifacts.sh --dotnet-artifacts-source-dir '$(Build.ArtifactStagingDirectory)/dotnet_artifacts' --rust-artifacts-source-dir '$(Build.ArtifactStagingDirectory)' --dest-dir '$(Build.BinariesDirectory)/publish' --artifact-name 'edge-hub'
      displayName: Consolidate Edge Hub Artifacts
    - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.BinariesDirectory)/publish' --build-number $(Build.BuildNumber)
      displayName: 'Create Artifact Info File'      
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts'
      inputs:
        targetPath: '$(Build.BinariesDirectory)/publish'
        artifactName: 'core-linux'
        artifactType: 'pipeline'      
- stage:  BuildImages
  displayName: Build Images
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
  dependsOn: ConsolidateAndPubishArtifacts
  jobs:
  - job: BuildImage
    displayName: Build Image
    strategy:
      matrix:
        EdgeAgent:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service
          bin_dir: '$(Build.BinariesDirectory)'
        EdgeHub:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: edge-hub
          bin_dir: '$(Build.BinariesDirectory)'
        TemperatureSensor:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor
          bin_dir: '$(Build.BinariesDirectory)'
        Diagnostics:
          name: Diagnostics
          imageName: azureiotedge-diagnostics
          project: IotedgeDiagnosticsDotnet
          bin_dir: '$(Build.BinariesDirectory)'      
        TemperatureFilter:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter
          bin_dir: '$(Build.BinariesDirectory)'      
        LoadGen:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen
          bin_dir: '$(Build.BinariesDirectory)'      
        TestAnalyzer:
          name: Test Analyzer
          imageName: azureiotedge-analyzer
          project: TestAnalyzer
          bin_dir: '$(Build.BinariesDirectory)'      
      # Functions Sample - Not supported on linux arm64
        FunctionsSample:
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp
          bin_dir: '$(Build.BinariesDirectory)'      
        DirectMethodSender:
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender
          bin_dir: '$(Build.BinariesDirectory)'      
        DirectMethodReceiver:
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver
          bin_dir: '$(Build.BinariesDirectory)'      
        MetricsValidator:
          name: Metrics Validator
          imageName: azureiotedge-metrics-validator
          project: MetricsValidator
          bin_dir: '$(Build.BinariesDirectory)'      
        NumberLogger:
          name: Number Logger
          imageName: azureiotedge-number-logger
          project: NumberLogger
          bin_dir: '$(Build.BinariesDirectory)'      
        ModuleRestarter:
          name: Module Restarter
          imageName: azureiotedge-module-restarter
          project: ModuleRestarter
          bin_dir: '$(Build.BinariesDirectory)'      
        TwinTester:
          name: TwinTester
          imageName: azureiotedge-twin-tester
          project: TwinTester
          bin_dir: '$(Build.BinariesDirectory)'      
        Relayer:
          name: Relayer
          imageName: azureiotedge-relayer
          project: Relayer
          bin_dir: '$(Build.BinariesDirectory)'      
        NetworkController:
          name: Network Controller
          imageName: azureiotedge-network-controller
          project: NetworkController
          bin_dir: '$(Build.BinariesDirectory)'      
        TestResultCoordinator:
          name: TestResultCoordinator
          imageName: azureiotedge-test-result-coordinator
          project: TestResultCoordinator
          bin_dir: '$(Build.BinariesDirectory)'      
        MetricsCollector:
          name: Metrics Collector
          imageName: azureiotedge-metrics-collector
          project: MetricsCollector
          bin_dir: '$(Build.BinariesDirectory)'      
        DeploymentTester:
          name: DeploymentTester
          imageName: azureiotedge-deployment-tester
          project: DeploymentTester
          bin_dir: '$(Build.BinariesDirectory)'      
        EdgeHubRestartTester:
          name: EdgeHubRestartTester
          imageName: azureiotedge-edgehub-restart-tester
          project: EdgeHubRestartTester
          bin_dir: '$(Build.BinariesDirectory)'      
        CloudToDeviceMessageTester:
          name: Cloud To Device Message Tester
          imageName: azureiotedge-c2dmessage-tester
          project: CloudToDeviceMessageTester     
          bin_dir: '$(Build.BinariesDirectory)'
        ApiProxy:
          name: API Proxy
          imageName: azureiotedge-api-proxy
          project: api-proxy-module
          buildx_flag: false
          bin_dir: '$(Build.BinariesDirectory)'        
    steps:
    - template: templates/image-linux.yaml
      parameters:
        name: ${{ variables.name }}
        imageName: $(imageName)
        project: $(project)
        bin_dir: $(bin_dir)   

  # Rust test modules
  - job: BuildRustImage
    displayName: Build Rust Image
    strategy:
      matrix:
        GenericMqttTester:
          name: generic-mqtt-tester
          path: test/modules/generic-mqtt-tester
    steps:
    - template: templates/rust-test-module-images.yaml
      parameters:
        module.name: $(name)        
        module.path: $(path)

################################################################################
- stage: PublishManifests
################################################################################
  displayName: Publish Manifests
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
  dependsOn: BuildImages
  variables:
    tags: "['latest']"
  jobs:
  - job: PublishManifest
    displayName: Publish Manifest
    strategy:
      matrix:
        EdgeAgent:
          manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template'
        EdgeHub:
          manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template'
        SimulatedTemperatureSensor:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.template'
        Diagnostics:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/iotedge-diagnostics-dotnet/docker/manifest.yaml.template'
        ApiProxy:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/api-proxy-module/docker/manifest.yaml.template'
    steps:
    - task: Docker@2
      displayName: Docker login edgebuilds
      inputs:
        command: login
        containerRegistry: iotedge-edgebuilds-acr
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -v $(Build.BuildNumber) -t $(manifestFilePath) -n microsoft --tags "$(tags)"
  - job: ComponentGovernance
    steps:
    - task: ComponentGovernanceComponentDetection@0
      inputs:
        dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm64v8'        