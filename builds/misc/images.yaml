trigger:
  batch: true
  branches:
    include:
      - master
pr: none

jobs:
################################################################################
  - job: linuxARM64
################################################################################
    displayName: LinuxARM64
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: DotNetCoreInstaller@0
        displayName: Install .NET Core
        inputs:
          packageType: sdk
          version: 3.0.100-preview5-011568

      - bash: 'docker login $(registry.address) --username $(registry.user) --password $(registry.password)'
        displayName: 'Docker Login'

      - script: edgelet/build/linux/install.sh --package-arm
        displayName: Install Rust

      - bash: 'echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"'
        displayName: Modify path

      - bash: 'cargo install --git https://github.com/arsing/cross.git --branch set-path'
        displayName: 'Install cross (fork with docker fix)'

      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin --os Unix --dotnet_runtime netcoreapp3.0
        name: build
        displayName: Build ($(Build.Configuration))

      - script: scripts/linux/buildDiagnostics.sh $(Build.Configuration)
        displayName: Build iotedge-diagnostics

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-linux'

     # azureiotedge-diagnostics - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image azureiotedge-diagnostics - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-diagnostics -n microsoft -P azureiotedge-diagnostics --target-arch aarch64

    # Edge Agent - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Edge Agent Image - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-agent -n microsoft -P Microsoft.Azure.Devices.Edge.Agent.Service --target-arch aarch64

     # Edge Hub - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Edge Hub Image - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-hub -n microsoft -P Microsoft.Azure.Devices.Edge.Hub.Service --target-arch aarch64

     # Simulated Temperature Sensor - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Temperature Sensor - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-simulated-temperature-sensor -n microsoft -P SimulatedTemperatureSensor --target-arch aarch64     

      # Temperature Filter - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Temperature Filter - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-temperature-filter -n microsoft -P TemperatureFilter --target-arch aarch64     
           
      # Load Gen - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Load Gen - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-load-gen -n microsoft -P load-gen --target-arch aarch64     
           
      # Messages Analyzer - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Messages Analyzer - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-analyzer -n microsoft -P MessagesAnalyzer --target-arch aarch64     

      # Functions Sample - Not Using Template for ARM64 because we have 2 different .NET Core.//TODO: Enable this once Functions supports arm64v8. Right now they are not ready. 
      #- task: Bash@3
      #  displayName: Build Image Functions Sample - aarch64
      #  inputs: 
      #     filePath: scripts/linux/buildImage.sh
      #     arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-functions-filter -n azureiotedge -P EdgeHubTriggerCSharp --target-arch aarch64     

      # Direct Method Sender - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Direct Method Sender - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-direct-method-sender -n microsoft -P DirectMethodSender --target-arch aarch64           

      # Direct Method Receiver - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Direct Method Receiver - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-direct-method-receiver -n microsoft -P DirectMethodReceiver --target-arch aarch64           

      # Direct Method Cloud Sender - Not Using Template for ARM64 because we have 2 different .NET Core.
      - task: Bash@3
        displayName: Build Image Direct Method Cloud Sender - aarch64
        inputs: 
           filePath: scripts/linux/buildImage.sh
           arguments: -r $(registry.address) -u $(registry.user) -p $(registry.password) -i azureiotedge-direct-method-cloud-sender -n microsoft -P DirectMethodCloudSender --target-arch aarch64           
           
          
################################################################################
  - job: linux
################################################################################
    displayName: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      NetCorePackageUri: https://download.microsoft.com/download/4/0/9/40920432-3302-47a8-b13c-bbc4848ad114/dotnet-sdk-2.1.302-linux-x64.tar.gz
    steps:
      - script: scripts/linux/installPrereqs.sh -u $(NetCorePackageUri)
        name: install
        displayName: Install dependencies

      - bash: 'docker login $(registry.address) --username $(registry.user) --password $(registry.password)'
        displayName: 'Docker Login'

      - script: edgelet/build/linux/install.sh --package-arm
        displayName: Install Rust

      - bash: 'echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"'
        displayName: Modify path

      - bash: 'cargo install --git https://github.com/arsing/cross.git --branch set-path'
        displayName: 'Install cross (fork with docker fix)'

      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
        name: build
        displayName: Build ($(Build.Configuration))

      - script: scripts/linux/buildDiagnostics.sh $(Build.Configuration)
        displayName: Build iotedge-diagnostics

      - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.BinariesDirectory)/publish' --build-number $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-linux'

      # azureiotedge-diagnostics
      - template: templates/image-linux.yaml
        parameters:
          name: azureiotedge-diagnostics
          imageName: azureiotedge-diagnostics
          project: azureiotedge-diagnostics

      # Edge Agent
      - template: templates/image-linux.yaml
        parameters:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service

      # Edge Hub
      - template: templates/image-linux.yaml
        parameters:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: Microsoft.Azure.Devices.Edge.Hub.Service

      # Simulated Temperature Sensor
      - template: templates/image-linux.yaml
        parameters:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor

      # Temperature Filter
      - template: templates/image-linux.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter

      # Load Gen
      - template: templates/image-linux.yaml
        parameters:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen

      # Messages Analyzer
      - template: templates/image-linux.yaml
        parameters:
          name: Messages Analyzer
          imageName: azureiotedge-analyzer
          project: MessagesAnalyzer

      # Functions Sample
      - template: templates/image-linux.yaml
        parameters:
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp

      # Direct Method Sender
      - template: templates/image-linux.yaml
        parameters:
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender

      # Direct Method Receiver
      - template: templates/image-linux.yaml
        parameters:
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver

      # Direct Method Cloud Sender
      - template: templates/image-linux.yaml
        parameters:
          name: Direct Method Cloud Sender
          imageName: azureiotedge-direct-method-cloud-sender
          project: DirectMethodCloudSender

################################################################################
  - job: windows
################################################################################
    displayName: Windows
    pool:
      name: Azure-IoT-Edge-Core
      demands:
        - Build-Image -equals true
        - win-rs5
    variables:
      NetCorePackageUri: https://download.microsoft.com/download/4/0/9/40920432-3302-47a8-b13c-bbc4848ad114/dotnet-sdk-2.1.302-win-x64.zip
    steps:
      - powershell: scripts/windows/setup/Install-Prerequisites.ps1 -DotnetSdkUrl $(NetCorePackageUri) -Dotnet -Nuget
        name: install
        displayName: Install

      - script: echo $(registry.password)|docker login "edgebuilds.azurecr.io" -u "$(registry.user)" --password-stdin
        displayName: Docker Login

      - powershell: scripts/windows/build/Publish-Branch.ps1 -Configuration:"$(Build.Configuration)" -PublishTests:$False -UpdateVersion
        name: build
        displayName: Build ($(Build.Configuration))

      - powershell: edgelet/build/windows/build-diagnostics.ps1 -BuildConfiguration $(Build.Configuration)
        displayName: Build iotedge-diagnostics

      - powershell: scripts/windows/build/Create-ArtifactInfo.ps1 -outputFolder '$(Build.BinariesDirectory)/publish' -buildNumber $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          ArtifactName: 'core-windows'

      # azureiotedge-diagnostics
      - template: templates/image-windows.yaml
        parameters:
          name: azureiotedge-diagnostics
          imageName: azureiotedge-diagnostics
          project: azureiotedge-diagnostics

      # Edge Agent
      - template: templates/image-windows.yaml
        parameters:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service

      # Edge Hub
      - template: templates/image-windows.yaml
        parameters:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: Microsoft.Azure.Devices.Edge.Hub.Service

      # Simulated Temperature Sensor
      - template: templates/image-windows.yaml
        parameters:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor

      # Temperature Filter
      - template: templates/image-windows.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter

      # Load Gen
      - template: templates/image-windows.yaml
        parameters:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen

      # Messages Analyzer
      - template: templates/image-windows.yaml
        parameters:
          name: Messages Analyzer
          imageName: azureiotedge-analyzer
          project: MessagesAnalyzer
          
      # Functions Sample
      - template: templates/image-windows.yaml
        parameters:
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp
          arm32v7: 'false'

      # Direct Method Sender
      - template: templates/image-windows.yaml
        parameters:
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender

      # Direct Method Receiver
      - template: templates/image-windows.yaml
        parameters:
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver

      # Direct Method Cloud Sender
      - template: templates/image-windows.yaml
        parameters:
          name: Direct Method Cloud Sender
          imageName: azureiotedge-direct-method-cloud-sender
          project: DirectMethodCloudSender

      - powershell: docker system prune -a -f
        displayName: Clean Machine

################################################################################
  - job: manifest
################################################################################
    displayName: Manifest
    pool:
      vmImage: 'ubuntu-16.04'
    dependsOn:
      - linux
      - windows
      - linuxARM64
    variables:
      tags: "['latest']"
    steps:
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Edge Agent Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Edge Hub Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish Temperature Sensor Manifest'
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -u $(registry.user) -p $(registry.password) -v $(Build.BuildNumber) -t $(System.DefaultWorkingDirectory)/edgelet/iotedge-diagnostics/docker/manifest.yaml.template -n microsoft --tags "$(tags)"
      displayName: 'Publish azureiotedge-diagnostics Manifest'
