trigger:
  batch: true
  branches:
    include:
      - master
      - release/*
pr: none

variables:
  NugetSecurityAnalysisWarningLevel: warn

stages:
- stage: BuildExecutables
  displayName: Build Excecutables
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker  
  dependsOn: []
  jobs:
  - job: BuildDotnetComponents
    displayName: Build Dotnet Components
    steps:
    - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
      name: build
      displayName: Build ($(Build.Configuration)) dotnet artifacts
    - task: PublishPipelineArtifact@1
      displayName: Publish Dotnet Artifacts
      inputs:
        targetPath: '$(Build.BinariesDirectory)/publish'
        artifactName: 'dotnet_artifacts'
        artifactType: 'pipeline'
  - template: templates/build-broker-watchdog.yaml
  - template: templates/build-api-proxy.yaml

- stage: ConsolidateAndPubishArtifacts
  displayName: Consolidate And Publish Artifacts
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker  
  dependsOn: BuildExecutables
  jobs:
  - job: ConsolidateEdgeHubArtifacts
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download Artifacts
      inputs:
        source: 'current'
        path: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: Copy mqttd (amd64)
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/mqttd_amd64'
        contents: 'mqttd'
        targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/x86_64-unknown-linux-musl/release'        
    - task: CopyFiles@2
      displayName: Copy mqttd (arm32)    
      inputs:  
        sourceFolder: '$(Build.ArtifactStagingDirectory)/mqttd_arm32'        
        contents: 'mqttd'
        targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/armv7-unknown-linux-gnueabihf/release'
    - task: CopyFiles@2
      displayName: Copy mqttd (arm64)    
      inputs:    
        sourceFolder: '$(Build.ArtifactStagingDirectory)/mqttd_arm64'              
        contents: 'mqttd'
        targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/aarch64-unknown-linux-gnu/release'
    - task: CopyFiles@2
      displayName: Copy watchdog (amd64)    
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/watchdog_amd64'              
        contents: 'watchdog'
        targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/x86_64-unknown-linux-musl/release'
    - task: CopyFiles@2
      displayName: Copy watchdog (arm32)    
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/watchdog_arm32'              
        contents: 'watchdog'
        targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/armv7-unknown-linux-gnueabihf/release'
    - task: CopyFiles@2
      displayName: Copy watchdog (arm64)    
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/watchdog_arm64'              
        contents: 'watchdog'
        targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/aarch64-unknown-linux-gnu/release'                             
    - script: scripts/linux/consolidate-build-artifacts.sh --dotnet-artifacts-source-dir '$(Build.ArtifactStagingDirectory)/dotnet_artifacts' --rust-artifacts-source-dir '$(Build.ArtifactStagingDirectory)' --dest-dir '$(Build.BinariesDirectory)/publish' --artifact-name 'edge-hub'
      displayName: Consolidate Edge Hub Artifacts
    - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.BinariesDirectory)/publish' --build-number $(Build.BuildNumber)
      displayName: 'Create Artifact Info File'      
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts'
      inputs:
        targetPath: '$(Build.BinariesDirectory)/publish'
        artifactName: 'core-linux'
        artifactType: 'pipeline'      
- stage:  BuildImages
  displayName: Build Images
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
  dependsOn: ConsolidateAndPubishArtifacts
  jobs:
  - job: BuildImages
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        path: '$(Build.ArtifactStagingDirectory)'

    - task: CopyFiles@2
      displayName: Copy Edge Hub Artifacts
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/core-linux'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'

    - task: CopyFiles@2
      displayName: Copy Other Dotnet Artifacts
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/dotnet_artifacts'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'

    - task: CopyFiles@2
      displayName: Copy API Proxy Artifacts (amd64)
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/api_proxy_x86_64'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'       
        
    - task: CopyFiles@2
      displayName: Copy API Proxy Artifacts (arm32)
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/api_proxy_armv7l'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'    
        
    - task: CopyFiles@2
      displayName: Copy API Proxy Artifacts (arm64)
      inputs:
        sourceFolder: '$(Build.ArtifactStagingDirectory)/api_proxy_aarch64'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'            

    - task: Docker@2
      displayName: Docker login edgebuilds
      inputs:
        command: login
        containerRegistry: iotedge-edgebuilds-acr    

    # Edge Agent
    - template: templates/image-linux.yaml
      parameters:
        name: Edge Agent
        imageName: azureiotedge-agent
        project: Microsoft.Azure.Devices.Edge.Agent.Service
        bin_dir: '$(Build.BinariesDirectory)'      

    # Edge Hub
    - template: templates/image-linux.yaml
      parameters:
        name: Edge Hub
        imageName: azureiotedge-hub
        project: edge-hub
        bin_dir: '$(Build.BinariesDirectory)'

    # Simulated Temperature Sensor
    - template: templates/image-linux.yaml
      parameters:
        name: Temperature Sensor
        imageName: azureiotedge-simulated-temperature-sensor
        project: SimulatedTemperatureSensor
        bin_dir: '$(Build.BinariesDirectory)'

    # Dotnet Diagnostics Module
    - template: templates/image-linux.yaml
      parameters:
        name: Diagnostics
        imageName: azureiotedge-diagnostics
        project: IotedgeDiagnosticsDotnet
        bin_dir: '$(Build.BinariesDirectory)'      

    # Temperature Filter
    - template: templates/image-linux.yaml
      parameters:
        name: Temperature Filter
        imageName: azureiotedge-temperature-filter
        project: TemperatureFilter
        bin_dir: '$(Build.BinariesDirectory)'      

    # Load Gen
    - template: templates/image-linux.yaml
      parameters:
        name: Load Gen
        imageName: azureiotedge-load-gen
        project: load-gen
        bin_dir: '$(Build.BinariesDirectory)'      

    # Test Analyzer
    - template: templates/image-linux.yaml
      parameters:
        name: Test Analyzer
        imageName: azureiotedge-analyzer
        project: TestAnalyzer
        bin_dir: '$(Build.BinariesDirectory)'      

    # Functions Sample - Not supported on linux arm64
    - template: templates/image-linux.yaml
      parameters:
        name: Functions Sample
        imageName: azureiotedge-functions-filter
        project: EdgeHubTriggerCSharp
        bin_dir: '$(Build.BinariesDirectory)'      

    # Direct Method Sender
    - template: templates/image-linux.yaml
      parameters:
        name: Direct Method Sender
        imageName: azureiotedge-direct-method-sender
        project: DirectMethodSender
        bin_dir: '$(Build.BinariesDirectory)'      

    # Direct Method Receiver
    - template: templates/image-linux.yaml
      parameters:
        name: Direct Method Receiver
        imageName: azureiotedge-direct-method-receiver
        project: DirectMethodReceiver
        bin_dir: '$(Build.BinariesDirectory)'      

    # Metrics Validator
    - template: templates/image-linux.yaml
      parameters:
        name: Metrics Validator
        imageName: azureiotedge-metrics-validator
        project: MetricsValidator
        bin_dir: '$(Build.BinariesDirectory)'      

    # Number Logger
    - template: templates/image-linux.yaml
      parameters:
        name: Number Logger
        imageName: azureiotedge-number-logger
        project: NumberLogger
        bin_dir: '$(Build.BinariesDirectory)'      

    # Module Restarter
    - template: templates/image-linux.yaml
      parameters:
        name: Module Restarter
        imageName: azureiotedge-module-restarter
        project: ModuleRestarter
        bin_dir: '$(Build.BinariesDirectory)'      

    # Twin Tester
    - template: templates/image-linux.yaml
      parameters:
        name: TwinTester
        imageName: azureiotedge-twin-tester
        project: TwinTester
        bin_dir: '$(Build.BinariesDirectory)'      

    # Relayer
    - template: templates/image-linux.yaml
      parameters:
        name: Relayer
        imageName: azureiotedge-relayer
        project: Relayer
        bin_dir: '$(Build.BinariesDirectory)'      

  # Network Controller
    - template: templates/image-linux.yaml
      parameters:
        name: Network Controller
        imageName: azureiotedge-network-controller
        project: NetworkController
        bin_dir: '$(Build.BinariesDirectory)'      

    # TestResultCoordinator
    - template: templates/image-linux.yaml
      parameters:
        name: TestResultCoordinator
        imageName: azureiotedge-test-result-coordinator
        project: TestResultCoordinator
        bin_dir: '$(Build.BinariesDirectory)'      

    # Metrics Collector
    - template: templates/image-linux.yaml
      parameters:
        name: Metrics Collector
        imageName: azureiotedge-metrics-collector
        project: MetricsCollector
        bin_dir: '$(Build.BinariesDirectory)'      

    # Deployment Tester
    - template: templates/image-linux.yaml
      parameters:
        name: DeploymentTester
        imageName: azureiotedge-deployment-tester
        project: DeploymentTester
        bin_dir: '$(Build.BinariesDirectory)'      

    # EdgeHub Restart Tester
    - template: templates/image-linux.yaml
      parameters:
        name: EdgeHubRestartTester
        imageName: azureiotedge-edgehub-restart-tester
        project: EdgeHubRestartTester
        bin_dir: '$(Build.BinariesDirectory)'      

    # Cloud To Device Message Tester
    - template: templates/image-linux.yaml
      parameters:
        name: Cloud To Device Message Tester
        imageName: azureiotedge-c2dmessage-tester
        project: CloudToDeviceMessageTester     
        bin_dir: '$(Build.BinariesDirectory)'

    # Build API Proxy Image
    - template: templates/image-linux.yaml
      parameters:
        name: API Proxy
        imageName: azureiotedge-api-proxy
        project: api-proxy-module
        buildx_flag: false    

    # Check API proxy
    - task: ComponentGovernanceComponentDetection@0
      inputs:
        dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm64v8'        

# ################################################################################
#   - job: linux_API_proxy_module
# ################################################################################
#     timeoutInMinutes: 180
#     displayName: linuxAPIProxy
#     pool:
#       name: $(pool.linux.name)
#       demands:
#         - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
#     steps:
#       - task: Docker@2
#         displayName: Docker login edgebuilds
#         inputs:
#           command: login
#           containerRegistry: iotedge-edgebuilds-acr
#       - bash: |
#             sudo apt-get update && sudo apt-get -y install qemu binfmt-support qemu-user-static && \
#             docker run --rm --privileged multiarch/qemu-user-static --reset -p yes && \
#             docker buildx rm  mbuilder || true  && \
#             docker buildx create --name mbuilder  || true  && \
#             docker buildx use mbuilder
#             docker -v
#       # Build API Proxy executable
#       - template: templates/build-api-proxy.yaml
#       # Build API Proxy Image
#       - template: templates/image-linux.yaml
#         parameters:
#           name: API Proxy
#           imageName: azureiotedge-api-proxy
#           project: api-proxy-module
#           buildx_flag: false
#       # Check API proxy
#       - task: ComponentGovernanceComponentDetection@0
#         inputs:
#           dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm64v8'

# ################################################################################
#   - job: RustTestModules
# ################################################################################
#     timeoutInMinutes: 180
#     displayName: Rust Test Modules
#     pool:
#       name: $(pool.linux.name)
#       demands:
#         - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
#     steps:
#       - template: templates/rust-test-module-build.yaml
#       - template: templates/rust-test-module-images.yaml
#         parameters:
#           module.path: 'test/modules/generic-mqtt-tester'
#           module.name: 'generic-mqtt-tester'

################################################################################
- stage: PublishManifests
################################################################################
  displayName: Publish Manifests
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
  dependsOn: BuildImages
  variables:
    tags: "['latest']"
  jobs:
  - job: PublishManifest
    displayName: Publish Manifest
    strategy:
      matrix:
        EdgeAgent:
          manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template'
        EdgeHub:
          manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template'
        SimulatedTemperatureSensor:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.templat'
        Diagnostics:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/iotedge-diagnostics-dotnet/docker/manifest.yaml.template'
        ApiProxy:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/api-proxy-module/docker/manifest.yaml.templat'

    steps:
    - task: Docker@2
      displayName: Docker login edgebuilds
      inputs:
        command: login
        containerRegistry: iotedge-edgebuilds-acr
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -v $(Build.BuildNumber) -t $(manifestFilePath) -n microsoft --tags "$(tags)"