name: $(version)
trigger: none
pr: none

variables:
  DisableDockerDetector: true

jobs:
  - deployment: publishImages
    displayName: Publish Linux Images
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    workspace:
      clean: all
    environment: 'Azure-IoT-Edge-Core Release Env'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true
            fetchDepth: 100

          # Both docker logins needed for if we need to test this job. In this case images should go to edgebuilds.
          - task: Docker@2
            displayName: Docker login edgebuilds
            inputs:
              command: login
              containerRegistry: iotedge-edgebuilds-acr

          - task: Docker@2
            displayName: Docker login edgerelease
            inputs:
              command: login
              containerRegistry: iotedge-release-acr
        
          - task: Bash@3
            displayName: 'Publish Api Proxy - Linux amd64'
            inputs:
              filePath: 'scripts/linux/copyImage.sh'
              arguments: '--from $(registry.address)/$(from.registry.namespace)/azureiotedge-api-proxy:$(version)-linux-amd64 --to $(registry.address)/$(to.registry.namespace)/azureiotedge-api-proxy:$(version)-linux-amd64'
      
          - task: Bash@3
            displayName: 'Publish Api Proxy - Linux arm32v7'
            inputs:
              filePath: 'scripts/linux/copyImage.sh'
              arguments: '--from $(registry.address)/$(from.registry.namespace)/azureiotedge-api-proxy:$(version)-linux-arm32v7 --to $(registry.address)/$(to.registry.namespace)/azureiotedge-api-proxy:$(version)-linux-arm32v7'
      
          - task: Bash@3
            displayName: 'Publish Api Proxy - Linux arm64v8'
            inputs:
              filePath: 'scripts/linux/copyImage.sh'
              arguments: '--from $(registry.address)/$(from.registry.namespace)/azureiotedge-api-proxy:$(version)-linux-arm64v8 --to $(registry.address)/$(to.registry.namespace)/azureiotedge-api-proxy:$(version)-linux-arm64v8'
      
          - script: |
              scripts/linux/buildManifest.sh \
                -r $(registry.address) \
                -i 'azureiotedge-api-proxy' \
                -v $(version) \
                -n $(to.registry.namespace) \
                --tags '$(tags)'
            displayName: 'Publish Api Proxy Manifest'