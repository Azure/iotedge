trigger: none
pr: none

variables:
  Codeql.Enabled: false
  DisableDockerDetector: true

resources:
  pipelines:
  - pipeline: images
    source: 'IoT Edge Core - Stage Images'
    branch: 'release/1.4'

jobs:
################################################################################
  - deployment: safe_guard
################################################################################
    timeoutInMinutes: 180
    displayName: Safe Guards
    environment: $(deployment.environment)
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              clean: true
              fetchDepth: 100

            - bash: |
                VERSION=$(cat $BUILD_SOURCESDIRECTORY/versionInfo.json | grep -oP '^\s*\"version\":\s*\"\K(?<version>\d*\.\d*\.\d*)')
                
                if [[ "$(resources.pipeline.images.runName)" == "$VERSION" ]]; then
                  echo "Input image build has the same version as the targetting release tags."
                  echo "    Input Image Build Version: $(resources.pipeline.images.runName)"
                  echo "    Targeting Release Version: $VERSION"
                else
                  echo "Input image build has a differnt version as the targetting release tags."
                  echo "Please make sure the input image resource is correctly selected."
                  echo "    Input Image Build Version: $(resources.pipeline.images.runName)"
                  echo "    Targeting Release Version: $VERSION"
                  exit 1;
                fi
              displayName: Verify Input Images Version

################################################################################
  - deployment: publish_linux_images
################################################################################
    timeoutInMinutes: 180
    displayName: Publish Linux Images
    dependsOn: safe_guard
    environment: $(deployment.environment)
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              clean: true
              fetchDepth: 100

            - task: Docker@2
              displayName: Docker login
              inputs:
                command: login
                containerRegistry: $(service-connection.registry)

            - script: |
                VERSION='$(resources.pipeline.images.runName)'
                TAGS="[\"$VERSION\",\"${VERSION%.*}\"]"

                echo "Version: $VERSION"
                echo "Tags : $TAGS"

                echo "##vso[task.setvariable variable=version;]$VERSION"
                echo "##vso[task.setvariable variable=tags;]$TAGS"
              displayName: Set version and tags

            - script: |
                scripts/linux/copy-multi-platform-image.sh \
                  --registry '$(registry.address)' \
                  --repo-src 'microsoft/azureiotedge-agent' \
                  --repo-dst 'public/azureiotedge-agent' \
                  --tag '$(version)' \
                  --tags-add '$(tags)'
              displayName: Publish Edge Agent images

            - script: |
                scripts/linux/copy-multi-platform-image.sh \
                  --registry '$(registry.address)' \
                  --repo-src 'microsoft/azureiotedge-hub' \
                  --repo-dst 'public/azureiotedge-hub' \
                  --tag '$(version)' \
                  --tags-add '$(tags)'
              displayName: Publish Edge Hub images

            - script: |
                temp_sensor_tags=$(echo '$(tags)' | jq -c '. + ["latest"]')

                scripts/linux/copy-multi-platform-image.sh \
                  --registry '$(registry.address)' \
                  --repo-src 'microsoft/azureiotedge-simulated-temperature-sensor' \
                  --repo-dst 'public/azureiotedge-simulated-temperature-sensor' \
                  --tag '$(version)' \
                  --tags-add "$temp_sensor_tags"
              displayName: Publish Simulated Temperature Sensor images

            - script: |
                # We copy azureiotedge-diagnostics to the unlisted namespace instead of the public
                # namespace so it won't show up in the MAR Discovery Portal. This image is used
                # interally by `iotedge check`; it's not an image you would `docker pull`.
                scripts/linux/copy-multi-platform-image.sh \
                  --registry '$(registry.address)' \
                  --repo-src 'microsoft/azureiotedge-diagnostics' \
                  --repo-dst 'unlisted/azureiotedge-diagnostics' \
                  --tag '$(version)' \
                  --tags-add '$(tags)'
              displayName: Publish Diagnostics images
