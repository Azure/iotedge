parameters:
  - name: 'E2EBuild'
    type: boolean
    default: false

stages:

################################################################################
  - stage: CheckBuildPackages
################################################################################
    displayName: Check For Source Code Changes
    pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: []
    jobs:
      - job: check_source_change_edgelet
        displayName: Check Source Changes Edgelet (changes ARE in builds or edgelet)
        steps:
          - bash: |
              git log -m -1 --name-only --first-parent --pretty="" | egrep -i '^(builds|edgelet)'
              if [[ $? == 0 ]]; then
                echo "Detected changes inside builds or edgelet folders"
                echo "##vso[task.setvariable variable=EDGELETCHANGES;isOutput=true]TRUE"
              fi
            displayName: Check changes in edgelet sources
            name: check_files

################################################################################
  - stage: BuildPackages
################################################################################
    displayName: Build Packages
    dependsOn: CheckBuildPackages
    condition: |
      or
      (
        eq(${{ parameters['E2EBuild'] }}, false),
        eq(dependencies.CheckBuildPackages.outputs['check_source_change_edgelet.check_files.EDGELETCHANGES'], 'true')
      )
    jobs:
    ################################################################################
      - job: linux
    ################################################################################
        displayName: Linux
        pool:
          name: $(pool.linux.name)
          demands:
            - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
        strategy:
          matrix:
            RedHat8-amd64:
              arch: amd64
              os: redhat8
              target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
            RedHat9-amd64:
              arch: amd64
              os: redhat9
              target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64

            Debian11-amd64:
              os: debian11
              arch: amd64
              target.iotedged: edgelet/target/release
            Debian11-arm32v7:
              os: debian11
              arch: arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Debian11-aarch64:
              os: debian11
              arch: aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
            Debian12-amd64:
              os: debian12
              arch: amd64
              target.iotedged: edgelet/target/release
            Debian12-arm32v7:
              os: debian12
              arch: arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Debian12-aarch64:
              os: debian12
              arch: aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

            Ubuntu2004-amd64:
              arch: amd64
              os: ubuntu20.04
              target.iotedged: edgelet/target/release
            Ubuntu2004-arm32v7:
              arch: arm32v7
              os: ubuntu20.04
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Ubuntu2004-aarch64:
              arch: aarch64
              os: ubuntu20.04
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
            Ubuntu2204-amd64:
              arch: amd64
              os: ubuntu22.04
              target.iotedged: edgelet/target/release
            Ubuntu2204-arm32v7:
              arch: arm32v7
              os: ubuntu22.04
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Ubuntu2204-aarch64:
              arch: aarch64
              os: ubuntu22.04
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
            Ubuntu2404-amd64:
              arch: amd64
              os: ubuntu24.04
              target.iotedged: edgelet/target/release
            Ubuntu2404-arm32v7:
              arch: arm32v7
              os: ubuntu24.04
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Ubuntu2404-aarch64:
              arch: aarch64
              os: ubuntu24.04
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
        steps:
          - bash: |
              BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
              VERSION="$BASE_VERSION~$BUILD_BUILDNUMBER"
              echo "Version: $VERSION"
              echo "##vso[task.setvariable variable=VERSION;]$VERSION"

              echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
              echo "##vso[task.setvariable variable=PACKAGE_OS;]$(os)"
            displayName: Set Version
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
          - script: edgelet/build/linux/package.sh
            displayName: Create aziot-edge packages
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
          - task: CopyFiles@2
            displayName: Copy aziot-edge Files to Artifact Staging
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
            inputs:
              SourceFolder: $(target.iotedged)
              Contents: |
                *.deb
                *.ddeb
                *.rpm
                !*-debugsource-*.rpm
              TargetFolder: '$(build.artifactstagingdirectory)'
          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)'
              ArtifactName: 'iotedged-$(os)-$(arch)'
            condition: and(succeededOrFailed(), or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64')))

    ################################################################################
      - job: snap
    ################################################################################
        displayName: Snap
        strategy:
          matrix:
            amd64:
              arch: amd64
              pool: $(pool.linux.name)
              image: agent-aziotedge-ubuntu-22.04
            aarch64:
              arch: aarch64
              pool: $(pool.linux.arm.name)
              image: agent-aziotedge-ubuntu-22.04-arm64
        pool:
          name: $(pool)
          demands:
          - ImageOverride -equals $(image)
        steps:
          - script: |
              #!/bin/bash
              set -xeuo pipefail
              sudo snap refresh
              sudo snap install snapcraft --classic
              lxd init --minimal
              SNAPCRAFT_BUILD_INFO=1 snapcraft --use-lxd
            displayName: Build snap
            condition: eq(${{ parameters['E2EBuild'] }}, false)
          - task: CopyFiles@2
            displayName: Stage artifacts for publishing
            condition: eq(${{ parameters['E2EBuild'] }}, false)
            inputs:
              Contents: '*.snap'
              SourceFolder: '$(build.sourcesdirectory)'
              TargetFolder: '$(build.artifactstagingdirectory)'
          - task: PublishBuildArtifacts@1
            displayName: Publish artifacts
            condition: eq(${{ parameters['E2EBuild'] }}, false)
            inputs:
              ArtifactName: 'iotedged-snap-$(arch)'
              PathtoPublish: '$(build.artifactstagingdirectory)'

    ################################################################################
      - job: mariner_linux
    ################################################################################
        displayName: Mariner Linux
        condition: or(eq(variables['build.linux.mariner'], ''), eq(variables['build.linux.mariner'], true))
        timeoutInMinutes: 90
        strategy:
          matrix:
            2.0-amd64:
              agent-pool: $(pool.linux.name)
              agent-image: agent-aziotedge-ubuntu-20.04-docker
              arch: amd64
              os: mariner
              os_version: 2
              mariner_release: 2.0-stable
              target.iotedged: builds/mariner2/out/RPMS
              target.logs: builds/mariner2/build/logs/pkggen/rpmbuilding/
            2.0-aarch64:
              agent-pool: $(pool.linux.arm.name)
              agent-image: agent-aziotedge-ubuntu-20.04-arm64-docker
              arch: aarch64
              os: mariner
              os_version: 2
              mariner_release: 2.0-stable
              target.iotedged: builds/mariner2/out/RPMS
              target.logs: builds/mariner2/build/logs/pkggen/rpmbuilding/
        pool:
          name: $(agent-pool)
          demands:
          - ImageOverride -equals $(agent-image)
          - DiskSizeGiB -equals 100 # EFLOW requires ~85GB to build the edgelet artifacts
          - WorkFolder -equals /mnt/storage/_work
        steps:
          - bash: |
              BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
              VERSION="$BASE_VERSION~$BUILD_BUILDNUMBER"  # Give deb format here; let Makefile convert to rpm format
              echo "##vso[task.setvariable variable=VERSION;]$VERSION"
              echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
              echo "PACKAGE_OS=$(os)"
              echo "##vso[task.setvariable variable=MARINER_RELEASE;]$(mariner_release)"
              echo "##vso[task.setvariable variable=OSVERSION;]$(os_version)"
              mariner_arch=$(arch)
              if [ $mariner_arch == "amd64" ]; then
                mariner_arch="x86_64"
              fi
              echo "##vso[task.setvariable variable=MARINER_ARCH;]$mariner_arch"
            displayName: Set Version
          - task: AzureKeyVault@2
            displayName: 'Get secret to download aziot-identity-service (amd64 only)'
            condition: and(succeeded(), eq(variables.arch,'amd64'))
            inputs:
              azureSubscription: $(az.subscription)
              KeyVaultName: 'edgebuildkv'
              SecretsFilter: >-
                IotEdge1-GitHub-PAT
          - task: PowerShell@2
            displayName: 'Download aziot-identity-service (amd64 only)'
            condition: and(succeeded(), eq(variables.arch,'amd64'))
            inputs:
              filePath: scripts/local/test/DownloadIdentityService.ps1
            env:
              GITHUB_TOKEN: $(IotEdge1-GitHub-PAT)
              ARTIFACT_NAME: 'packages_$(os)-$(os_version)_$(arch)'
              PACKAGE_FILTER: 'aziot-identity-service-*.cm$(os_version).$(MARINER_ARCH).rpm'
              DOWNLOAD_PATH: $(Build.SourcesDirectory)
          # build iot-identity-service here since they cannot build native aarch64 packages
          - bash: |
              set -ex
              git clone --recurse-submodules --branch main https://github.com/Azure/iot-identity-service.git
              pushd iot-identity-service
              packageVersion=$(
                grep "PACKAGE_VERSION:" .github/workflows/packages.yaml \
                | awk '{print $2}' \
                | tr -d "'" \
                | tr -d '"'
              )
              docker run --rm \
                -v "$(Build.SourcesDirectory)/iot-identity-service:/src" \
                -e "ARCH=$PACKAGE_ARCH" \
                -e "OS=$OS:$OSVERSION" \
                -e "PACKAGE_VERSION=$packageVersion" \
                -e "PACKAGE_RELEASE=1" \
                --privileged \
                'mcr.microsoft.com/mirror/docker/library/ubuntu:22.04' \
                '/src/ci/package.sh'
              popd
              cp iot-identity-service/packages/mariner$(os_version)/$(arch)/aziot-identity-service-$packageVersion-1.cm$(os_version).$(arch).rpm .
              cp iot-identity-service/packages/mariner$(os_version)/$(arch)/aziot-identity-service-debuginfo-$packageVersion-1.cm$(os_version).$(arch).rpm .
              sudo rm -rf iot-identity-service
            displayName: Build iot-identity-service (aarch64 only)
            condition: and(succeeded(), eq(variables.arch,'aarch64'))
          - bash: |
              docker run --rm \
                -v "$(Build.SourcesDirectory):/src" \
                -e "ARCH=$arch" \
                -e "OS=$OS" \
                -e "MARINER_RELEASE=$MARINER_RELEASE" \
                -e "MARINER_ARCH=$MARINER_ARCH" \
                -e "VERSION=$VERSION" \
                --privileged \
                'mcr.microsoft.com/mirror/docker/library/ubuntu:22.04' \
                '/src/edgelet/build/linux/package-mariner.sh'
            displayName: Build aziot-edge
          - task: CopyFiles@2
            displayName: Copy iotedged build logs to artifact staging
            inputs:
              SourceFolder: $(target.logs)
              Contents: |
                **/*.rpm.log
              TargetFolder: '$(build.artifactstagingdirectory)'
            condition: succeededOrFailed()
          - task: CopyFiles@2
            displayName: Copy iotedged Files to Artifact Staging
            inputs:
              SourceFolder: $(target.iotedged)/$(mariner_arch)
              Contents: |
                aziot-edge-*.rpm
              TargetFolder: '$(build.artifactstagingdirectory)'
            condition: succeededOrFailed()
          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)'
              ArtifactName: 'iotedged-$(os)$(os_version)-$(arch)'
            condition: succeededOrFailed()
