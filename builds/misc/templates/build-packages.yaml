parameters:
  - name: 'E2EBuild'
    type: boolean
    default: false

stages:

################################################################################
  - stage: CheckBuildPackages
################################################################################
    displayName: Check For Source Code Changes
    pool:
        name: $(pool.linux.name)
        demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: []
    jobs:
      - job: check_source_change_edgelet
        displayName: Check Source Changes Edgelet (changes ARE in builds or edgelet)
        steps:
          - bash: |
              git log -m -1 --name-only --first-parent --pretty="" | egrep -i '^(builds|edgelet)'
              if [[ $? == 0 ]]; then
                echo "Detected changes inside builds or edgelet folders"
                echo "##vso[task.setvariable variable=EDGELETCHANGES;isOutput=true]TRUE"
              fi
            displayName: Check changes in edgelet sources
            name: check_files

################################################################################
  - stage: BuildPackages
################################################################################
    displayName: Build Packages
    dependsOn: CheckBuildPackages
    condition: |
      or
      (
        eq(${{ parameters['E2EBuild'] }}, false),
        eq(dependencies.CheckBuildPackages.outputs['check_source_change_edgelet.check_files.EDGELETCHANGES'], 'true')
      )
    jobs:
    ################################################################################
      - job: linux
    ################################################################################
        displayName: Linux
        pool:
          name: $(pool.linux.name)
          demands:
            - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
        strategy:
          matrix:
            RedHat8-amd64:
              arch: amd64
              os.container: redhat/ubi8:latest
              os.identity: platform:el8
              os.iotedge: redhat8
              target.identity: iot-identity-service/packages/el8/amd64
              target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64
            RedHat9-amd64:
              arch: amd64
              os.container: redhat/ubi9:latest
              os.identity: platform:el9
              os.iotedge: redhat9
              target.identity: iot-identity-service/packages/el9/amd64
              target.iotedged: edgelet/target/rpmbuild/RPMS/x86_64

            Debian11-amd64:
              arch: amd64
              os.container: mcr.microsoft.com/mirror/docker/library/debian:bullseye
              os.identity: debian:11
              os.iotedge: debian11
              target.identity: iot-identity-service/packages/debian11/amd64
              target.iotedged: edgelet/target/release
            Debian11-arm32v7:
              arch: arm32v7
              os.container: mcr.microsoft.com/mirror/docker/library/debian:bullseye
              os.identity: debian:11
              os.iotedge: debian11
              target.identity: iot-identity-service/packages/debian11/arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Debian11-aarch64:
              arch: aarch64
              os.container: mcr.microsoft.com/mirror/docker/library/debian:bullseye
              os.identity: debian:11
              os.iotedge: debian11
              target.identity: iot-identity-service/packages/debian11/aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
            Debian12-amd64:
              arch: amd64
              os.container: mcr.microsoft.com/mirror/docker/library/debian:bookworm
              os.identity: debian:12
              os.iotedge: debian12
              target.identity: iot-identity-service/packages/debian12/amd64
              target.iotedged: edgelet/target/release
            Debian12-arm32v7:
              arch: arm32v7
              os.container: mcr.microsoft.com/mirror/docker/library/debian:bookworm
              os.identity: debian:12
              os.iotedge: debian12
              target.identity: iot-identity-service/packages/debian12/arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Debian12-aarch64:
              arch: aarch64
              os.container: mcr.microsoft.com/mirror/docker/library/debian:bookworm
              os.identity: debian:12
              os.iotedge: debian12
              target.identity: iot-identity-service/packages/debian12/aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release

            Ubuntu2004-amd64:
              arch: amd64
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:20.04
              os.identity: ubuntu:20.04
              os.iotedge: ubuntu20.04
              target.identity: iot-identity-service/packages/ubuntu2004/amd64
              target.iotedged: edgelet/target/release
            Ubuntu2004-arm32v7:
              arch: arm32v7
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:20.04
              os.identity: ubuntu:20.04
              os.iotedge: ubuntu20.04
              target.identity: iot-identity-service/packages/ubuntu2004/arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Ubuntu2004-aarch64:
              arch: aarch64
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:20.04
              os.identity: ubuntu:20.04
              os.iotedge: ubuntu20.04
              target.identity: iot-identity-service/packages/ubuntu2004/aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
            Ubuntu2204-amd64:
              arch: amd64
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:22.04
              os.identity: ubuntu:22.04
              os.iotedge: ubuntu22.04
              target.identity: iot-identity-service/packages/ubuntu2204/amd64
              target.iotedged: edgelet/target/release
            Ubuntu2204-arm32v7:
              arch: arm32v7
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:22.04
              os.identity: ubuntu:22.04
              os.iotedge: ubuntu22.04
              target.identity: iot-identity-service/packages/ubuntu2204/arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Ubuntu2204-aarch64:
              arch: aarch64
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:22.04
              os.identity: ubuntu:22.04
              os.iotedge: ubuntu22.04
              target.identity: iot-identity-service/packages/ubuntu2204/aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
            Ubuntu2404-amd64:
              arch: amd64
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:24.04
              os.identity: ubuntu:24.04
              os.iotedge: ubuntu24.04
              target.identity: iot-identity-service/packages/ubuntu2404/amd64
              target.iotedged: edgelet/target/release
            Ubuntu2404-arm32v7:
              arch: arm32v7
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:24.04
              os.identity: ubuntu:24.04
              os.iotedge: ubuntu24.04
              target.identity: iot-identity-service/packages/ubuntu2404/arm32v7
              target.iotedged: edgelet/target/armv7-unknown-linux-gnueabihf/release
            Ubuntu2404-aarch64:
              arch: aarch64
              os.container: mcr.microsoft.com/mirror/docker/library/ubuntu:24.04
              os.identity: ubuntu:24.04
              os.iotedge: ubuntu24.04
              target.identity: iot-identity-service/packages/ubuntu2404/aarch64
              target.iotedged: edgelet/target/aarch64-unknown-linux-gnu/release
        steps:
          - bash: |
              BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
              VERSION="$BASE_VERSION~$BUILD_BUILDNUMBER"
              echo "Version: $VERSION"
              echo "##vso[task.setvariable variable=VERSION;]$VERSION"

              echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
              echo "##vso[task.setvariable variable=PACKAGE_OS;]$(os.iotedge)"
            displayName: Set Version
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
          - bash: |
              set -xeuo pipefail
              identity_commit=$(
                sed -nE \
                  's/^source = "git\+https:\/\/github\.com\/Azure\/iot-identity-service\?branch=main#([0-9a-fA-F]+)"$/\1/p' \
                  edgelet/Cargo.lock | head -n 1
              )
              git clone https://github.com/Azure/iot-identity-service.git
              pushd iot-identity-service
              git checkout "$identity_commit"
              git submodule update --init --recursive .
              packageVersion=$(
                grep "PACKAGE_VERSION:" .github/workflows/packages.yaml \
                | awk '{print $2}' \
                | tr -d "'" \
                | tr -d '"'
              )
              docker run --rm \
                -v "$(Build.SourcesDirectory)/iot-identity-service:/src" \
                -e 'ARCH=$(arch)' \
                -e 'OS=$(os.identity)' \
                -e "PACKAGE_VERSION=$packageVersion" \
                -e "PACKAGE_RELEASE=1" \
                --privileged \
                '$(os.container)' \
                '/src/ci/package.sh'
              popd
            displayName: Create aziot-identity packages
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
          - task: CopyFiles@2
            displayName: Copy aziot-identity packages to artifact staging
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
            inputs:
              SourceFolder: $(target.identity)
              Contents: |
                *.deb
                *.ddeb
                *.rpm
                !*-debugsource-*.rpm
                !*-devel-*.rpm
                !*.src.rpm
              TargetFolder: '$(build.artifactstagingdirectory)/aziot-identity'
          - task: PublishBuildArtifacts@1
            displayName: Publish aziot-identity artifacts
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)/aziot-identity'
              ArtifactName: 'aziot-identity-$(os.iotedge)-$(arch)'
            condition: and(succeededOrFailed(), or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64')))
          - bash: sudo rm -rf iot-identity-service
            displayName: Clean up iot-identity-service
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
          - script: edgelet/build/linux/package.sh
            displayName: Create aziot-edge packages
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
          - task: CopyFiles@2
            displayName: Copy aziot-edge packages to artifact staging
            condition: or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64'))
            inputs:
              SourceFolder: $(target.iotedged)
              Contents: |
                *.deb
                *.ddeb
                *.rpm
                !*-debugsource-*.rpm
              TargetFolder: '$(build.artifactstagingdirectory)/iotedged'
          - task: PublishBuildArtifacts@1
            displayName: Publish iotedged artifacts
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)/iotedged'
              ArtifactName: 'iotedged-$(os.iotedge)-$(arch)'
            condition: and(succeededOrFailed(), or(eq(${{ parameters['E2EBuild'] }}, false), eq(variables.arch,'amd64')))

    ################################################################################
      - job: snap
    ################################################################################
        displayName: Snap
        strategy:
          matrix:
            amd64:
              arch: amd64
              pool: $(pool.linux.name)
              image: agent-aziotedge-ubuntu-22.04
            aarch64:
              arch: aarch64
              pool: $(pool.linux.arm.name)
              image: agent-aziotedge-ubuntu-22.04-arm64
        pool:
          name: $(pool)
          demands:
          - ImageOverride -equals $(image)
        steps:
          - script: |
              #!/bin/bash
              set -xeuo pipefail
              sudo snap refresh
              sudo snap install snapcraft --classic
              lxd init --minimal
              SNAPCRAFT_BUILD_INFO=1 snapcraft --use-lxd
            displayName: Build snap
            condition: eq(${{ parameters['E2EBuild'] }}, false)
          - task: CopyFiles@2
            displayName: Stage artifacts for publishing
            condition: eq(${{ parameters['E2EBuild'] }}, false)
            inputs:
              Contents: '*.snap'
              SourceFolder: '$(build.sourcesdirectory)'
              TargetFolder: '$(build.artifactstagingdirectory)'
          - task: PublishBuildArtifacts@1
            displayName: Publish artifacts
            condition: eq(${{ parameters['E2EBuild'] }}, false)
            inputs:
              ArtifactName: 'iotedged-snap-$(arch)'
              PathtoPublish: '$(build.artifactstagingdirectory)'

    ################################################################################
      - job: mariner_linux
    ################################################################################
        displayName: Mariner Linux
        condition: or(eq(variables['build.linux.mariner'], ''), eq(variables['build.linux.mariner'], true))
        timeoutInMinutes: 90
        strategy:
          matrix:
            2.0-amd64:
              agent-pool: $(pool.linux.name)
              agent-image: agent-aziotedge-ubuntu-20.04-docker
              arch: amd64
              os: mariner
              os_version: 2
              mariner_release: 2.0-stable
              target.identity: iot-identity-service/packages/mariner2/amd64
              target.iotedged: builds/mariner2/out/RPMS/x86_64
            2.0-aarch64:
              agent-pool: $(pool.linux.arm.name)
              agent-image: agent-aziotedge-ubuntu-20.04-arm64-docker
              arch: aarch64
              os: mariner
              os_version: 2
              mariner_release: 2.0-stable
              target.identity: iot-identity-service/packages/mariner2/aarch64
              target.iotedged: builds/mariner2/out/RPMS/aarch64
        pool:
          name: $(agent-pool)
          demands:
          - ImageOverride -equals $(agent-image)
          - DiskSizeGiB -equals 100 # EFLOW requires ~85GB to build the edgelet artifacts
          - WorkFolder -equals /mnt/storage/_work
        steps:
          - bash: |
              BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
              VERSION="$BASE_VERSION~$BUILD_BUILDNUMBER"  # Give deb format here; let Makefile convert to rpm format
              echo "##vso[task.setvariable variable=VERSION;]$VERSION"
              echo "##vso[task.setvariable variable=PACKAGE_ARCH;]$(arch)"
              echo "PACKAGE_OS=$(os)"
              echo "##vso[task.setvariable variable=OSVERSION;]$(os_version)"
              mariner_arch=$(arch)
              if [ $mariner_arch == "amd64" ]; then
                mariner_arch="x86_64"
              fi
              echo "##vso[task.setvariable variable=MARINER_ARCH;]$mariner_arch"
            displayName: Set Version
          - bash: |
              set -xeuo pipefail
              identity_commit=$(
                sed -nE \
                  's/^source = "git\+https:\/\/github\.com\/Azure\/iot-identity-service\?branch=main#([0-9a-fA-F]+)"$/\1/p' \
                  edgelet/Cargo.lock | head -n 1
              )
              git clone https://github.com/Azure/iot-identity-service.git
              pushd iot-identity-service
              git checkout "$identity_commit"
              git submodule update --init --recursive .
              packageVersion=$(
                grep "PACKAGE_VERSION:" .github/workflows/packages.yaml \
                | awk '{print $2}' \
                | tr -d "'" \
                | tr -d '"'
              )
              docker run --rm \
                -v "$(Build.SourcesDirectory)/iot-identity-service:/src" \
                -e "ARCH=$PACKAGE_ARCH" \
                -e "OS=$OS:$OSVERSION" \
                -e "PACKAGE_VERSION=$packageVersion" \
                -e "PACKAGE_RELEASE=1" \
                --privileged \
                'mcr.microsoft.com/mirror/docker/library/ubuntu:22.04' \
                '/src/ci/package.sh'
              popd
              # aziot-edge package script expects to query the version from the identity package in the root source directory
              sudo cp iot-identity-service/packages/mariner$(os_version)/$(arch)/aziot-identity-service-$packageVersion-1.cm$(os_version).$(MARINER_ARCH).rpm .
            displayName: Create aziot-identity packages
          - task: CopyFiles@2
            displayName: Copy aziot-identity build logs to artifact staging
            inputs:
              SourceFolder: iot-identity-service/Mariner-Build/build/logs/pkggen/rpmbuilding
              Contents: |
                **/*.rpm.log
              TargetFolder: '$(build.artifactstagingdirectory)/aziot-identity'
            condition: succeededOrFailed()
          - task: CopyFiles@2
            displayName: Copy aziot-identity packages to artifact staging
            inputs:
              SourceFolder: $(target.identity)
              Contents: |
                *.rpm
                !*-devel-*.rpm
              TargetFolder: '$(build.artifactstagingdirectory)/aziot-identity'
            condition: succeededOrFailed()
          - task: PublishBuildArtifacts@1
            displayName: Publish aziot-identity artifacts
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)/aziot-identity'
              ArtifactName: 'aziot-identity-$(os)$(os_version)-$(arch)'
          - bash: sudo rm -rf iot-identity-service
            displayName: Clean up iot-identity-service
            condition: succeededOrFailed()
          - bash: |
              docker run --rm \
                -v "$(Build.SourcesDirectory):/src" \
                -e "ARCH=$arch" \
                -e "OS=$OS" \
                -e "MARINER_RELEASE=$MARINER_RELEASE" \
                -e "MARINER_ARCH=$MARINER_ARCH" \
                -e "VERSION=$VERSION" \
                --privileged \
                'mcr.microsoft.com/mirror/docker/library/ubuntu:22.04' \
                '/src/edgelet/build/linux/package-mariner.sh'
            displayName: Create aziot-edge packages
          - task: CopyFiles@2
            displayName: Copy aziot-edge build logs to artifact staging
            inputs:
              SourceFolder: builds/mariner2/build/logs/pkggen/rpmbuilding
              Contents: |
                **/*.rpm.log
              TargetFolder: '$(build.artifactstagingdirectory)/iotedged'
            condition: succeededOrFailed()
          - task: CopyFiles@2
            displayName: Copy aziot-edge packages to artifact staging
            inputs:
              SourceFolder: $(target.iotedged)
              Contents: |
                aziot-edge-*.rpm
              TargetFolder: '$(build.artifactstagingdirectory)/iotedged'
            condition: succeededOrFailed()
          - task: PublishBuildArtifacts@1
            displayName: Publish iotedged artifacts
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)/iotedged'
              ArtifactName: 'iotedged-$(os)$(os_version)-$(arch)'
            condition: succeededOrFailed()
