parameters:
  name: ''
  imageName: ''
  namespace: 'microsoft'
  project: ''
  version: ''
  architectures: 'amd64,arm64,arm/v7'
  bin_dir: '$(Build.BinariesDirectory)'
  use_rocksdb: false
  download_artifacts: true

steps:
  - task: DownloadBuildArtifacts@0
    displayName: Download artifacts
    condition: and(succeeded(), ${{ parameters.download_artifacts }})
    inputs:
      buildType: 'current'
      downloadPath: '$(Build.ArtifactStagingDirectory)'
      downloadType: 'single'
      artifactName: 'consolidated_artifacts'
      extractTars: true

  - task: CopyFiles@2
    displayName: Copy artifacts
    condition: and(succeeded(), ${{ parameters.download_artifacts }})
    inputs:
      sourceFolder: '$(Agent.TempDirectory)/extracted_tars/consolidated_artifacts'
      contents: '**'
      targetFolder: '$(Build.BinariesDirectory)/publish'          

  - task: CopyFiles@2
    displayName: Copy RocksDB libs into project
    condition: and(succeeded(), eq('${{ parameters.use_rocksdb }}', 'true'))
    inputs:
      sourceFolder: '$(Build.BinariesDirectory)/publish/librocksdb'
      contents: '**'
      targetFolder: '$(Build.BinariesDirectory)/publish/${{ parameters.project }}/librocksdb'          

  - task: Docker@2
    displayName: Docker login - CI
    inputs:
      command: login
      containerRegistry: iotedge-edgebuilds-acr

  - task: Docker@2
    displayName: Docker login - Release
    inputs:
      command: login
      containerRegistry: $(service-connection.registry.release)

  - script: |
      scripts/linux/buildImage.sh \
        -r "$(registry.address)" \
        -i "${{ parameters.imageName }}" \
        -n "${{ parameters.namespace }}" \
        -P "${{ parameters.project }}" \
        -v "${{ parameters.version }}" \
        -a "${{ parameters.architectures }}"
        --bin-dir "${{ parameters.bin_dir }}" \
        --source-map /etc/iotedge-source-map.json
    displayName: Build Image - ${{ parameters.name }}
