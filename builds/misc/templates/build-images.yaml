parameters:
  - name: 'E2EBuild'
    type: boolean
    default: false

stages:

################################################################################
  - stage: CheckBuildImages
################################################################################
    displayName: Check For Source Code Changes
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: []
    jobs:
      - job: check_source_change_runtime
        displayName: Check Source Changes Edgelet (changes are outside of test or doc folders)
        steps:
          - bash: |
              git log -m -1 --name-only --first-parent --pretty="" | egrep -i -v '^(test/Microsoft.Azure.Devices.Edge.Test|doc|edgelet)'
              if [[ $? == 0 ]]; then
                echo "Detected changes outside of Test Folders"
                echo "##vso[task.setvariable variable=RUNTIMECHANGES;isOutput=true]TRUE"
              fi
            displayName: Check changes in runtime sources
            name: check_files

# This stage builds Rocks DB and adds the files to staging directory
################################################################################
  - stage: BuildRocksDb
################################################################################
    displayName: Build RocksDB
    dependsOn: CheckBuildImages
    jobs:
      - template: build-rocksdb.yaml

################################################################################
  - stage: BuildExecutables
################################################################################
    displayName: Build Executables
    condition: |
      or
        (
          eq(${{ parameters['E2EBuild'] }}, false),
          eq(dependencies.CheckBuildImages.outputs['check_source_change_runtime.check_files.RUNTIMECHANGES'], 'true')
        )
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: CheckBuildImages
    jobs:
    - job: BuildDotnetComponents
      displayName: Build Dotnet Components
      steps:
      - script: |
          #!/bin/bash
          set -euo pipefail
          base_url='https://sdkprivate.blob.core.windows.net/drops'
          mkdir -p ../nuget_local
          curl -Lo \
            ../nuget_local/Microsoft.Azure.Devices.Client.1.36.7-private-001.nupkg \
            $base_url/Microsoft.Azure.Devices.Client.1.36.7-private-001.nupkg
          curl -Lo \
            ../nuget_local/Microsoft.Azure.Devices.Shared.1.27.2-private-001.nupkg \
            $base_url/Microsoft.Azure.Devices.Shared.1.27.2-private-001.nupkg
          curl -Lo \
            ../nuget_local/Microsoft.Azure.Devices.1.31.4-private-001.nupkg \
            $base_url/Microsoft.Azure.Devices.1.31.4-private-001.nupkg
          ls -al ../nuget_local

          cat > nuget.config <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear/>
              <add key="local" value="$(realpath -e ../nuget_local)" />
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
            </packageSources>
          </configuration>
          EOF
          cat nuget.config
        displayName: Download SDK package
      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
        name: build
        displayName: Build ($(Build.Configuration)) dotnet artifacts
      - bash: |
          mkdir $(Build.ArtifactStagingDirectory)/core-linux && \
          mv $(Build.BinariesDirectory)/publish/{CACertificates,e2e_deployment_files,e2e_test_files,\
          scripts,IotEdgeQuickstart*,LeafDevice*} $(Build.ArtifactStagingDirectory)/core-linux
        displayName: Move/stage test file artifacts
      - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.ArtifactStagingDirectory)/core-linux' --build-number $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'
      - task: PublishBuildArtifacts@1
        displayName: Publish core-linux artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/core-linux'
          artifactName: 'core-linux'
      - task: PublishBuildArtifacts@1
        displayName: Publish Dotnet Artifacts
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'dotnet_artifacts'
          StoreAsTar: true

    - template: build-api-proxy.yaml

# This stage consolidates .NET binaries, Rocksdb binaries and the SBOM into a
# single artifact from which all Docker images can be built.
################################################################################
  - stage: ConsolidateAndPubishArtifacts
################################################################################
    displayName: Consolidate And Publish Artifacts
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: [BuildExecutables, BuildRocksDB]
    jobs:
    - job: ConsolidateAndPublishArtifacts
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download Artifacts
        inputs:
          buildType: 'current'
          downloadPath: '$(Build.ArtifactStagingDirectory)'
          downloadType: specific
          extractTars: true

      - task: CopyFiles@2
        displayName: Copy/Stage dotnet artifacts
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/dotnet_artifacts'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (amd64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_x86_64'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (arm32)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_armv7l'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (arm64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_aarch64'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy rocksdb libs
        inputs:
          sourceFolder: '$(Build.ArtifactStagingDirectory)/librocksdb'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish/librocksdb'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          pathToPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'consolidated_artifacts'
          StoreAsTar: true

################################################################################
  - stage:  BuildImages
################################################################################
    displayName: Build Images
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: ConsolidateAndPubishArtifacts
    jobs:
    - job: BuildImageEdgeAgent
      steps:
      - template: image-linux.yaml
        parameters:
          name: Edge Agent
          imageName: azureiotedge-agent
          project: Microsoft.Azure.Devices.Edge.Agent.Service
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageEdgeHub
      steps:
      - template: image-linux.yaml
        parameters:
          name: Edge Hub
          imageName: azureiotedge-hub
          project: Microsoft.Azure.Devices.Edge.Hub.Service
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageTemperatureSensor
      steps:
      - template: image-linux.yaml
        parameters:
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor
          version: $(Build.BuildNumber)

    - job: BuildImageDiagnostics
      steps:
      - template: image-linux.yaml
        parameters:
          name: Diagnostics
          imageName: azureiotedge-diagnostics
          project: IotedgeDiagnosticsDotnet
          version: $(Build.BuildNumber)

    - job: BuildImageTemperatureFilter
      steps:
      - template: image-linux.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter
          version: $(Build.BuildNumber)

    - job: BuildImageLoadGen
      steps:
      - template: image-linux.yaml
        parameters:
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen
          version: $(Build.BuildNumber)

    - job: BuildImageTestAnalyzer
      steps:
      - template: image-linux.yaml
        parameters:
          name: Test Analyzer
          imageName: azureiotedge-analyzer
          project: TestAnalyzer
          version: $(Build.BuildNumber)
          use_rocksdb: true

      # Functions Sample - Not supported on linux arm64
    - job: BuildImageFunctionsSample
      steps:
      - template: image-linux.yaml
        parameters:
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp
          version: $(Build.BuildNumber)

    - job: BuildImageDirectMethodSender
      steps:
      - template: image-linux.yaml
        parameters:
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender
          version: $(Build.BuildNumber)

    - job: BuildImageDirectMethodReceiver
      steps:
      - template: image-linux.yaml
        parameters:
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver
          version: $(Build.BuildNumber)

    - job: BuildImageMetricsValidator
      steps:
      - template: image-linux.yaml
        parameters:
          name: Metrics Validator
          imageName: azureiotedge-metrics-validator
          project: MetricsValidator
          version: $(Build.BuildNumber)

    - job: BuildImageNumberLogger
      steps:
      - template: image-linux.yaml
        parameters:
          name: Number Logger
          imageName: azureiotedge-number-logger
          project: NumberLogger
          version: $(Build.BuildNumber)

    - job: BuildImageModuleRestarter
      steps:
      - template: image-linux.yaml
        parameters:
          name: Module Restarter
          imageName: azureiotedge-module-restarter
          project: ModuleRestarter
          version: $(Build.BuildNumber)

    - job: BuildImageTwinTester
      steps:
      - template: image-linux.yaml
        parameters:
          name: TwinTester
          imageName: azureiotedge-twin-tester
          project: TwinTester
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageRelayer
      steps:
      - template: image-linux.yaml
        parameters:
          name: Relayer
          imageName: azureiotedge-relayer
          project: Relayer
          version: $(Build.BuildNumber)

    - job: BuildImageNetworkController
      steps:
      - template: image-linux.yaml
        parameters:
          name: Network Controller
          imageName: azureiotedge-network-controller
          project: NetworkController
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageTestResultCoordinator
      steps:
      - template: image-linux.yaml
        parameters:
          name: TestResultCoordinator
          imageName: azureiotedge-test-result-coordinator
          project: TestResultCoordinator
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageTestMetricsCollector
      steps:
      - template: image-linux.yaml
        parameters:
          name: Test Metrics Collector
          imageName: azureiotedge-test-metrics-collector
          project: TestMetricsCollector
          version: $(Build.BuildNumber)

    - job: BuildImageDeploymentTester
      steps:
      - template: image-linux.yaml
        parameters:
          name: DeploymentTester
          imageName: azureiotedge-deployment-tester
          project: DeploymentTester
          version: $(Build.BuildNumber)

    - job: BuildImageEdgeHubRestartTester
      steps:
      - template: image-linux.yaml
        parameters:
          name: EdgeHubRestartTester
          imageName: azureiotedge-edgehub-restart-tester
          project: EdgeHubRestartTester
          version: $(Build.BuildNumber)

    - job: BuildImageCloudToDeviceMessageTester
      steps:
      - template: image-linux.yaml
        parameters:
          name: Cloud To Device Message Tester
          imageName: azureiotedge-c2dmessage-tester
          project: CloudToDeviceMessageTester
          version: $(Build.BuildNumber)

    - job: BuildImageApiProxy
      steps:
      - template: image-linux.yaml
        parameters:
          name: API Proxy
          imageName: azureiotedge-api-proxy
          project: api-proxy-module
          version: $(Build.BuildNumber)

################################################################################
  - stage: PublishManifests
################################################################################
    displayName: Publish Manifests
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: BuildImages
    variables:
      tags: '["latest"]'
    jobs:
    - job: PublishManifest
      displayName: Publish Manifest
      strategy:
        matrix:
          EdgeAgent:
            imageName: 'azureiotedge-agent'
          EdgeHub:
            imageName: 'azureiotedge-hub'
          SimulatedTemperatureSensor:
            imageName: 'azureiotedge-simulated-temperature-sensor'
          Diagnostics:
            imageName: 'azureiotedge-diagnostics'
          ApiProxy:
            imageName: 'azureiotedge-api-proxy'
      steps:
      - task: Docker@2
        displayName: Docker login edgebuilds
        inputs:
          command: login
          containerRegistry: iotedge-edgebuilds-acr

      - script: |
          scripts/linux/buildManifest.sh \
            -r $(registry.address) \
            -i $(imageName) \
            -v $(Build.BuildNumber) \
            -n 'microsoft' \
            --tags '$(tags)'
        displayName: Create manifest for '$(imageName)'

    - job: ComponentGovernance
      steps:
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm64v8'
