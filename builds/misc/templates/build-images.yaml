parameters:
  - name: 'E2EBuild'
    type: boolean
    default: false

stages:

  ################################################################################
  - stage: CheckBuildImages
  ################################################################################
    displayName: Check For Source Code Changes
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: []
    jobs:
      - job: check_source_change_runtime
        displayName: Check Source Changes Edgelet (changes are outside of test or doc folders)
        steps:
          - bash: |
              git log -m -1 --name-only --first-parent --pretty="" | egrep -i -v '^(test/Microsoft.Azure.Devices.Edge.Test|doc|edgelet)'
              if [[ $? == 0 ]]; then
                echo "Detected changes outside of Test Folders"
                echo "##vso[task.setvariable variable=RUNTIMECHANGES;isOutput=true]TRUE"
              fi
            displayName: Check changes in runtime sources
            name: check_files

# This stage builds Rocks DB and adds the files to staging directory
################################################################################
  - template: build-rocksdb.yaml
    parameters:
      dependency: [ CheckBuildImages ]
################################################################################

################################################################################
  - stage: BuildExecutables
  ################################################################################
    displayName: Build Excecutables
    condition: |
      or
        (
          eq(${{ parameters['E2EBuild'] }}, false), 
          eq(dependencies.CheckBuildImages.outputs['check_source_change_runtime.check_files.RUNTIMECHANGES'], 'true')
        )
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker  
    dependsOn: CheckBuildImages
    jobs:
    - job: BuildDotnetComponents
      displayName: Build Dotnet Components
      steps:
      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
        name: build
        displayName: Build ($(Build.Configuration)) dotnet artifacts
      - bash: |
          mkdir $(Build.ArtifactStagingDirectory)/core-linux && \
          mv $(Build.BinariesDirectory)/publish/{CACertificates,e2e_deployment_files,e2e_test_files,\
          scripts,IotEdgeQuickstart*,LeafDevice*} $(Build.ArtifactStagingDirectory)/core-linux
        displayName: Move/stage test file artifacts
      - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.ArtifactStagingDirectory)/core-linux' --build-number $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'         
      - task: PublishBuildArtifacts@1
        displayName: Publish core-linux artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/core-linux'
          artifactName: 'core-linux'
      - task: PublishBuildArtifacts@1
        displayName: Publish Dotnet Artifacts
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'dotnet_artifacts'
          StoreAsTar: true
  
    - template: build-broker-watchdog.yaml
  
    - template: build-api-proxy.yaml
  
    - template: rust-test-module-build.yaml
      parameters:
        module.path: 'test/modules/generic-mqtt-tester'
        module.name: 'generic-mqtt-tester'   
  
    # This stage first downloads the dotnet and rust artifacts from the previous stage, then
    # copies the mqtt and watchdog artifacts into the appropriate directories 
    # required by consolidate-build-artifacts.sh. It then runs consolidate-build-artifacts.sh,
    # which moves the EH dockerfile, edge-hub executable, watchdog executable, and mqttd
    # executable into the appropriate directories for later building the edge-hub image in the 
    # 'Build Images' stage of this pipeline.  Finally, this stage consolidates the aforementioned
    # EH artifacts with the other dotnet artifacts and publishes them all in an artifact named
    # 'consolidated_artifacts'.      
  ################################################################################
  - stage: ConsolidateAndPubishArtifacts
  ################################################################################
    displayName: Consolidate And Publish artifacts
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker  
    dependsOn: [BuildExecutables, BuildRocksDB]
    jobs:
    - job: ConsolidateAndPublishArtifacts
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download Artifacts
        inputs:
          buildType: 'current'
          downloadPath: '$(Build.ArtifactStagingDirectory)'
          downloadType: specific
          extractTars: true
  
      - task: CopyFiles@2
        displayName: Copy mqttd (amd64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/mqttd_amd64'
          contents: 'mqttd'
          targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/x86_64-unknown-linux-musl/release'   
  
      - task: CopyFiles@2
        displayName: Copy mqttd (arm32)    
        inputs:  
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/mqttd_arm32'        
          contents: 'mqttd'
          targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/armv7-unknown-linux-gnueabihf/release'
  
      - task: CopyFiles@2
        displayName: Copy mqttd (arm64)    
        inputs:    
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/mqttd_arm64'              
          contents: 'mqttd'
          targetFolder: '$(Build.ArtifactStagingDirectory)/mqtt/target/aarch64-unknown-linux-gnu/release'
  
      - task: CopyFiles@2
        displayName: Copy watchdog (amd64)    
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/watchdog_amd64'              
          contents: 'watchdog'
          targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/x86_64-unknown-linux-musl/release'
  
      - task: CopyFiles@2
        displayName: Copy watchdog (arm32)    
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/watchdog_arm32'              
          contents: 'watchdog'
          targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/armv7-unknown-linux-gnueabihf/release'
  
      - task: CopyFiles@2
        displayName: Copy watchdog (arm64)    
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/watchdog_arm64'              
          contents: 'watchdog'
          targetFolder: '$(Build.ArtifactStagingDirectory)/edge-hub/watchdog/target/aarch64-unknown-linux-gnu/release'                             
      - script: scripts/linux/consolidate-build-artifacts.sh --dotnet-artifacts-source-dir '$(Agent.TempDirectory)/extracted_tars/dotnet_artifacts' --rust-artifacts-source-dir '$(Build.ArtifactStagingDirectory)' --dest-dir '$(Build.BinariesDirectory)/publish' --artifact-name 'edge-hub'
        displayName: Consolidate Edge Hub Artifacts
      
      # TODO: Consider moving the following copies into consolidate-build-artifacts.sh
      - task: CopyFiles@2
        displayName: Copy/Stage dotnet artifacts
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/dotnet_artifacts'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'
  
      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (amd64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_x86_64'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'       
          
      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (arm32)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_armv7l'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'    
          
      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (arm64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_aarch64'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'         

      - task: CopyFiles@2
        displayName: Copy rocksdb libs
        inputs:
          sourceFolder: '$(Build.ArtifactStagingDirectory)/librocksdb'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish/librocksdb' 

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          pathToPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'consolidated_artifacts'
          StoreAsTar: true
  
  ################################################################################
  - stage:  BuildImages
  ################################################################################
    displayName: Build Images
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: ConsolidateAndPubishArtifacts
    jobs:
    - job: BuildImageEdgeAgent
      steps:
      - template: image-linux.yaml
        parameters:
            name: Edge Agent
            imageName: azureiotedge-agent
            project: Microsoft.Azure.Devices.Edge.Agent.Service
            bin_dir: '$(Build.BinariesDirectory)'
            buildx_flag: 'true'
            use_rocksdb: true

    - job: BuildImageEdgeHub
      steps:
      - template: image-linux.yaml
        parameters:            
          name: Edge Hub
          imageName: azureiotedge-hub
          project: edge-hub
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
          use_rocksdb: true

    - job: BuildImageTemperatureSensor
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Temperature Sensor
          imageName: azureiotedge-simulated-temperature-sensor
          project: SimulatedTemperatureSensor
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'

    - job: BuildImageDiagnostics
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Diagnostics
          imageName: azureiotedge-diagnostics
          project: IotedgeDiagnosticsDotnet
          bin_dir: '$(Build.BinariesDirectory)'   
          buildx_flag: 'true'

    - job: BuildImageTemperatureFilter
      steps:
      - template: image-linux.yaml
        parameters:
          name: Temperature Filter
          imageName: azureiotedge-temperature-filter
          project: TemperatureFilter
          bin_dir: '$(Build.BinariesDirectory)'    
          buildx_flag: 'true'

    - job: BuildImageLoadGen
      steps:
      - template: image-linux.yaml
        parameters:            
          name: Load Gen
          imageName: azureiotedge-load-gen
          project: load-gen
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
    - job: BuildImageTestAnalyzer
      steps:
      - template: image-linux.yaml
        parameters:
          name: Test Analyzer
          imageName: azureiotedge-analyzer
          project: TestAnalyzer
          bin_dir: '$(Build.BinariesDirectory)' 
          use_rocksdb: true
          buildx_flag: 'true'

      # Functions Sample - Not supported on linux arm64
    - job: BuildImageFunctionsSample
      steps:
      - template: image-linux.yaml
        parameters:      
          name: Functions Sample
          imageName: azureiotedge-functions-filter
          project: EdgeHubTriggerCSharp
          bin_dir: '$(Build.BinariesDirectory)'      
  
    - job: BuildImageDirectMethodSender
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Direct Method Sender
          imageName: azureiotedge-direct-method-sender
          project: DirectMethodSender
          bin_dir: '$(Build.BinariesDirectory)'      
          buildx_flag: 'true'

    - job: BuildImageDirectMethodReceiver
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Direct Method Receiver
          imageName: azureiotedge-direct-method-receiver
          project: DirectMethodReceiver
          bin_dir: '$(Build.BinariesDirectory)'      
          buildx_flag: 'true'

    - job: BuildImageMetricsValidator
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Metrics Validator
          imageName: azureiotedge-metrics-validator
          project: MetricsValidator
          bin_dir: '$(Build.BinariesDirectory)'   
          buildx_flag: 'true'
    - job: BuildImageNumberLogger
      steps:
      - template: image-linux.yaml
        parameters:
          name: Number Logger
          imageName: azureiotedge-number-logger
          project: NumberLogger
          bin_dir: '$(Build.BinariesDirectory)'      
          buildx_flag: 'true'

    - job: BuildImageModuleRestarter
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Module Restarter
          imageName: azureiotedge-module-restarter
          project: ModuleRestarter
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'   
    - job: BuildImageTwinTester
      steps:
      - template: image-linux.yaml
        parameters:            
          name: TwinTester
          imageName: azureiotedge-twin-tester
          project: TwinTester
          bin_dir: '$(Build.BinariesDirectory)'  
          buildx_flag: 'true'   
          use_rocksdb: true    
    - job: BuildImageRelayer
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Relayer
          imageName: azureiotedge-relayer
          project: Relayer
          bin_dir: '$(Build.BinariesDirectory)'   
          buildx_flag: 'true'   

    - job: BuildImageNetworkController
      steps:
      - template: image-linux.yaml
        parameters:          
          name: Network Controller
          imageName: azureiotedge-network-controller
          project: NetworkController
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
          use_rocksdb: true    

    - job: BuildImageTestResultCoordinator
      steps:
      - template: image-linux.yaml
        parameters:           
          name: TestResultCoordinator
          imageName: azureiotedge-test-result-coordinator
          project: TestResultCoordinator
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
          use_rocksdb: true  

    - job: BuildImageTestMetricsCollector
      steps:
      - template: image-linux.yaml
        parameters:           
          name: Test Metrics Collector
          imageName: azureiotedge-test-metrics-collector
          project: TestMetricsCollector
          bin_dir: '$(Build.BinariesDirectory)'   
          buildx_flag: 'true'


    - job: BuildImageDeploymentTester
      steps:
      - template: image-linux.yaml
        parameters:             
          name: DeploymentTester
          imageName: azureiotedge-deployment-tester
          project: DeploymentTester
          bin_dir: '$(Build.BinariesDirectory)' 
          buildx_flag: 'true'
   

    - job: BuildImageEdgeHubRestartTester
      steps:
      - template: image-linux.yaml
        parameters:          
          name: EdgeHubRestartTester
          imageName: azureiotedge-edgehub-restart-tester
          project: EdgeHubRestartTester
          bin_dir: '$(Build.BinariesDirectory)'   
          buildx_flag: 'true'

    - job: BuildImageCloudToDeviceMessageTester
      steps:
      - template: image-linux.yaml
        parameters:             
          name: Cloud To Device Message Tester
          imageName: azureiotedge-c2dmessage-tester
          project: CloudToDeviceMessageTester     
          bin_dir: '$(Build.BinariesDirectory)'
          buildx_flag: 'true'
          
    - job: BuildImageApiProxy
      steps:
      - bash: |
          sudo apt-get update && sudo apt-get -y install qemu binfmt-support qemu-user-static && \
          docker -v
      - template: image-linux.yaml
        parameters:
          name: API Proxy
          imageName: azureiotedge-api-proxy
          project: api-proxy-module
          buildx_flag: false
          bin_dir: '$(Build.BinariesDirectory)'        
          
    # Rust test modules
    - job: BuildRustImage
      displayName: Build Rust Image
      strategy:
        matrix:
          GenericMqttTester:
            moduleName: generic-mqtt-tester
            modulePath: test/modules/generic-mqtt-tester
      steps:
      - template: rust-test-module-images.yaml
        parameters:
          module.name: $(moduleName)        
          module.path: $(modulePath)
  
  ################################################################################
  - stage: PublishManifests
  ################################################################################
    displayName: Publish Manifests
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: BuildImages
    variables:
      tags: "['latest']"
    jobs:
    - job: PublishManifest
      displayName: Publish Manifest
      strategy:
        matrix:
          EdgeAgent:
            manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-agent/docker/manifest.yaml.template'
          EdgeHub:
            manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-hub/docker/manifest.yaml.template'
          SimulatedTemperatureSensor:
             manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/SimulatedTemperatureSensor/docker/manifest.yaml.template'
          Diagnostics:
             manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/iotedge-diagnostics-dotnet/docker/manifest.yaml.template'
          ApiProxy:
             manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/api-proxy-module/docker/manifest.yaml.template'
      steps:
      - task: Docker@2
        displayName: Docker login edgebuilds
        inputs:
          command: login
          containerRegistry: iotedge-edgebuilds-acr
  
      - script: scripts/linux/buildManifest.sh -r $(registry.address) -v $(Build.BuildNumber) -t $(manifestFilePath) -n microsoft --tags "$(tags)"
  
    - job: ComponentGovernance
      steps:
      - task: ComponentGovernanceComponentDetection@0
        inputs:
          dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm64v8'  
