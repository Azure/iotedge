parameters:
  - name: 'E2EBuild'
    type: boolean
    default: false

stages:

################################################################################
  - stage: CheckBuildImages
################################################################################
    displayName: Check For Source Code Changes
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: []
    jobs:
      - job: check_source_change_runtime
        displayName: Check Source Changes Edgelet (changes are outside of test or doc folders)
        steps:
          - bash: |
              git log -m -1 --name-only --first-parent --pretty="" | egrep -i -v '^(test/Microsoft.Azure.Devices.Edge.Test|doc|edgelet)'
              if [[ $? == 0 ]]; then
                echo "Detected changes outside of Test Folders"
                echo "##vso[task.setvariable variable=RUNTIMECHANGES;isOutput=true]TRUE"
              fi
            displayName: Check changes in runtime sources
            name: check_files

# This stage builds Rocks DB and adds the files to staging directory
################################################################################
  - stage: BuildRocksDb
################################################################################
    displayName: Build RocksDB
    dependsOn: CheckBuildImages
    jobs:
      - template: build-rocksdb.yaml

################################################################################
  - stage: BuildExecutables
################################################################################
    displayName: Build Executables
    condition: |
      or
        (
          eq(${{ parameters['E2EBuild'] }}, false),
          eq(dependencies.CheckBuildImages.outputs['check_source_change_runtime.check_files.RUNTIMECHANGES'], 'true')
        )
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: CheckBuildImages
    jobs:
    - job: BuildDotnetComponents
      displayName: Build Dotnet Components
      steps:
      - script: scripts/linux/buildBranch.sh -c $(Build.Configuration) --no-rocksdb-bin
        name: build
        displayName: Build ($(Build.Configuration)) dotnet artifacts
      - bash: |
          mkdir $(Build.ArtifactStagingDirectory)/core-linux && \
          mv $(Build.BinariesDirectory)/publish/{CACertificates,e2e_deployment_files,e2e_test_files,\
          scripts,IotEdgeQuickstart*,LeafDevice*} $(Build.ArtifactStagingDirectory)/core-linux
        displayName: Move/stage test file artifacts
      - script: scripts/linux/createArtifactInfo.sh --output-folder '$(Build.ArtifactStagingDirectory)/core-linux' --build-number $(Build.BuildNumber)
        displayName: 'Create Artifact Info File'
      - task: PublishBuildArtifacts@1
        displayName: Publish core-linux artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/core-linux'
          artifactName: 'core-linux'
      - task: PublishBuildArtifacts@1
        displayName: Publish Dotnet Artifacts
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'dotnet_artifacts'
          StoreAsTar: true

    - template: build-api-proxy.yaml

# This stage consolidates .NET binaries, Rocksdb binaries and the SBOM into a
# single artifact from which all Docker images can be built.
################################################################################
  - stage: ConsolidateAndPubishArtifacts
################################################################################
    displayName: Consolidate And Publish Artifacts
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: [BuildExecutables, BuildRocksDB]
    jobs:
    - job: ConsolidateAndPublishArtifacts
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: Download Artifacts
        inputs:
          buildType: 'current'
          downloadPath: '$(Build.ArtifactStagingDirectory)'
          downloadType: specific
          extractTars: true

      - task: CopyFiles@2
        displayName: Copy/Stage dotnet artifacts
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/dotnet_artifacts'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (amd64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_x86_64'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (arm32)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_armv7l'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy API Proxy Artifacts (arm64)
        inputs:
          sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_aarch64'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish'

      - task: CopyFiles@2
        displayName: Copy rocksdb libs
        inputs:
          sourceFolder: '$(Build.ArtifactStagingDirectory)/librocksdb'
          contents: '**'
          targetFolder: '$(Build.BinariesDirectory)/publish/librocksdb'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          pathToPublish: '$(Build.BinariesDirectory)/publish'
          artifactName: 'consolidated_artifacts'
          StoreAsTar: true

################################################################################
  - stage:  BuildImages
################################################################################
    displayName: Build Images
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
    dependsOn: ConsolidateAndPubishArtifacts
    jobs:

    # Product images
    - job: BuildImageEdgeAgent
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Edge Agent
          name: azureiotedge-agent
          app: Microsoft.Azure.Devices.Edge.Agent.Service
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageEdgeHub
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Edge Hub
          name: azureiotedge-hub
          app: Microsoft.Azure.Devices.Edge.Hub.Service
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageTemperatureSensor
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Temperature Sensor
          name: azureiotedge-simulated-temperature-sensor
          app: SimulatedTemperatureSensor
          version: $(Build.BuildNumber)

    - job: BuildImageDiagnostics
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Diagnostics
          name: azureiotedge-diagnostics
          app: IotedgeDiagnosticsDotnet
          version: $(Build.BuildNumber)

    - job: BuildImageApiProxy
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: API Proxy
          name: azureiotedge-api-proxy
          app: api-proxy-module
          version: $(Build.BuildNumber)

      - task: ComponentGovernanceComponentDetection@0
        inputs:
          dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(Build.BuildNumber)-linux-arm64v8'

    # Test images
    - job: BuildImageTemperatureFilter
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Temperature Filter
          name: azureiotedge-temperature-filter
          app: TemperatureFilter
          version: $(Build.BuildNumber)

    - job: BuildImageLoadGen
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Load Gen
          name: azureiotedge-load-gen
          app: load-gen
          version: $(Build.BuildNumber)

    - job: BuildImageTestAnalyzer
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Test Analyzer
          name: azureiotedge-analyzer
          app: TestAnalyzer
          version: $(Build.BuildNumber)
          use_rocksdb: true

      # Functions Sample - Only supported on amd64
    - job: BuildImageFunctionsSample
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Functions Sample
          name: azureiotedge-functions-filter
          app: EdgeHubTriggerCSharp
          platforms: linux/amd64
          version: $(Build.BuildNumber)

    - job: BuildImageDirectMethodSender
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Direct Method Sender
          name: azureiotedge-direct-method-sender
          app: DirectMethodSender
          version: $(Build.BuildNumber)

    - job: BuildImageDirectMethodReceiver
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Direct Method Receiver
          name: azureiotedge-direct-method-receiver
          app: DirectMethodReceiver
          version: $(Build.BuildNumber)

    - job: BuildImageMetricsValidator
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Metrics Validator
          name: azureiotedge-metrics-validator
          app: MetricsValidator
          version: $(Build.BuildNumber)

    - job: BuildImageNumberLogger
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Number Logger
          name: azureiotedge-number-logger
          app: NumberLogger
          version: $(Build.BuildNumber)

    - job: BuildImageModuleRestarter
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Module Restarter
          name: azureiotedge-module-restarter
          app: ModuleRestarter
          version: $(Build.BuildNumber)

    - job: BuildImageTwinTester
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: TwinTester
          name: azureiotedge-twin-tester
          app: TwinTester
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageRelayer
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Relayer
          name: azureiotedge-relayer
          app: Relayer
          version: $(Build.BuildNumber)

    - job: BuildImageNetworkController
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Network Controller
          name: azureiotedge-network-controller
          app: NetworkController
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageTestResultCoordinator
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: TestResultCoordinator
          name: azureiotedge-test-result-coordinator
          app: TestResultCoordinator
          version: $(Build.BuildNumber)
          use_rocksdb: true

    - job: BuildImageTestMetricsCollector
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Test Metrics Collector
          name: azureiotedge-test-metrics-collector
          app: TestMetricsCollector
          version: $(Build.BuildNumber)

    - job: BuildImageDeploymentTester
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: DeploymentTester
          name: azureiotedge-deployment-tester
          app: DeploymentTester
          version: $(Build.BuildNumber)

    - job: BuildImageEdgeHubRestartTester
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: EdgeHubRestartTester
          name: azureiotedge-edgehub-restart-tester
          app: EdgeHubRestartTester
          version: $(Build.BuildNumber)

    - job: BuildImageCloudToDeviceMessageTester
      steps:
      - template: image-linux.yaml
        parameters:
          displayName: Cloud To Device Message Tester
          name: azureiotedge-c2dmessage-tester
          app: CloudToDeviceMessageTester
          version: $(Build.BuildNumber)
