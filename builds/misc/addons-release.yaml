name: $(version)

variables:
  NugetSecurityAnalysisWarningLevel: warn

stages:
################################################################################
- stage: BuildExecutables
################################################################################
  displayName: Build Excecutables
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker  
  dependsOn: []
  jobs:
  # Build API Proxy executable
  - template: templates/build-api-proxy.yaml

# TODO: Consider removing this consolidate stage, which is here mostly for
# consistency with images.yaml and images-release.yaml.
################################################################################
- stage: ConsolidateAndPubishArtifacts
################################################################################
  displayName: Consolidate And Publish Artifacts
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker  
  dependsOn: BuildExecutables
  jobs:
  - job: ConsolidateAndPublishArtifacts
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download Artifacts
      inputs:
        buildType: 'current'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
        downloadType: specific
        extractTars: true

    - task: CopyFiles@2
      displayName: Copy API Proxy Artifacts (amd64)
      inputs:
        sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_x86_64'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'       

    - task: CopyFiles@2
      displayName: Copy API Proxy Artifacts (arm32)
      inputs:
        sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_armv7l'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'    

    - task: CopyFiles@2
      displayName: Copy API Proxy Artifacts (arm64)
      inputs:
        sourceFolder: '$(Agent.TempDirectory)/extracted_tars/api_proxy_aarch64'
        contents: '**'
        targetFolder: '$(Build.BinariesDirectory)/publish'
        
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'SBOM Generation Task'
      inputs:
          BuildDropPath: '$(Build.BinariesDirectory)/publish'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        pathToPublish: '$(Build.BinariesDirectory)/publish'
        artifactName: 'consolidated_artifacts'
        StoreAsTar: true

################################################################################
- stage:  BuildImages
################################################################################
  displayName: Build Images
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
  dependsOn: ConsolidateAndPubishArtifacts
  jobs:
  - job: BuildImageApiProxy
    steps:
    - bash: |
        if [ -z '$(version)' ]; then
          echo '##vso[task.setvariable variable=buildVersion]$(Build.BuildNumber)'
        else
          echo '##vso[task.setvariable variable=buildVersion]$(version)'
        fi
        sudo apt-get update && sudo apt-get -y install qemu binfmt-support qemu-user-static && \
        docker -v
      displayName: 'Set build version'
    - template: templates/image-linux.yaml
      parameters:
        name: API Proxy
        imageName: azureiotedge-api-proxy
        project: api-proxy-module
        buildx_flag: false
        version: $(buildVersion)
        bin_dir: '$(Build.BinariesDirectory)'      

################################################################################
- stage: PublishManifests
################################################################################
  displayName: Publish Manifests
  pool:
    name: $(pool.linux.name)
    demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker
  dependsOn: BuildImages
  jobs:
  - job: PublishManifest
    displayName: Publish Manifest
    strategy:
      matrix:
        ApiProxy:
           manifestFilePath: '$(System.DefaultWorkingDirectory)/edge-modules/api-proxy-module/docker/manifest.yaml.template'
    steps:
    # Both docker logins needed for if we need to test this job. In this case images should go to edgebuilds.
    - task: Docker@2
      displayName: Docker login edgebuilds
      inputs:
        command: login
        containerRegistry: iotedge-edgebuilds-acr
    - task: Docker@2
      displayName: Docker login edgerelease
      inputs:
        command: login
        containerRegistry: iotedge-release-acr
    - bash: |
        if [ -z '$(version)' ]; then
          echo '##vso[task.setvariable variable=buildVersion]$(Build.BuildNumber)'
        else
          echo '##vso[task.setvariable variable=buildVersion]$(version)'
        fi
      displayName: 'Set build version'     
    - script: scripts/linux/buildManifest.sh -r $(registry.address) -v $(buildVersion) -t $(manifestFilePath) -n microsoft --tags "$(tags)"

  - job: ComponentGovernance
    steps:
    - bash: |
        if [ -z '$(version)' ]; then
          echo '##vso[task.setvariable variable=buildVersion]$(Build.BuildNumber)'
        else
          echo '##vso[task.setvariable variable=buildVersion]$(version)'
        fi
      displayName: 'Set build version'        
    - task: ComponentGovernanceComponentDetection@0
      inputs:
        dockerImagesToScan: '$(registry.address)/microsoft/azureiotedge-api-proxy:$(buildVersion)-linux-amd64,$(registry.address)/microsoft/azureiotedge-api-proxy:$(buildVersion)-linux-arm32v7,$(registry.address)/microsoft/azureiotedge-api-proxy:$(buildVersion)-linux-arm64v8'
