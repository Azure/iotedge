trigger: none 
pr: none

variables:
  images.artifact.name.linux: 'core-linux'
  images.artifact.name.windows: 'core-windows'
  vsts.project: $(System.TeamProjectId)
  # Variable defined in VSTS
  #azure.keyVault: ''
  #azure.subscription: ''
  #edgelet.package.build: <edglet package build id>
  #images.build: <images build id>
  #pool.name: ''
  #container.registry: ''
  #snitch.storage.account: ''
  #analyzer.logAnalytics.enabled
  #analyzer.logAnalytics.logType
  # Variables settable at queue time
  #edgelet.package.branchName
  #images.branchName
  #loadGen.message.frequency.amd64: 'xx:xx:xx.xx'
  #loadGen.message.frequency.arm32v7: 'xx:xx:xx.xx'
  #loadGen.message.frequency.arm64v8: 'xx:xx:xx.xx'
  #run.linux.amd64.moby: 'true/false'
  #run.linux.arm32v7.moby: 'true/false'
  #run.linux.arm64v8.docker: 'true/false'
  #run.windows.amd64.moby: 'true/false'
  #snitch.build.number: '1.1'
  #twinTester.twinUpdateSize: ''
  #twinTester.twinUpdateFrequency: 'xx:xx:xx.xx' 
  #twinTester.twinUpdateFailureThreshold: 'xx:xx:xx.xx'
  #metricsCollector.metricsEndpointsCSV
  #metricsCollector.scrapeFrequencyInSecs: 'xx:xx:xx.xx'
  #metricsCollector.uploadTarget

jobs:
################################################################################
  - job: linux_amd64_moby
################################################################################
    displayName: Linux AMD64 Moby
    condition: eq(variables['run.linux.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-stress -equals true
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu16.04-amd64'
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-x64.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st$(agent.group)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'
          analyzer.consumerGroupId: 'stress_linux_amd64'
          analyzer.logAnalytics.enabled: '$(analyzer.logAnalytics.enabled)'
          analyzer.logAnalytics.logType: '$(analyzer.logAnalytics.logType)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_amd64_moby'

################################################################################
  - job: linux_arm32v7_moby
################################################################################
    displayName: Linux ARM32v7 Moby
    condition: eq(variables['run.linux.arm32v7.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - run-stress -equals true
        - agent-osbits -equals 32
    variables:
      edgelet.artifact.name: 'iotedged-debian9-arm32v7'
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-arm.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st$(agent.group)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: $(loadGen.message.frequency.arm32v7)
          analyzer.consumerGroupId: 'stress_linux_arm32v7'
          analyzer.logAnalytics.enabled: '$(analyzer.logAnalytics.enabled)'
          analyzer.logAnalytics.logType: '$(analyzer.logAnalytics.logType)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm32v7_moby'

################################################################################
  - job: linux_arm64v8_docker
################################################################################
    displayName: Linux ARM64v8 Docker
    condition: eq(variables['run.linux.arm64v8.docker'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - run-stress -equals true
        - agent-osbits -equals 64
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu18.04-aarch64'
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-arm64.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st$(agent.group)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: $(loadGen.message.frequency.arm64v8)
          analyzer.consumerGroupId: 'stress_linux_arm64v8'
          analyzer.logAnalytics.enabled: '$(analyzer.logAnalytics.enabled)'
          analyzer.logAnalytics.logType: '$(analyzer.logAnalytics.logType)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm64v8_docker'

################################################################################
  - job: windows_amd64_moby
################################################################################
    displayName: Windows AMD64 Moby
    condition: eq(variables['run.windows.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Windows_NT
        - Agent.OSArchitecture -equals X64
        - agent-os-name -equals WinPro_x64
        - run-stress -equals true
    variables:
      edgelet.artifact.name: 'iotedged-windows'
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.windows)
          itemPattern: |
            $(images.artifact.name.windows)/IotEdgeQuickstart/x64/*
            $(images.artifact.name.windows)/e2e_deployment_files/stress_deployment.template.windows.json
            $(images.artifact.name.windows)/scripts/windows/setup/IotEdgeSecurityDaemon.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Run-E2ETest.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Setup-Env.ps1
            $(images.artifact.name.windows)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy-windows.yaml
        parameters:
          release.label: 'winpro-st$(agent.group)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.windows)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'
          analyzer.consumerGroupId: 'stress_windows_amd64'
          analyzer.logAnalytics.enabled: '$(analyzer.logAnalytics.enabled)'
          analyzer.logAnalytics.logType: '$(analyzer.logAnalytics.logType)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'windows_amd64_moby'

################################################################################
  - job: windows_servercore_amd64_moby
################################################################################
    displayName: Windows Server Core AMD64 Moby
    condition: eq(variables['run.servercore.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Windows_NT
        - Agent.OSArchitecture -equals X64
        - agent-os-name -equals WinServerCore_x64
        - run-stress -equals true
    variables:
      edgelet.artifact.name: 'iotedged-windows'
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.windows)
          itemPattern: |
            $(images.artifact.name.windows)/IotEdgeQuickstart/x64/*
            $(images.artifact.name.windows)/e2e_deployment_files/stress_deployment.template.windows.json
            $(images.artifact.name.windows)/scripts/windows/setup/IotEdgeSecurityDaemon.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Run-E2ETest.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Setup-Env.ps1
            $(images.artifact.name.windows)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy-windows.yaml
        parameters:
          release.label: 'servercore-st$(agent.group)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.windows)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'
          analyzer.consumerGroupId: 'stress_windows_servercore_amd64'
          analyzer.logAnalytics.enabled: '$(analyzer.logAnalytics.enabled)'
          analyzer.logAnalytics.logType: '$(analyzer.logAnalytics.logType)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'windows_servercore_amd64_moby'

################################################################################
  - job: iotuap_amd64_moby
################################################################################
    displayName: Windows IoT Core AMD64 Moby
    condition: eq(variables['run.iotuap.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - run-stress -equals true
        - runner-os-name -equals WinIoTCore_x64
    variables:
      edgelet.artifact.name: 'iotedged-windows'
    steps:
      - checkout: none
      - task: AzureKeyVault@1
        displayName: 'Access Key Vault Secrets'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.windows)
          itemPattern: |
            $(images.artifact.name.windows)/IotEdgeQuickstart/x64/*
            $(images.artifact.name.windows)/e2e_deployment_files/stress_deployment.template.windows.json
            $(images.artifact.name.windows)/scripts/windows/setup/IotEdgeSecurityDaemon.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Run-E2ETest.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Setup-Env.ps1
            $(images.artifact.name.windows)/artifactInfo.txt
      # Deploy Stress test
      - template: templates/deploy-iotuap.yaml
        parameters:
          testName: 'Stress'
          release.label: 'iotuap-st$(agent.group)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.windows)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'
          analyzer.consumerGroupId: 'stress_iotuap_amd64'
          analyzer.logAnalytics.enabled: '$(analyzer.logAnalytics.enabled)'
          analyzer.logAnalytics.logType: '$(analyzer.logAnalytics.logType)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'iotuap_amd64_moby'
