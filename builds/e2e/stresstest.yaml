trigger: none 
pr: none

variables:
  Build.SyncSources: false
  images.artifact.name.linux: 'core-linux'
  images.artifact.name.windows: 'core-windows'
  vsts.project: $(System.TeamProjectId)
  # Variable defined in VSTS
  #azure.keyVault: ''
  #azure.subscription: ''
  #edgelet.package.build: <edglet package build id>
  #images.build: <images build id>
  #pool.name: ''
  #container.registry: ''
  #snitch.storage.account: ''
  # Variables settable at queue time
  #edgelet.package.branchName
  #images.branchName
  #loadGen.message.frequency.amd64: 'xx:xx:xx.xx'
  #loadGen.message.frequency.arm32v7: 'xx:xx:xx.xx'
  #loadGen.message.frequency.arm64v8: 'xx:xx:xx.xx'
  #run.linux.amd64.moby: 'true/false'
  #run.linux.arm32v7.moby.amqp: 'true/false'
  #run.linux.arm32v7.moby.mqtt: 'true/false'
  #run.linux.arm64v8.docker.amqp: 'true/false'
  #run.linux.arm64v8.docker.mqtt: 'true/false'
  #run.windows.amd64.moby: 'true/false'
  #snitch.build.number: '1.1'

jobs:
################################################################################
  - job: linux_amd64_moby
################################################################################
    displayName: Linux AMD64 Moby
    condition: eq(variables['run.linux.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-stress -equals true
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu-amd64'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-x64.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'

################################################################################
  - job: linux_arm32v7_moby_amqp
################################################################################
    displayName: Linux ARM32v7 Moby AMQP
    condition: eq(variables['run.linux.arm32v7.moby.amqp'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - run-stress -equals true
        - agent-osbits -equals 32
        - test-protocol -equals amqp
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu-armhf'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-arm.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st-amqp'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          amqp.settings.enabled: 'true'
          mqtt.settings.enabled: 'false'
          loadGen.message.frequency: $(loadGen.message.frequency.arm32v7)
          loadGen1.transportType: 'Amqp_Tcp_Only'
          loadGen2.transportType: 'Amqp_WebSocket_Only'
          loadGen3.transportType: 'Amqp_Tcp_Only'
          loadGen4.transportType: 'Amqp_WebSocket_Only'

################################################################################
  - job: linux_arm32v7_moby_mqtt
################################################################################
    displayName: Linux ARM32v7 Moby MQTT
    condition: eq(variables['run.linux.arm32v7.moby.mqtt'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - run-stress -equals true
        - agent-osbits -equals 32
        - test-protocol -equals mqtt
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu-armhf'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-arm.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st-mqtt'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          amqp.settings.enabled: 'false'
          mqtt.settings.enabled: 'true'
          loadGen.message.frequency: $(loadGen.message.frequency.arm32v7)
          loadGen1.transportType: 'Mqtt_Tcp_Only'
          loadGen2.transportType: 'Mqtt_WebSocket_Only'
          loadGen3.transportType: 'Mqtt_Tcp_Only'
          loadGen4.transportType: 'Mqtt_WebSocket_Only'

################################################################################
  - job: linux_arm64v8_docker_amqp
################################################################################
    displayName: Linux ARM64v8 Dcoker AMQP
    condition: eq(variables['run.linux.arm64v8.docker.amqp'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - run-stress -equals true
        - agent-osbits -equals 64
        - test-protocol -equals amqp
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu16.04-aarch64'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-arm64.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st-amqp'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          amqp.settings.enabled: 'true'
          mqtt.settings.enabled: 'false'
          loadGen.message.frequency: $(loadGen.message.frequency.arm64v8)
          loadGen1.transportType: 'Amqp_Tcp_Only'
          loadGen2.transportType: 'Amqp_WebSocket_Only'
          loadGen3.transportType: 'Amqp_Tcp_Only'
          loadGen4.transportType: 'Amqp_WebSocket_Only'

################################################################################
  - job: linux_arm64v8_docker_mqtt
################################################################################
    displayName: Linux ARM64v8 Docker MQTT
    condition: eq(variables['run.linux.arm64v8.docker.mqtt'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - run-stress -equals true
        - agent-osbits -equals 64
        - test-protocol -equals mqtt
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu16.04-aarch64'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-arm64.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/stress_deployment.template.json
            $(images.artifact.name.linux)/scripts/linux/runE2ETest.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy.yaml
        parameters:
          release.label: 'st-mqtt'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          amqp.settings.enabled: 'false'
          mqtt.settings.enabled: 'true'
          loadGen.message.frequency: $(loadGen.message.frequency.arm64v8)
          loadGen1.transportType: 'Mqtt_Tcp_Only'
          loadGen2.transportType: 'Mqtt_WebSocket_Only'
          loadGen3.transportType: 'Mqtt_Tcp_Only'
          loadGen4.transportType: 'Mqtt_WebSocket_Only'

################################################################################
  - job: windows_amd64_moby
################################################################################
    displayName: Windows AMD64 Moby
    condition: eq(variables['run.windows.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - run-stress -equals true
        - Agent.OS -equals Windows_NT
        - Agent.OSArchitecture -equals X64
    variables:
      edgelet.artifact.name: 'iotedged-windows'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchStressAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.windows)
          itemPattern: |
            $(images.artifact.name.windows)/IotEdgeQuickstart/x64/*
            $(images.artifact.name.windows)/e2e_deployment_files/stress_deployment.template.windows.json
            $(images.artifact.name.windows)/scripts/windows/setup/IotEdgeSecurityDaemon.ps1
            $(images.artifact.name.windows)/scripts/windows/test/Run-E2ETest.ps1
            $(images.artifact.name.windows)/artifactInfo.txt
      # Deploy stress test
      - template: templates/stresstest-deploy-windows.yaml
        parameters:
          release.label: 'st'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.windows)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchStressAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'