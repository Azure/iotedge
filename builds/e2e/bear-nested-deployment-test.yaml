#TODO:
# 1. Turn {SetupVM_job135, SetupVM_job13} into a template and use it in a yaml as a known job name
# 2. In a task, before the test agent run template from (1), have the pipeline appends "_$(Build.BuildId)" to "nested-edge" userCapabilities.
#    This will prevent the test agent from being picked up by other run instance of the pipeline
#    This can be done using https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/agents/update?view=azure-devops-rest-6.0 [userCapabilities]
# 3. Run test on whatever machine you want
# 4. Once the test is done, reverse the capability from (2) by removing the "_$(Build.BuildId)" from "nested-edge" userCapabilities.
# Note: For LongHaul, we can even have a pipeline selection to execute the Rest API to undo the capability suffix which enables the damn thing.
trigger: none
pr: none

variables:
  images.artifact.name.linux: 'core-linux'
  vsts.project: $(System.TeamProjectId)

stages:
- stage: SetupVM
  jobs:
    - job: SetupVM_job135
      displayName: SettingUp
      condition: ne(variables['agent.group'], '')
      timeoutInMinutes: 180
      variables:
        testrun.vmTier: L3_5
        testrun.waitTimeMin: 1
        edgelet.artifact.name: 'iotedged-ubuntu16.04-amd64'  
      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals $(testrun.vmTier)
      steps:
        - script: echo "JobName:$(Agent.JobName)"
          displayName: jobName

        - bash: echo "##vso[task.setvariable variable=$(testrun.vmTier).readyAgent;isOutput=true]$(Agent.Name)"
          name: var1
        - template: templates/nested_connectivity-deploy.yaml
          parameters:
            release.label: 'ct$(agent.group)'
            test.buildNumber: '$(Build.BuildNumber)'
            test.buildId: '$(Build.BuildId)'
            build.source.branch: '$(Build.SourceBranchName)'
            edgelet.source.branch: '$(edgelet.package.branchName)'
            images.source.branch: '$(images.branchName)'
            edgelet.artifact.name: '$(edgelet.artifact.name)'
            images.artifact.name: '$(images.artifact.name.linux)'
            container.registry: '$(container.registry)'
            container.registry.username: '$(edgebuilds-azurecr-io-username)'
            container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
            iotHub.connectionString: '$(ConnectivityNestedEdge-ConnectionString)'
            eventHub.connectionString: '$(ConnectivityNestedEdge-EventHubConnectionString)'
            deploymentFileName: '$(deploymentFileName)'
            upstream.protocol: '$(upstream.protocol)'
            loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'
            edgeHubRestartTest.restartPeriod: '$(edgeHubRestartTest.restartPeriod)'
            edgeHubRestartTest.sdkOperationTimeout: '$(edgeHubRestartTest.sdkOperationTimeout)'
            testDuration: '$(testrun.duration)'
            testStartDelay: '$(testStartDelay)'
            networkController.frequencies: '$(testrun.network.frequencies)'
            networkController.runProfile: '$(testrun.network.runProfile)'
            networkController.description: '$(testrun.network.description)'
            logAnalyticsWorkspaceId: '$(kvLogAnalyticWorkspaceId)'
            logAnalyticsSharedKey: '$(kvLogAnalyticSharedKey)'
            testResultCoordinator.logAnalyticsLogType: '$(testResultCoordinator.logAnalyticsLogType)'
            testResultCoordinator.verificationDelay: '$(testResultCoordinator.verificationDelay)'
            testResultCoordinator.storageAccountConnectionString: '$(EdgeConnectivityStorageAccountConnString)'
            metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
            metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
            metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
            metricsCollector.hostPlatform: 'linux_amd64_moby'
            edgeRuntime.buildNumber: '$(edgeRuntime.buildNumber)'
            customEdgeAgent.image: '$(customEdgeAgent.image)'
            customEdgeHub.image: '$(customEdgeHub.image)'
            test.runtimeLogLevel: '$(test.runtimeLogLevel)'

        - task: Bash@3
          condition: and(succeeded(), eq(variables['run.flag'], 1))
          displayName: 'Run Connectivity Deployment'
          inputs:
            targetType: inline
            script: |
              declare -a cnreg=( ${{ parameters['container.registry.credential'] }} )
              . $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/artifactInfo.txt
              chmod +x $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/install.sh
              
              sudo $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/install.sh \
                -connectionString=$(ConnectivityNestedEdge-ConnectionString)
                -s=$(azure.subscription)
                -hubrg=$(ressourcegroup)

