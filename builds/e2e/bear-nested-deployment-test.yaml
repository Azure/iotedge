trigger: none
pr: none

variables:
  images.artifact.name.linux: 'core-linux'
  vsts.project: $(System.TeamProjectId)

jobs:
################################################################################
  - job: idle_waitTime
################################################################################
    displayName: Setting up across multiple VMs
    condition: ne(variables['agent.group'], '')
    timeoutInMinutes: 180
    strategy:
      matrix:
        L4:
          testrun.vmTier: L4
          testrun.waitTimeMin: 4
        L3.5:
          testrun.vmTier: L3.5
          testrun.waitTimeMin: 2
        L3:
          testrun.vmTier: L3
          testrun.waitTimeMin: 1

    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-idle -equals true
        - nested-edge -equals $(testrun.vmTier)

    steps:
      - bash: echo "##vso[task.setvariable variable=readyAgent;isOutput=true]##vso[task.getVariable variable=Agent.Name;isOutput=true]"
        name: var1
      - script: echo $(var1.readyAgent)
        name: printingVar1
      - bash: echo "##vso[task.getVariable variable=Agent.Name;isOutput=true]"
        name: getVariable

      - task: Bash@3
        name: setting_up
        displayName: 'Setting up $(testrun.vmTier)'
        inputs:
          targetType: inline
          script: |
            # Use sleep to pretend it is a setup time

            #echo "##vso[task.setvariable variable=readyAgent;isOutput=true]##vso[task.getVariable variable=Agent.Name;isOutput=true]"

            echo "%NAME% is sleeping for $(testrun.waitTimeMin)"
            sleep $(testrun.waitTimeMin)m
            echo "%NAME% is waking up"