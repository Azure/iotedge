stages:
- stage: SetupVM
  jobs:
    - job: SetupVM_job135
      displayName: SettingUp
      condition: ne(variables['agent.group'], '')
      timeoutInMinutes: 180
      variables:
        testrun.vmTier: L3_5
        testrun.waitTimeMin: 1

      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals $(testrun.vmTier)

      steps:
        - script: echo "JobName:$(Agent.JobName)"
          displayName: jobName

        - bash: echo "##vso[task.setvariable variable=$(testrun.vmTier).readyAgent;isOutput=true]$(Agent.Name)"
          name: var1

        - task: Bash@3
          name: setting_up
          displayName: 'Setting up $(testrun.vmTier)'
          inputs:
            targetType: inline
            script: |
              # Use sleep to pretend it is a setup time
              echo "$(Agent.Name) is sleeping for $(testrun.waitTimeMin)"
              sleep $(testrun.waitTimeMin)m
              echo "$(Agent.Name) is waking up"

        #Method 1 -- sleep until it's time
        - script: |
              # This works
              echo $(var1.L3.readyAgent)
              echo $(var1.L3_5.readyAgent)
              echo $(var1.L4.readyAgent)
              echo "SetupVM_job135= $(dependencies.SetupVM_job135.outputs['var1.L3_5.readyAgent'])"
              echo "[$(Agent.JobName)]= $(dependencies.$(Agent.JobName).outputs['var1.L3_5.readyAgent'])"
              # BEARWASHERE -- Figure out how to get the IP Addr of the other test agents.
          name: RunTest

    - job: SetupVM_job13
      displayName: SettingUp
      condition: ne(variables['agent.group'], '')
      timeoutInMinutes: 180
      variables:
        testrun.vmTier: L3
        testrun.waitTimeMin: 1

      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals $(testrun.vmTier)

      steps:
        - script: echo "JobName:$(Agent.JobName)"
          displayName: jobName

        - bash: echo "##vso[task.setvariable variable=$(testrun.vmTier).readyAgent;isOutput=true]$(Agent.Name)"
          name: var1

        - task: Bash@3
          name: setting_up
          displayName: 'Setting up $(testrun.vmTier)'
          inputs:
            targetType: inline
            script: |
              # Use sleep to pretend it is a setup time
              echo "$(Agent.Name) is sleeping for $(testrun.waitTimeMin)"
              sleep $(testrun.waitTimeMin)m
              echo "$(Agent.Name) is waking up"

        #Method 1 -- sleep until it's time
        - script: |
              # This works
              echo $(var1.L3.readyAgent)
              echo $(var1.L3_5.readyAgent)
              echo $(var1.L4.readyAgent)
              echo "SetupVM_job13= $(dependencies.SetupVM_job13.outputs['var1.L3.readyAgent'])"
              echo "[$(Agent.JobName)]= $(dependencies.$(Agent.JobName).outputs['var1.L3.readyAgent'])"
          name: RunTest

    - job: SetupVM_job2
      dependsOn:
        - SetupVM_job13
        - SetupVM_job135
      variables:
        L3: $[ dependencies.SetupVM_job13.outputs['var1.L3.readyAgent'] ]
        L3_5: $[ dependencies.SetupVM_job135.outputs['var1.L3_5.readyAgent'] ]
      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals L3_5
      steps:
        - bash: |
            echo "L3: $(L3)"
            echo "L3_5: $(L3_5)"
          name: expansion
        
        - bash: |
            echo "L3: $L3"
            echo "L3_5: $L3_5"
          name: EnvVar
          env:
            L3: $(L3)
            L3_5: $(L3_5)