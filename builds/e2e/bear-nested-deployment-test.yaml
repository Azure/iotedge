trigger: none
pr: none

variables:
  images.artifact.name.linux: 'core-linux'
  vsts.project: $(System.TeamProjectId)

stages:
- stage: SetupVM
  jobs:
################################################################################
    - job: SetupVM_job1
################################################################################
      displayName: Setting up across multiple VMs
      condition: ne(variables['agent.group'], '')
      timeoutInMinutes: 180
      strategy:
        matrix:
          L4:
            testrun.vmTier: L4
            testrun.waitTimeMin: 4
          L3.5:
            testrun.vmTier: L3.5
            testrun.waitTimeMin: 2
          L3:
            testrun.vmTier: L3
            testrun.waitTimeMin: 1

      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals $(testrun.vmTier)

      steps:
        - bash: echo "##vso[task.setvariable variable=readyAgent;isOutput=true]$(Agent.Name)"
          name: var1
        - script: echo $(var1.readyAgent)
          name: agent_name

        - task: Bash@3
          name: setting_up
          displayName: 'Setting up $(testrun.vmTier)'
          inputs:
            targetType: inline
            script: |
              # Use sleep to pretend it is a setup time
              echo "$(Agent.Name) is sleeping for $(testrun.waitTimeMin)"
              sleep $(testrun.waitTimeMin)m
              echo "$(Agent.Name) is waking up"

        - bash: echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the $(testrun.waitTimeMin) value"
          name: setvarStep
        - bash: echo $(setvarStep.myOutputVar)
          name: echovar

- stage: RunTest
  dependsOn: SetupVM
  variables:
