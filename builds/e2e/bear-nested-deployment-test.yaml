#TODO:
# 1. Turn {SetupVM_job135, SetupVM_job13} into a template and use it in a yaml as a known job name
# 2. In a task, before the test agent run template from (1), have the pipeline appends "_$(Build.BuildId)" to "nested-edge" userCapabilities.
#    This will prevent the test agent from being picked up by other run instance of the pipeline
#    This can be done using https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/agents/update?view=azure-devops-rest-6.0 [userCapabilities] 
#     2.1. Issue - List (See agentsCurl.json)  -- poolId=123
#     2.2. Filter the response (1) json to find the corresponding agent name & get that agentId 
#     2.3. Use PUT to update the capabilities 
# 3. Run test on whatever machine you want
# 4. Once the test is done, reverse the capability from (2) by removing the "_$(Build.BuildId)" from "nested-edge" userCapabilities.
# Note: For LongHaul, we can even have a pipeline selection to execute the Rest API to undo the capability suffix which enables the damn thing.

stages:
- stage: SetupVM
  jobs:
    - job: SetupVM_job135
      displayName: SettingUp
      condition: ne(variables['agent.group'], '')
      timeoutInMinutes: 180
      variables:
        testrun.vmTier: L3_5
        testrun.waitTimeMin: 1

      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals $(testrun.vmTier)

      steps:
        - script: echo "JobName:$(Agent.JobName)"
          displayName: jobName

        - bash: echo "##vso[task.setvariable variable=$(testrun.vmTier).readyAgent;isOutput=true]$(Agent.Name)"
          name: var1

        - task: Bash@3
          name: lock_test_agent
          displayName: 'Reserve $(Agent.Name)'
          env:
            POOL_ID: 123
            API_VER: 6.0
            PAT: $(IotEdge1.PAT)
          inputs:
            targetType: inline
            script: |
              # Install pre-requisite 'jq'
              CMD=jq
              if ! command -v $CMD &> /dev/null
              then
                echo "Command '$CMD' not found, Installing '$CMD'"
                sudo add-apt-repository universe
                sudo apt-get update
                sudo apt-get install -y $CMD
              fi

              # Get info of Azure-IoT-Edge-Core pool (poolId=123) test agents
              agentsInfo=$(curl -s -u :$PAT --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents?api-version=$API_VER")

              # Filter test agent ID given the name
              agentId=$(echo $agentsInfo | jq '.value | .[] | select(.name=="$(Agent.Name)") | .id')

              # Get test agent's capabilities
              agentCapabilities=$(curl -s -u :$PAT --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents/$agentId?includeCapabilities=true&api-version=$API_VER")

              # Filter for user capabilities, access "nested-edge" field and append buildId as a suffix
              newAgentUserCapabilities=$(echo $agentCapabilities | jq '.userCapabilities | (.["nested-edge"]) |= sub("$"; "_$(Build.BuildId)")')

              # Update the user capability on the agent pool for this agent
              responseCapabilities=$(curl -s -u :$PAT \
              --request PUT "https://msazure.visualstudio.com/_apis/distributedtask/pools/$POOL_ID/agents/$agentId/usercapabilities" \
              -H "Content-Type:application/json" \
              -H "Accept: application/json;api-version=5.0;" \
              --data @<(cat <<EOF
              $newAgentUserCapabilities
              EOF
              ))

              # Validate the capability update was successful
              responseUserCapabilities=$(echo $responseCapabilities | jq '.userCapabilities')
              [[ $responseUserCapabilities == $newAgentUserCapabilities ]] && exit 0 || exit -1

        #Method 1 -- sleep until it's time
        - script: |
              # This works
              echo "var1.L3.readyAgent= $(var1.L3.readyAgent)"
              echo "var1.L3_5.readyAgent= $(var1.L3_5.readyAgent)"
              echo "var1.L4.readyAgent= $(var1.L4.readyAgent)"
              echo "SetupVM_job13= $(dependencies.SetupVM_job13.outputs['var1.L3.readyAgent'])"
              echo "[$(Agent.JobName)]= $(dependencies.$(Agent.JobName).outputs['var1.L3.readyAgent'])"
          name: RunTest

        - task: Bash@3
          name: unlock_test_agent
          displayName: 'Release $(Agent.Name)'
          env:
            POOL_ID: 123
            API_VER: 6.0
            PAT: $(IotEdge1.PAT)
          inputs:
            targetType: inline
            script: |
              # Get info of Azure-IoT-Edge-Core pool (poolId=123) test agents
              agentsInfo=$(curl -s -u :$PAT --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents?api-version=$API_VER")

              # Filter test agent ID given the name
              agentId=$(echo $agentsInfo | jq '.value | .[] | select(.name=="$(Agent.Name)") | .id')

              # Get test agent's capabilities
              agentCapabilities=$(curl -s -u :$PAT --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents/$agentId?includeCapabilities=true&api-version=$API_VER")

              # Filter for user capabilities, access "nested-edge" field and append buildId as a suffix
              newAgentUserCapabilities=$(echo $agentCapabilities | jq '.userCapabilities | (.["nested-edge"]) |= sub("_$(Build.BuildId)$"; "")')

              # Update the user capability on the agent pool for this agent
              responseCapabilities=$(curl -s -u :$PAT \
              --request PUT "https://msazure.visualstudio.com/_apis/distributedtask/pools/$POOL_ID/agents/$agentId/usercapabilities" \
              -H "Content-Type:application/json" \
              -H "Accept: application/json;api-version=5.0;" \
              --data @<(cat <<EOF
              $newAgentUserCapabilities
              EOF
              ))

              # Validate the capability update was successful
              responseUserCapabilities=$(echo $responseCapabilities | jq '.userCapabilities')
              [[ $responseUserCapabilities == $newAgentUserCapabilities ]] && exit 0 || exit -1

    - job: SetupVM_job13
      displayName: SettingUp
      condition: ne(variables['agent.group'], '')
      timeoutInMinutes: 180
      variables:
        testrun.vmTier: L3
        testrun.waitTimeMin: 1

      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals $(testrun.vmTier)

      steps:
        - script: echo "JobName:$(Agent.JobName)"
          displayName: jobName

        - bash: echo "##vso[task.setvariable variable=$(testrun.vmTier).readyAgent;isOutput=true]$(Agent.Name)"
          name: var1

        - task: Bash@3
          name: setting_up
          displayName: 'Setting up $(testrun.vmTier)'
          inputs:
            targetType: inline
            script: |
              # Use sleep to pretend it is a setup time
              echo "$(Agent.Name) is sleeping for $(testrun.waitTimeMin)"
              sleep $(testrun.waitTimeMin)m
              echo "$(Agent.Name) is waking up"

        #Method 1 -- sleep until it's time
        - script: |
              # This works
              echo "var1.L3.readyAgent= $(var1.L3.readyAgent)"
              echo "var1.L3_5.readyAgent= $(var1.L3_5.readyAgent)"
              echo "var1.L4.readyAgent= $(var1.L4.readyAgent)"
              echo "SetupVM_job13= $(dependencies.SetupVM_job13.outputs['var1.L3.readyAgent'])"
              echo "[$(Agent.JobName)]= $(dependencies.$(Agent.JobName).outputs['var1.L3.readyAgent'])"
          name: RunTest

    - job: SetupVM_job2
      dependsOn:
        - SetupVM_job13
        - SetupVM_job135
      variables:
        L3: $[ dependencies.SetupVM_job13.outputs['var1.L3.readyAgent'] ]
        L3_5: $[ dependencies.SetupVM_job135.outputs['var1.L3_5.readyAgent'] ]
      pool:
        name: $(pool.name)
        demands:
          - agent-group -equals $(agent.group)
          - Agent.OS -equals Linux
          - Agent.OSArchitecture -equals X64
          - run-idle -equals true
          - nested-edge -equals L3_5
      steps:
        - bash: |
            echo "L3: $(L3)"
            echo "L3_5: $(L3_5)"
          name: expansion
        
        - bash: |
            echo "L3: $L3"
            echo "L3_5: $L3_5"
          name: EnvVar
          env:
            L3: $(L3)
            L3_5: $(L3_5)