trigger: none
pr: none

variables:
  images.artifact.name.linux: 'core-linux'
  vsts.project: $(System.TeamProjectId)

jobs:
################################################################################
  - job: linux_amd64_moby_limited_storage
################################################################################
    displayName: Linux AMD64 Moby (Limited Container Storage Tests)
    condition: and(eq(variables['run.linux.amd64.limitedContainerStorage'], 'true'), ne(variables['agent.group'], ''))
    timeoutInMinutes: 180
    strategy:
      matrix:
        EdgeHub 128MB Storage AMQP:
          testrun.config: 1
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "134217728"
          edgeHub.amqpProtocolHead: "true"
          edgeHub.mqttProtocolHead: "false"
          edgeHub.httpProtocolHead: "false"
          benchmark.transportType: "Amqp"
          deploymentFileName: "limited_container_storage_deployment.amqp.template.json"

        EdgeHub 128MB Storage MQTT:
          testrun.config: 2
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "134217728"
          edgeHub.amqpProtocolHead: "false"
          edgeHub.mqttProtocolHead: "true"
          edgeHub.httpProtocolHead: "false"
          benchmark.transportType: "Mqtt"
          deploymentFileName: "limited_container_storage_deployment.mqtt.template.json"

        EdgeHub 128MB Storage AMQP-HTTP:
          testrun.config: 3
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "134217728"
          edgeHub.amqpProtocolHead: "true"
          edgeHub.mqttProtocolHead: "false"
          edgeHub.httpProtocolHead: "true"
          benchmark.transportType: "Amqp"
          deploymentFileName: "limited_container_storage_deployment.amqp.template.json"

        EdgeHub 128MB Storage MQTT-HTTP:
          testrun.config: 4
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "134217728"
          edgeHub.amqpProtocolHead: "false"
          edgeHub.mqttProtocolHead: "true"
          edgeHub.httpProtocolHead: "true"
          benchmark.transportType: "Mqtt"
          deploymentFileName: "limited_container_storage_deployment.mqtt.template.json"

        EdgeHub 192MB Storage AMQP:
          testrun.config: 5
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "201326592"
          edgeHub.amqpProtocolHead: "true"
          edgeHub.mqttProtocolHead: "false"
          edgeHub.httpProtocolHead: "false"
          benchmark.transportType: "Amqp"
          deploymentFileName: "limited_container_storage_deployment.amqp.template.json"

        EdgeHub 192MB Storage MQTT:
          testrun.config: 6
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "201326592"
          edgeHub.amqpProtocolHead: "false"
          edgeHub.mqttProtocolHead: "true"
          edgeHub.httpProtocolHead: "false"
          benchmark.transportType: "Mqtt"
          deploymentFileName: "limited_container_storage_deployment.mqtt.template.json"

        EdgeHub 192MB Storage AMQP-HTTP:
          testrun.config: 7
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "201326592"
          edgeHub.amqpProtocolHead: "true"
          edgeHub.mqttProtocolHead: "false"
          edgeHub.httpProtocolHead: "true"
          benchmark.transportType: "Amqp"
          deploymentFileName: "limited_container_storage_deployment.amqp.template.json"

        EdgeHub 192MB Storage MQTT-HTTP:
          testrun.config: 8
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeHub.storageSizeByte: "201326592"
          edgeHub.amqpProtocolHead: "false"
          edgeHub.mqttProtocolHead: "true"
          edgeHub.httpProtocolHead: "true"
          benchmark.transportType: "Mqtt"
          deploymentFileName: "limited_container_storage_deployment.mqtt.template.json"

        EdgeAgent 64MB Storage:
          testrun.config: 9
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeAgent.storageSizeByte: "67108864"
          deploymentFileName: "limited_container_storage_deployment.template.json"

        EdgeAgent 128MB Storage:
          testrun.config: 10
          testrun.network.description: "Online"
          testrun.network.frequencies: "00:00:00 00:00:00 0"
          testrun.network.runProfile: "Online"
          testrun.duration: "01:00:00"
          edgeAgent.storageSizeByte: "134217728"
          deploymentFileName: "limited_container_storage_deployment.template.json"
        
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-connectivity -equals true
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu16.04-amd64'
    steps:
      - task: Bash@3
        name: Print_test_parameters
        displayName: 'Print test parameters'
        inputs:
          targetType: inline
          script: |
            # print all matrix variables here
            echo "testrun.config=$(testrun.config)"
            echo "testrun.network.frequencies=$(testrun.network.frequencies)"
            echo "testrun.network.runProfile=$(testrun.network.runProfile)"
            echo "testrun.duration=$(testrun.duration)"
            echo "edgeHub.storageSizeByte=$(edgeHub.storageSizeByte)"
            echo "deploymentFileName=$(deploymentFileName)"
      - template: templates/set-run-flag.yaml
      - checkout: none
        condition: and(succeeded(), eq(variables['run.flag'], 1))
      - task: AzureKeyVault@1
        condition: eq(variables['run.flag'], 1)
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,EdgeConnectivityTestHubConnString,EdgeConnectivityEventHubConnString,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey,EdgeConnectivityStorageAccountConnString'
      - task: DownloadBuildArtifacts@0
        condition: and(succeeded(), eq(variables['run.flag'], 1))
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          branchName: $(edgelet.package.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        condition: and(succeeded(), eq(variables['run.flag'], 1))
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          branchName: $(images.branchName)
          buildVersionToDownload: latestFromBranch
          downloadPath: '$(Build.StagingDirectory)'
          artifactName: $(images.artifact.name.linux)
          itemPattern: |
            $(images.artifact.name.linux)/IotEdgeQuickstart.linux-x64.tar.gz
            $(images.artifact.name.linux)/e2e_deployment_files/$(deploymentFileName)
            $(images.artifact.name.linux)/scripts/connectivityTest.sh
            $(images.artifact.name.linux)/scripts/testHelper.sh
            $(images.artifact.name.linux)/artifactInfo.txt
      # Deploy connectivity test
      - template: templates/connectivity-deploy.yaml
        parameters:
          release.label: 'ct$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          build.source.branch: '$(Build.SourceBranchName)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          edgeHub.storageSizeByte: '$(edgeHub.storageSizeByte)'
          edgeHub.amqpProtocolHead: '$(edgeHub.amqpProtocolHead)'
          edgeHub.mqttProtocolHead: '$(edgeHub.mqttProtocolHead)'
          edgeHub.httpProtocolHead: '$(edgeHub.httpProtocolHead)'
          edgeAgent.storageSizeByte: '$(edgeAgent.storageSizeByte)'
          benchmark.transportType: '$(benchmark.transportType)'
          iotHub.connectionString: '$(EdgeConnectivityTestHubConnString)'
          eventHub.connectionString: '$(EdgeConnectivityEventHubConnString)'
          deploymentFileName: '$(deploymentFileName)'
          upstream.protocol: '$(upstream.protocol)'
          loadGen.message.frequency: '$(loadGen.message.frequency.amd64)'
          testDuration: '$(testrun.duration)'
          testStartDelay: '$(testStartDelay)'
          networkController.frequencies: '$(testrun.network.frequencies)'
          networkController.runProfile: '$(testrun.network.runProfile)'
          networkController.description: '$(testrun.network.description)'
          logAnalyticsWorkspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalyticsSharedKey: '$(kvLogAnalyticSharedKey)'
          testResultCoordinator.logAnalyticsLogType: '$(testResultCoordinator.logAnalyticsLogType)'
          testResultCoordinator.verificationDelay: '$(testResultCoordinator.verificationDelay)'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeConnectivityStorageAccountConnString)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_amd64_moby'
          edgeRuntime.buildNumber: '$(edgeRuntime.buildNumber)'
          customEdgeAgent.image: '$(customEdgeAgent.image)'
          customEdgeHub.image: '$(customEdgeHub.image)'
