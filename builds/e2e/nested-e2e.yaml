trigger: none
pr: none

resources:
  pipelines:
  - pipeline: images
    source: 'Azure-IoT-Edge-Core Build Images'
    branch: master
  - pipeline: packages
    source: 'Azure-IoT-Edge-Core Edgelet Packages'
    branch: master

stages:
- stage: SetupVM
  jobs:
  - template: templates/nested-parent-vm-setup.yaml
  - job:  SetupVM_and_RunTest_level3
    dependsOn: SetupVM_level4
    displayName: Set up and run tests
    timeoutInMinutes: 180
    condition: succeeded()
    variables:
      parentName: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level4.outputs['createIdentity.parentDeviceId'] ] 
      os: linux
      arch: amd64
      artifactName: iotedged-ubuntu18.04-amd64
      identityServiceArtifactName: packages_ubuntu-18.04_amd64
      identityServicePackageFilter: aziot-identity-service_*_amd64.deb
      nestededge: true     
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - status -equals unlocked    
    steps:   
      - template: templates/nested-get-secrets.yaml     
      - template: templates/lock-test-agent.yaml     
      - template: templates/e2e-clean-directory.yaml     
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-get-device-name.yaml    
      - template: templates/e2e-setup.yaml
      - template: templates/e2e-clear-docker-cached-images.yaml
      - template: templates/e2e-run.yaml
        parameters:
          EventHubCompatibleEndpoint: $(EventHubStressConnStr)
          IotHubConnectionString: $(IotHubStressConnString)

  - job:  Clean_up     
    dependsOn:
      - SetupVM_level5 
      - SetupVM_level4
      - SetupVM_and_RunTest_level3
    condition: always()
    displayName: Clean up identities and unlock agents
    timeoutInMinutes: 1    
    variables:    
      deviceLvl5DeviceId: $[ dependencies.SetupVM_level5.outputs['createIdentity.parentDeviceId'] ] 
      deviceLvl4DeviceId: $[ dependencies.SetupVM_level4.outputs['createIdentity.parentDeviceId'] ] 
      deviceLvl5IoTHubName: $[ dependencies.SetupVM_level5.outputs['createIdentity.iotHubName'] ] 
      deviceLvl4IoTHubName: $[ dependencies.SetupVM_level4.outputs['createIdentity.iotHubName'] ]
      deviceLvl5AgentName: $[ dependencies.SetupVM_level5.outputs['lock_test_agent.agentName'] ]         
      deviceLvl4AgentName: $[ dependencies.SetupVM_level4.outputs['lock_test_agent.agentName'] ]       
      deviceLvl3AgentName: $[ dependencies.SetupVM_and_RunTest_level3.outputs['lock_test_agent.agentName'] ]  
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - status -equals unlocked_$(Build.BuildId)          
    steps:
      - template: templates/nested-get-secrets.yaml  
      - template: templates/unlock-test-agent.yaml
        parameters:
          agentName: $(deviceLvl5AgentName)
          lvl: 5
      - template: templates/unlock-test-agent.yaml
        parameters:
          agentName: $(deviceLvl4AgentName)
          lvl: 4          
      - template: templates/unlock-test-agent.yaml
        parameters:
          agentName: $(deviceLvl3AgentName)
          lvl: 3     
      - template: templates/nested-clean-identity.yaml
        parameters:
          iotHubName: $(deviceLvl5IoTHubName)
          deviceId: $(deviceLvl5DeviceId)
          lvl: 5    
      - template: templates/nested-clean-identity.yaml
        parameters:
          iotHubName: $(deviceLvl4IoTHubName)
          deviceId: $(deviceLvl4DeviceId) 
          lvl: 4              