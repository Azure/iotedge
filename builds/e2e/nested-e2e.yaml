trigger: none
pr: none

resources:
  pipelines:
  - pipeline: images
    source: 'Azure-IoT-Edge-Core Build Images'
    branch: master
  - pipeline: packages
    source: 'Azure-IoT-Edge-Core Edgelet Packages'
    branch: master

stages:
- stage: SetupVM
  jobs:
  - job: SetupVM_level5
    displayName: SettingUp level 5
    condition: ne(variables['agent.group'], '')
    timeoutInMinutes: 180
    variables:
     images.artifact.name.linux: 'core-linux'
     edgelet.artifact.name: 'iotedged-ubuntu16.04-amd64'
     vsts.project: $(System.TeamProjectId)
     level: '5'
     deploymentFile: 'nestededge_topLayerBaseDeployment.json'
     parentName: ''
     parentDeviceId: ''
    pool:
     name: $(pool.name)
     demands:
       - agent-group -equals $(agent.group)
       - Agent.OS -equals Linux
       - Agent.OSArchitecture -equals X64
       - run-idle -equals true
       - status -equals unlocked
    steps:
     - template: templates/nested-get-secrets.yaml
     - template: templates/lock-test-agent.yaml
     - template: templates/nested-get-root-ca.yaml       
     - template: templates/nested-create-identity.yaml   
     - template: templates/nested-agent-deploy.yaml

  - job: SetupVM_level4
    dependsOn: SetupVM_level5
    displayName: SettingUp level 4
    condition: ne(variables['agent.group'], '')
    timeoutInMinutes: 180
    variables:
     images.artifact.name.linux: 'core-linux'
     edgelet.artifact.name: 'iotedged-ubuntu16.04-amd64'
     vsts.project: $(System.TeamProjectId)
     parentName: $[ dependencies.SetupVM_level5.outputs['deployIoTEdge.deviceName'] ]
     parentDeviceId: $[ dependencies.SetupVM_level5.outputs['createIdentity.parentDeviceId'] ] 
     deploymentFile: 'nestededge_middleLayerBaseDeployment.json'
     level: '4'
    pool:
     name: $(pool.name)
     demands:
       - agent-group -equals $(agent.group)
       - Agent.OS -equals Linux
       - Agent.OSArchitecture -equals X64
       - run-idle -equals true 
       - status -equals unlocked    
    steps:
     - template: templates/nested-get-secrets.yaml     
     - template: templates/lock-test-agent.yaml
     - template: templates/nested-get-root-ca.yaml         
     - template: templates/nested-create-identity.yaml          
     - template: templates/nested-agent-deploy.yaml

  - job:  SetupVM_and_RunTest_level3
    dependsOn: SetupVM_level4
    displayName: Set up and run tests
    timeoutInMinutes: 180
    variables:
      parentName: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level4.outputs['createIdentity.parentDeviceId'] ] 
#      parentName: nestededgetest02.eastus2.cloudapp.azure.com
#      parentDeviceId: level_4_20201210.99
      os: linux
      arch: amd64
      artifactName: iotedged-ubuntu16.04-amd64
      nestededge: true     
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-idle -equals true 
        - status -equals unlocked    
    steps:   
      - template: templates/nested-get-secrets.yaml     
      - template: templates/lock-test-agent.yaml     
      - template: templates/e2e-clean-directory.yaml
      - template: templates/nested-get-root-ca.yaml
      - template: templates/e2e-setup.yaml
      - template: templates/e2e-clear-docker-cached-images.yaml
      - template: templates/nested-e2e-run.yaml
  - job:  Clean_up     
    dependsOn: SetupVM_level4
    displayName: Clean up identities and unlock agents
    variables:    
      deviceLvl5Name: $[ dependencies.SetupVM_level5.outputs['deployIoTEdge.deviceName'] ]
      deviceLvl5ConnectionString: $[ dependencies.SetupVM_level5.outputs['createIdentity.connectionString'] ]     
      deviceLvl4Name: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      deviceLvl4ConnectionString: $[ dependencies.SetupVM_level4.outputs['createIdentity.connectionString'] ] 
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-idle -equals true 
        - status -equals unlocked_$(Build.BuildId)  
    strategy:
      parallel: 2          
    steps:
      - template: templates/nested-get-secrets.yaml     
      - template: templates/unlock-test-agent.yaml      
