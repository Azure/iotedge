# This YAML runs compare script to make sure the current iotedge binaries and containers are in line with IoT Edge Platform Compatibility Script. The conditions being evaluated are Memory Usage, Binary Size Container Size, Shared Libraries, Docker API Version, Kernel Configuration.
trigger: none
pr: none

resources:
  pipelines:
  - pipeline: images
    source: 'Azure-IoT-Edge-Core Build Images'
    branch: 'main'
    trigger:
      branches:
      - main
      - release/*
  - pipeline: packages
    source: 'Azure-IoT-Edge-Core Edgelet Packages'
    branch: 'main'
    trigger:
      branches:
      - main
      - release/*


jobs:


################################################################################
  - job: ubuntu_2004_msmoby
################################################################################
    displayName: Ubuntu 20.04 with iotedge-moby

    pool:
      name: $(pool.linux.name)
      demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby

    variables:
        os: linux
        arch: amd64
        artifactName: iotedged-ubuntu20.04-amd64
        identityServiceArtifactName: packages_ubuntu-20.04_amd64
        identityServicePackageFilter: aziot-identity-service_*_amd64.deb
        skip_notary: true
    
    timeoutInMinutes: 180

    steps:
    - template: templates/e2e-setup.yaml
    - task: AzureKeyVault@1
      displayName: 'Get Secret'
      inputs:
        azureSubscription: $(az.subscription)
        KeyVaultName: $(az.keyvault)
        SecretsFilter: >-
          edgebuild-service-principal-secret,
    - task: Bash@3
      displayName: 'Az login'
      inputs:
        targetType: inline
        script: |
          az login --service-principal -p $(edgebuild-service-principal-secret) -u $(servicePrincipal.clientId) --tenant $(servicePrincipal.tenantId)
    - bash: |
          contextPath=$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/net6.0/context.json
          mkdir -p $(Build.ArtifactStagingDirectory)/compat
          edgeAgentImage="$(cat $contextPath | jq '.edgeAgentImage' | tr -d '"')" 
          edgeHubImage="$(cat $contextPath | jq '.edgeHubImage' | tr -d '"')"
          tempSensorImage="$(cat $contextPath | jq '.tempSensorImage' | tr -d '"')"
          az extension add --name azure-iot
          sudo --preserve-env $(Build.SourcesDirectory)/platform-validation/scripts/check-for-updates.sh \
          -f $(Build.SourcesDirectory)/platform-validation/deployment/platform-compatibility.json \
          -u $(Build.SourcesDirectory)/platform-validation/scripts/analyzeSystemStats.sh \
          -c $(Build.SourcesDirectory)/platform-validation/scripts/aziot-compatibility.sh \
          -b $(System.ArtifactsDirectory)/$(artifactName) \
          -t $(TIME_TO_RUN_SECONDS) \
          --edge-agent-image $edgeAgentImage \
          --edge-hub-image $edgeHubImage \
          --temp-sensor-image $tempSensorImage \
          -o "$(Build.ArtifactStagingDirectory)/compat" \
          --config-toml-path  $(Build.SourcesDirectory)/platform-validation/deployment/template.toml
      displayName: Check Usage
      name: check_usage
      env:
        IOTHUB_NAME: $(IOT_HUB_NAME)
        REGISTRY_ADDRESS: $(cr.address)
        REGISTRY_USERNAME: $(cr.username)
        REGISTRY_PASSWORD: $(cr.password)
    - task: PublishBuildArtifacts@1
      displayName: Publish logs
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/compat
        ArtifactName: compatibility-logs-amd64
      condition: always()

################################################################################
  - job: debian_11_moby
################################################################################
    displayName: debian_11_moby
    pool:
      name: $(pool.custom.name)
      demands: compatibility-ci

    variables:
      os: linux
      arch: arm32v7
      artifactName: iotedged-debian11-arm32v7
      identityServiceArtifactName: packages_debian-11-slim_arm32v7
      identityServicePackageFilter: aziot-identity-service_*_armhf.deb
      # skip notary installation as it is not supported for ARM platforms
      skip_notary: true
    
    timeoutInMinutes: 180

    steps:
    - template: templates/e2e-clean-directory.yaml
    - template: templates/e2e-setup.yaml
    - template: templates/e2e-clear-docker-cached-images.yaml
    - task: AzureKeyVault@1
      displayName: 'Get Secret'
      inputs:
        azureSubscription: $(az.subscription)
        KeyVaultName: $(az.keyvault)
        SecretsFilter: >-
          edgebuild-service-principal-secret,
    # - task: Bash@3
    #   displayName: 'Az login'
    #   inputs:
    #     targetType: inline
    #     script: |
    #       az login --service-principal -p $(edgebuild-service-principal-secret) -u $(servicePrincipal.clientId) --tenant $(servicePrincipal.tenantId)
    - bash: |
          set -e
          ~/azure-cli-env/bin/az --version
          export PATH=~/azure-cli-env/bin/:$PATH
          az login --service-principal -p $(edgebuild-service-principal-secret) -u $(servicePrincipal.clientId) --tenant $(servicePrincipal.tenantId)
          contextPath=$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/net6.0/context.json
          mkdir -p $(Build.ArtifactStagingDirectory)/compat
          edgeAgentImage="$(cat $contextPath | jq '.edgeAgentImage' | tr -d '"')" 
          edgeHubImage="$(cat $contextPath | jq '.edgeHubImage' | tr -d '"')"
          tempSensorImage="$(cat $contextPath | jq '.tempSensorImage' | tr -d '"')"
          az extension add --name azure-iot
          sudo --preserve-env $(Build.SourcesDirectory)/platform-validation/scripts/check-for-updates.sh \
          -f $(Build.SourcesDirectory)/platform-validation/deployment/platform-compatibility.json \
          -u $(Build.SourcesDirectory)/platform-validation/scripts/analyzeSystemStats.sh \
          -c $(Build.SourcesDirectory)/platform-validation/scripts/aziot-compatibility.sh \
          -b $(System.ArtifactsDirectory)/$(artifactName) \
          -t $(TIME_TO_RUN_SECONDS) \
          --edge-agent-image $edgeAgentImage \
          --edge-hub-image $edgeHubImage \
          --temp-sensor-image $tempSensorImage \
          -o "$(Build.ArtifactStagingDirectory)/compat" \
          --config-toml-path  $(Build.SourcesDirectory)/platform-validation/deployment/template.toml
      displayName: Check Usage
      name: check_usage
      env:
        IOTHUB_NAME: $(IOT_HUB_NAME)
        REGISTRY_ADDRESS: $(cr.address)
        REGISTRY_USERNAME: $(cr.username)
        REGISTRY_PASSWORD: $(cr.password)
    - task: PublishBuildArtifacts@1
      displayName: Publish logs
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/compat
        ArtifactName: compatibility-logs-amd64
      condition: always()

# TODO : Current 1ES Image for ARM64 requires some additional installation, We should add these to our 1ES Base Image
################################################################################
  - job: ubuntu_2004_arm64v8
################################################################################
    displayName: Ubuntu 20.04 with arm64v8

    pool:
      name: 'Azure-IoT-Edge-1ES-Hosted-Linux-Arm64'
      demands:
      - ImageOverride -equals agent-aziotedge-ubuntu-20.04-arm64

    variables:
      os: linux
      arch: arm64v8
      artifactName: iotedged-ubuntu20.04-aarch64
      identityServiceArtifactName: packages_ubuntu-20.04_aarch64
      identityServicePackageFilter: aziot-identity-service_*_arm64.deb
      skip_notary: true
    
    timeoutInMinutes: 180

    steps:
    - task: AzureKeyVault@1
      displayName: 'Get Secret'
      inputs:
        azureSubscription: $(az.subscription)
        KeyVaultName: $(az.keyvault)
        SecretsFilter: >-
          edgebuild-service-principal-secret,
    - bash: |
          set -e
          # Install PowerShell dependencies
          sudo apt-get update
          sudo apt-get install -y liblttng-ust0 jq
          # Get the PowerShell tarball
          release_id=$(curl -sSH 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/powershell/powershell/releases/latest | jq '.id')
          url=$(curl -sSH 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/powershell/powershell/releases/$release_id/assets | jq -r ".[] | select(.name | contains(\"linux-arm64.tar.gz\")) | .browser_download_url")
          echo "$release_id"
          echo "$url"
          file=$(basename $url)
          curl -sSL $url -o /tmp/$file
          # Install PowerShell
          sudo mkdir -p /opt/microsoft/powershell/7
          sudo tar zxf /tmp/$file -C /opt/microsoft/powershell/7
          sudo chmod +x /opt/microsoft/powershell/7/pwsh
          sudo ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh
      displayName: Install pwsh
    - bash: |
        set -e
        # Install .NET Core dependencies
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            libc6 libgcc1 libgssapi-krb5-2 libicu66 libssl1.1 libstdc++6 zlib1g
        # Install .NET Core
        curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 6.0
        sudo ln -s $HOME/.dotnet/dotnet /usr/bin/dotnet
      displayName: Install .NET Core
    - bash: |
        set -e
        # Install Moby
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > ./microsoft-prod.list
        sudo cp ./microsoft-prod.list /etc/apt/sources.list.d/
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo cp ./microsoft.gpg /etc/apt/trusted.gpg.d/
        rm microsoft-prod.list microsoft.gpg
        sudo apt-get update
        sudo apt-get install -y moby-engine
      displayName: Install moby
    - template: templates/e2e-setup.yaml
    - bash: |
          set -e
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-venv make libsodium-dev pip
          SODIUM_INSTALL=system pip install pynacl
          $(command -v python3) -m venv azure-cli-env
          azure-cli-env/bin/python -m pip install --upgrade pip
          azure-cli-env/bin/python -m pip install azure-cli
          azure-cli-env/bin/az --version
          export PATH=azure-cli-env/bin/:$PATH
          az login --service-principal -p $(edgebuild-service-principal-secret) -u $(servicePrincipal.clientId) --tenant $(servicePrincipal.tenantId)

          contextPath=$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/net6.0/context.json
          mkdir -p $(Build.ArtifactStagingDirectory)/compat
          edgeAgentImage="$(cat $contextPath | jq '.edgeAgentImage' | tr -d '"')" 
          edgeHubImage="$(cat $contextPath | jq '.edgeHubImage' | tr -d '"')"
          tempSensorImage="$(cat $contextPath | jq '.tempSensorImage' | tr -d '"')"
          az extension add --name azure-iot
          sudo --preserve-env env "PATH=$PATH" $(Build.SourcesDirectory)/platform-validation/scripts/check-for-updates.sh \
          -f $(Build.SourcesDirectory)/platform-validation/deployment/platform-compatibility.json \
          -u $(Build.SourcesDirectory)/platform-validation/scripts/analyzeSystemStats.sh \
          -c $(Build.SourcesDirectory)/platform-validation/scripts/aziot-compatibility.sh \
          -b $(System.ArtifactsDirectory)/$(artifactName) \
          -t $(TIME_TO_RUN_SECONDS) \
          --edge-agent-image $edgeAgentImage \
          --edge-hub-image $edgeHubImage \
          --temp-sensor-image $tempSensorImage \
          -o "$(Build.ArtifactStagingDirectory)/compat" \
          --config-toml-path  $(Build.SourcesDirectory)/platform-validation/deployment/template.toml
      displayName: Check Usage
      name: check_usage
      env:
        IOTHUB_NAME: $(IOT_HUB_NAME)
        REGISTRY_ADDRESS: $(cr.address)
        REGISTRY_USERNAME: $(cr.username)
        REGISTRY_PASSWORD: $(cr.password)
    - task: PublishBuildArtifacts@1
      displayName: Publish logs
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/compat
        ArtifactName: compatibility-logs-arm64
      condition: always()


        
