trigger: none
pr: none

resources:
  pipelines:
  - pipeline: images
    source: 'Azure-IoT-Edge-Core Build Images'
    branch: master
  - pipeline: packages
    source: 'Azure-IoT-Edge-Core Edgelet Packages'
    branch: master

stages:
- stage: SetupVM
  jobs:
  - job: SetupVM_level5
    displayName: SettingUp level 5
    timeoutInMinutes: 180
    variables:
      artifactName: iotedged-ubuntu18.04-amd64
      identityServiceArtifactName: packages_ubuntu-18.04_amd64
      identityServicePackageFilter: aziot-identity-service_*_amd64.deb
      vsts.project: $(System.TeamProjectId)
      level: '5'
      deploymentFile: 'nestededge_topLayerBaseDeployment.json'
      parentName: ''
      parentDeviceId: ''
    pool:
     name: $(pool.name)
     demands:
       - agent-group -equals $(agent.group)
       - Agent.OS -equals Linux
       - Agent.OSArchitecture -equals X64
       - run-idle -equals true
       - status -equals unlocked
    steps:
     - template: templates/nested-get-secrets.yaml
     - template: templates/e2e-clean-directory.yaml            
     - template: templates/lock-test-agent.yaml
     - template: templates/nested-get-root-ca.yaml       
     - template: templates/nested-create-identity.yaml   
     - template: templates/nested-agent-deploy.yaml

  - job: SetupVM_level4
    dependsOn: SetupVM_level5
    displayName: SettingUp level 4
    condition: succeeded()
    timeoutInMinutes: 180
    variables:
      identityServiceArtifactName: packages_ubuntu-18.04_amd64
      identityServicePackageFilter: aziot-identity-service_*_amd64.deb   
      artifactName: iotedged-ubuntu18.04-amd64
      vsts.project: $(System.TeamProjectId)
      parentName: $[ dependencies.SetupVM_level5.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level5.outputs['createIdentity.parentDeviceId'] ] 
      deploymentFile: 'nestededge_middleLayerBaseDeployment.json'
      level: '4'
    pool:
     name: $(pool.name)
     demands:
       - agent-group -equals $(agent.group)
       - Agent.OS -equals Linux
       - Agent.OSArchitecture -equals X64
       - run-idle -equals true 
       - status -equals unlocked    
    steps:
     - template: templates/nested-get-secrets.yaml  
     - template: templates/e2e-clean-directory.yaml                
     - template: templates/lock-test-agent.yaml
     - template: templates/nested-get-root-ca.yaml         
     - template: templates/nested-create-identity.yaml          
     - template: templates/nested-agent-deploy.yaml
  - job:  Deploy_Longhaul_Linux_Amd64
    dependsOn: SetupVM_level4
    displayName: Set up and run longhaul tests on Linux Amd64
    condition: ne(variables['agent.group'], '')
    variables:
      parentName: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level4.outputs['createIdentity.parentDeviceId'] ] 
      os: linux
      arch: amd64
      artifactName: iotedged-ubuntu16.04-amd64
      nestededge: true
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-idle -equals true 
        - status -equals unlocked   
    steps:   
      - template: templates/nested-get-secrets.yaml     
      - template: templates/lock-test-agent.yaml     
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(ConnectivityNestedEdge-ConnectionString)'
          eventHub.connectionString: '$(ConnectivityNestedEdge-EventHubConnectionString)'
          loadGen.message.frequency: '$(loadGen.message.frequency.arm64v8)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm64v8'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          twinTester.edgeHubRestartFailureTolerance: '$(twinTester.edgeHubRestartFailureTolerance)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm64v8_docker'
          longHaul.parentHostname: '$(parentName)'
          longHaul.parentEdgeDevice: '$(parentDeviceId)'
  - job:  Deploy_Longhaul_Linux_Arm32
    dependsOn: SetupVM_level4
    displayName: Set up and run longhaul tests on Arm3
    condition: ne(variables['agent.group'], '')
    variables:
      parentName: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level4.outputs['createIdentity.parentDeviceId'] ] 
#      parentName: nestededgetest02.eastus2.cloudapp.azure.com
#      parentDeviceId: level_4_20201210.99
      os: linux
      arch: amd64
      artifactName: iotedged-debian9-arm32v7
      nestededge: true
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 32
        - run-idle -equals true 
        - status -equals unlocked   
    steps:   
      - template: templates/nested-get-secrets.yaml     
      - template: templates/lock-test-agent.yaml     
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(ConnectivityNestedEdge-ConnectionString)'
          eventHub.connectionString: '$(ConnectivityNestedEdge-EventHubConnectionString)'
          loadGen.message.frequency: '$(loadGen.message.frequency.arm64v8)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm64v8'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          twinTester.edgeHubRestartFailureTolerance: '$(twinTester.edgeHubRestartFailureTolerance)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm64v8_docker'
          longHaul.parentHostname: '$(parentName)'
          longHaul.parentEdgeDevice: '$(parentDeviceId)'
  - job:  Deploy_Longhaul_Linux_Arm64
    dependsOn: SetupVM_level4
    displayName: Set up and run longhaul tests on Linux Arm64
    condition: ne(variables['agent.group'], '')
    variables:
      parentName: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level4.outputs['createIdentity.parentDeviceId'] ] 
#      parentName: nestededgetest02.eastus2.cloudapp.azure.com
#      parentDeviceId: level_4_20201210.99
      os: linux
      arch: amd64
      artifactName: iotedged-ubuntu18.04-aarch64
      nestededge: true  
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 32
        - run-idle -equals true 
        - status -equals unlocked     
    steps:   
      - template: templates/nested-get-secrets.yaml     
      - template: templates/lock-test-agent.yaml     
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(ConnectivityNestedEdge-ConnectionString)'
          eventHub.connectionString: '$(ConnectivityNestedEdge-EventHubConnectionString)'
          loadGen.message.frequency: '$(loadGen.message.frequency.arm64v8)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm64v8'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          twinTester.edgeHubRestartFailureTolerance: '$(twinTester.edgeHubRestartFailureTolerance)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm64v8_docker'
          longHaul.parentHostname: '$(parentName)'
          longHaul.parentEdgeDevice: '$(parentDeviceId)'
  - job:  Clean_up     
    dependsOn: 
      - Deploy_Longhaul_Linux_Amd64
      - Deploy_Longhaul_Linux_Arm64
      - Deploy_Longhaul_Linux_Arm32
    condition: true
    displayName: Clean up identities and unlock agents
    variables:    
      deviceLvl5Name: $[ dependencies.SetupVM_level5.outputs['deployIoTEdge.deviceName'] ]
      deviceLvl5ConnectionString: $[ dependencies.SetupVM_level5.outputs['createIdentity.connectionString'] ]     
      deviceLvl4Name: $[ dependencies.SetupVM_level4.outputs['deployIoTEdge.deviceName'] ]
      deviceLvl4ConnectionString: $[ dependencies.SetupVM_level4.outputs['createIdentity.connectionString'] ] 
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-idle -equals true 
        - status -equals unlocked_$(Build.BuildId)  
    strategy:
      parallel: 3          
    steps:
      - template: templates/nested-get-secrets.yaml     
      - template: templates/unlock-test-agent.yaml      
