# End-to-end tests should run after new docker images are built, but 'build
# completion triggers' are not yet supported in YAML. Set to 'none' here
# and override in the online editor.
trigger: none
jobs:

################################################################################
  - job: linux_amd64
################################################################################
    displayName: Linux amd64
    pool:
      vmImage: ubuntu-16.04
    steps:

    - checkout: self
      fetchDepth: 100

    - task: AzureKeyVault@1
      displayName: Get secrets
      inputs:
        azureSubscription: $(az.subscription)
        keyVaultName: $(kv.name)
        secretsFilter: >-
          TestContainerRegistryPassword,
          TestEventHubCompatibleEndpoint,
          TestIotHubConnectionString
          TestRootCaCertificate,
          TestRootCaKey,
          TestRootCaPassword

    - task: DownloadBuildArtifacts@0
      displayName: Download iotedged packages
      inputs:
        buildType: specific
        project: one
        pipeline: $(az.pipeline.artifacts)
        buildVersionToDownload: latestFromBranch
        branchName: refs/heads/master
        downloadType: specific
        itemPattern: iotedged-ubuntu-16.04-amd64/*.deb

    - script: |
        testDir='$(Pipeline.Workspace)/e2e'
        mkdir -p "$testDir/certs"
        printf '%s' "$ROOT_CERT" > "$testDir/certs/rsa_root_ca.cert.pem"
        printf '%s' "$ROOT_KEY" > "$testDir/certs/rsa_root_ca.key.pem"
      displayName: Install CA keys
      env:
        ROOT_CERT: $(RootCaCertificate)
        ROOT_KEY: $(RootCaKey)

    - script: |
        binDir='$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/netcoreapp2.1'
        testDir='$(Pipeline.Workspace)/e2e'
        imagePrefix='$(cr.address)/$(cr.labelPrefix)azureiotedge'
        imageTag='$(Build.TriggeredBy.BuildNumber)-linux-amd64'
        > "$binDir/context.json" cat <<-EOF
        {
          "edgeAgentImage": "$imagePrefix-agent:$imageTag",
          "edgeHubImage": "$imagePrefix-hub:$imageTag",
          "tempSensorImage": "$imagePrefix-simulated-temperature-sensor:$imageTag",
          "methodSenderImage": "$imagePrefix-direct-method-sender:$imageTag",
          "methodReceiverImage": "$imagePrefix-direct-method-receiver:$imageTag",
          "registries": [
            {
              "address": "$(cr.address)",
              "username": "$(cr.username)"
            }
          ],
          "packagePath": "$(System.ArtifactsDirectory)/iotedged-ubuntu-16.04-amd64",
          "caCertScriptPath": "$(Build.SourcesDirectory)/tools/CACertificates",
          "rootCaCertificatePath": "$testDir/certs/rsa_root_ca.cert.pem"
          "rootCaPrivateKeyPath": "$testDir/certs/rsa_root_ca.key.pem",
          "logFile": "$binDir/testoutput.log"
        }
        EOF
      displayName: Create test arguments file (context.json)

    - script: |
        sudo --preserve-env \
          dotnet test --logger:trx $(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test
      displayName: Run tests
      env:
        E2E_EVENT_HUB_ENDPOINT: $(EventHubCompatibleEndpoint)
        E2E_IOT_HUB_CONNECTION_STRING: $(IotHubConnectionString)
        E2E_REGISTRIES__0__PASSWORD: $(ContainerRegistryPassword)
        E2E_ROOT_CA_PASSWORD: $(RootCaPassword)

    - script: |
        binDir='$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/netcoreapp2.1'
        logdir=$(System.ArtifactsDirectory)/logs
        mkdir -p $logdir
        echo > "$logdir/$(Build.DefinitionName)-$(Build.BuildNumber)"
        cp $(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/netcoreapp2.1/*.log $logdir/
        cp -r $(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/TestResults $logdir/
      displayName: Collect Logs
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: Publish logs
      inputs:
        PathtoPublish: $(System.ArtifactsDirectory)/logs
        ArtifactName: logs
      condition: succeededOrFailed()
