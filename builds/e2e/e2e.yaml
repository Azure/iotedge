trigger: none
pr: none

resources:
  pipelines:
  - pipeline: images
    source: 'Azure-IoT-Edge-Core Build Images'
    trigger:
      branches:
      - master
      - release/*
  - pipeline: packages
    source: 'Azure-IoT-Edge-Core Edgelet Packages'
    trigger:
      branches:
      - master
      - release/*

jobs:

################################################################################	
  - job: linux_arm32v7
################################################################################	
    displayName: Linux arm32v7

    pool:
      name: $(pool.name)
      demands: rpi3-e2e-tests

    variables:
      os: linux
      arch: arm32v7
      artifactName: iotedged-debian9-arm32v7

    timeoutInMinutes: 120

    steps:
    - task: CmdLine@2
      inputs:
        script: 'sudo find . -type f -group root -execdir rm {} + && sudo find . -type d -group root -print0 | sudo xargs -0 /bin/rm -rf' 
      displayName: Clean up files (as sudo)

    - template: templates/e2e-setup.yaml

    - task: Docker@2
      displayName: Docker login
      inputs:
        command: login
        containerRegistry: iotedge-edgebuilds-acr

    - pwsh: |
        # We use a self-hosted agent for this job, so we need to clean up
        # old docker images and containers to keep disk usage in check. But
        # pull any required images for this test run first, to take advantage
        # of cached layers from the old images (and also so that the pull
        # operation doesn't count against each test's timeout period).

        # Get images required for this run
        $images = Get-Content -Encoding UTF8 '$(binDir)/context.json' `
          | ConvertFrom-Json `
          | foreach { $_.PSObject.Properties } `
          | where { $_.Name -match 'Image$' } `
          | foreach { $_.Value }

        # Pull required images
        $images | foreach { sudo --preserve-env docker pull $_ }

        # Remove old images
        $remove = sudo docker images --format '{{.Repository}}:{{.Tag}}' `
          | where { $images -notcontains $_ }
        sudo docker rm -f $(docker ps -a -q)
        $remove | foreach { sudo docker rmi $_ }

        # Delete everything else
        sudo docker network prune -f
        sudo docker volume prune -f
      displayName: Cache docker images

    - template: templates/e2e-run.yaml

################################################################################	
  - job: linux_amd64
################################################################################	
    displayName: Linux amd64

    pool:
      vmImage: ubuntu-16.04

    variables:
      os: linux
      arch: amd64
      artifactName: iotedged-ubuntu16.04-amd64

    steps:
    - template: templates/e2e-setup.yaml
    - template: templates/e2e-run.yaml

################################################################################	
  - job: windows_amd64
################################################################################	
    displayName: Windows amd64

    pool:
      vmImage: windows-2019

    variables:
      os: windows
      arch: amd64
      artifactName: iotedged-windows

    steps:
    - template: templates/e2e-setup.yaml

    - pwsh: |
        $certBytes = [system.Text.Encoding]::UTF8.GetBytes($env:PACKAGE_SIGNING_CERT)
        $cert = [System.Security.Cryptography.X509Certificates.X509Certificate]::new($certBytes)
        $store = New-Object System.Security.Cryptography.X509Certificates.X509Store `
          -ArgumentList 'Root', 'LocalMachine'
        $store.Open('ReadWrite')
        $store.Add($cert)
      displayName: Install CAB signing root cert
      env:
        PACKAGE_SIGNING_CERT: $(TestIotedgedPackageRootSigningCert)

    - pwsh: |
        Write-Output '>>> BEFORE:'
        netsh interface ipv6 show prefixpolicies
        netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 45 4
        Write-Output '>>> AFTER:'
        netsh interface ipv6 show prefixpolicies
      displayName: Prefer IPv4

    - template: templates/e2e-run.yaml
