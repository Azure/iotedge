trigger: none
pr: none

resources:
  pipelines:
  - pipeline: images
    source: 'Azure-IoT-Edge-Core Build Images'
    branch: 'release/1.1'
    trigger:
      branches:
      - release/1.1
  - pipeline: packages
    source: 'Azure-IoT-Edge-Core Edgelet Packages'
    branch: 'release/1.1'
    trigger:
      branches:
      - release/1.1

variables:
  # A 'minimal' pipeline only runs one end-to-end test (TempSensor). This is useful for platforms or
  # environments that are very similar to other platforms/environments in our matrix, e.g. Windows
  # Server 2019 vs. Windows 10 Enterprise, or Ubuntu 18.04 with the 'docker-ce' package vs. Ubuntu
  # 18.04 with the 'iotedge-moby' package vs. the same variations in Ubuntu 20.04. In these
  # instances the platforms/environments are so similar that we don't reasonably expect to encounter
  # differences--if we do, it would likely manifest during installation, or in running a very basic
  # test. We don't need to repeat the entire test suite.
  # The 'minimal' variable defaults to 'false'; we override it in specific jobs as needed.
  minimal: false

jobs:
################################################################################
  - job: windows_server
################################################################################
    displayName: Windows Server 2019

    pool:
      name: $(pool.windows.name)
      demands:
        - ImageOverride -equals agent-aziotedge-winserver-2019dc-test

    variables:
      os: windows
      arch: amd64
      artifactName: iotedged-windows

    steps:
    - template: templates/e2e-setup.yaml

    - pwsh: |
        $certBytes = [system.Text.Encoding]::UTF8.GetBytes($env:PACKAGE_SIGNING_CERT)
        $cert = [System.Security.Cryptography.X509Certificates.X509Certificate]::new($certBytes)
        $store = New-Object System.Security.Cryptography.X509Certificates.X509Store `
          -ArgumentList 'Root', 'LocalMachine'
        $store.Open('ReadWrite')
        $store.Add($cert)
      displayName: Install CAB signing root cert
      env:
        PACKAGE_SIGNING_CERT: $(TestIotedgedPackageRootSigningCert)

    - pwsh: |
        Write-Output '>>> BEFORE:'
        netsh interface ipv6 show prefixpolicies
        netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 45 4
        Write-Output '>>> AFTER:'
        netsh interface ipv6 show prefixpolicies
      displayName: Prefer IPv4

    - template: templates/e2e-clear-docker-cached-images.yaml
    - template: templates/e2e-run.yaml

################################################################################
  - job: windows_10ent
################################################################################
    displayName: Windows 10 Enterprise (minimal)

    pool:
      name: $(pool.windows.name)
      demands:
        - ImageOverride -equals agent-aziotedge-win10-entn2019-test

    variables:
      os: windows
      arch: amd64
      artifactName: iotedged-windows
      minimal: true

    steps:
    - template: templates/e2e-setup.yaml

    - pwsh: |
        $certBytes = [system.Text.Encoding]::UTF8.GetBytes($env:PACKAGE_SIGNING_CERT)
        $cert = [System.Security.Cryptography.X509Certificates.X509Certificate]::new($certBytes)
        $store = New-Object System.Security.Cryptography.X509Certificates.X509Store `
          -ArgumentList 'Root', 'LocalMachine'
        $store.Open('ReadWrite')
        $store.Add($cert)
      displayName: Install CAB signing root cert
      env:
        PACKAGE_SIGNING_CERT: $(TestIotedgedPackageRootSigningCert)

    - pwsh: |
        Write-Output '>>> BEFORE:'
        netsh interface ipv6 show prefixpolicies
        netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 45 4
        Write-Output '>>> AFTER:'
        netsh interface ipv6 show prefixpolicies
      displayName: Prefer IPv4

    - template: templates/e2e-clear-docker-cached-images.yaml
    - template: templates/e2e-run.yaml
