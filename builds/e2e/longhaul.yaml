trigger: none
pr: none

variables:
  NugetSecurityAnalysisWarningLevel: warn
  images.artifact.name.linux: 'core-linux'
  vsts.project: $(System.TeamProjectId)
  # Variable defined in VSTS
  #azure.keyVault: ''
  #azure.subscription: ''
  #edgelet.package.build: <edglet package build id>
  #images.build: <images build id>
  #pool.name: ''
  #container.registry: ''
  #snitch.storage.account: ''
  # Variables settable at queue time
  #test.startDelay.arm
  #test.startDelay.amd
  #edgelet.package.branchName
  #images.branchName
  #run.linux.amd64.moby: 'true/false'
  #run.linux.arm32v7.moby: 'true/false'
  #run.linux.arm64v8.docker: 'true/false'
  #longhaul.desiredModulesToRestartCSV: ''
  #longhaul.restartIntervalInMins: ''
  #longHaul.sendReportFrequency: 'xx:xx:xx.xx'
  #twinTester.twinUpdateSize: ''
  #metricsCollector.metricsEndpointsCSV
  #metricsCollector.scrapeFrequencyInSecs: 'xx:xx:xx.xx'
  #metricsCollector.uploadTarget
  #test.testMode
  #test.useTRC

jobs:
################################################################################
  - job: linux_amd64_moby
################################################################################
    displayName: Linux AMD64 Moby
    condition: eq(variables['run.linux.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-long-haul -equals true
    steps:
      - template: templates/longhaul-setup.yaml
        parameters:
          edgelet.artifact.name: 'iotedged-ubuntu18.04-amd64'
          images.artifact.name: '$(images.artifact.name.linux)'
          aziotis.artifact.name: 'packages_ubuntu-18.04_amd64'
          aziotis.package.filter: 'aziot-identity-service_*_amd64.deb'
          quickstart.artifactName: 'IotEdgeQuickstart.linux-x64.tar.gz'
      - template: templates/longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.amd)'
          build.source.branch: '$(Build.SourceBranchName)'
          build.repo.path: '$(Build.SourcesDirectory)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHub-ConnStr)'
          eventHub.connectionString: '$(IotHub-EventHubConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchLongHaulAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          longHaul.sendReportFrequency: '$(longHaul.sendReportFrequency)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_amd64'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          logAnalytics.logType: '$(logAnalyticsLogType)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_amd64_moby'
          test.testMode: 'LongHaul'
          test.useTRC: '$(useTRC)'
          test.deploymentFileName: 'long_haul_deployment.template.json'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeLonghaulStorageAccountConnString)'

################################################################################
  - job: linux_arm32v7_moby_amqp
################################################################################
    displayName: Linux ARM32v7 Moby (Amqp Client-Protocol)
    condition: eq(variables['run.linux.arm32v7.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 32
        - run-long-haul -equals true
        - client-transport -equals amqp
    steps:
      - template: templates/longhaul-setup.yaml
        parameters:
          edgelet.artifact.name: 'iotedged-debian9-arm32v7'
          images.artifact.name: '$(images.artifact.name.linux)'
          aziotis.artifact.name: 'packages_debian-9-slim_arm32v7'
          aziotis.package.filter: 'aziot-identity-service_*_armhf.deb'
          quickstart.artifactName: 'IotEdgeQuickstart.linux-arm.tar.gz'
      - template: templates/longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          build.repo.path: '$(Build.SourcesDirectory)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHub-ConnStr)'
          eventHub.connectionString: '$(IotHub-EventHubConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchLongHaulAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          longHaul.sendReportFrequency: '$(longHaul.sendReportFrequency)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm32v7'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          logAnalytics.logType: '$(logAnalyticsLogType)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm32v7_moby'
          test.testMode: 'LongHaul'
          test.useTRC: '$(useTRC)'
          test.deploymentFileName: 'long_haul_deployment_constrained.template.json'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeLonghaulStorageAccountConnString)'
          clientModuleTransportType: 'amqp'

################################################################################
  - job: linux_arm32v7_moby_mqtt
################################################################################
    displayName: Linux ARM32v7 Moby (Mqtt Client-Protocol)
    condition: eq(variables['run.linux.arm32v7.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 32
        - run-long-haul -equals true
        - client-transport -equals mqtt
    steps:
      - template: templates/longhaul-setup.yaml
        parameters:
          edgelet.artifact.name: 'iotedged-debian9-arm32v7'
          images.artifact.name: '$(images.artifact.name.linux)'
          aziotis.artifact.name: 'packages_debian-9-slim_arm32v7'
          aziotis.package.filter: 'aziot-identity-service_*_armhf.deb'
          quickstart.artifactName: 'IotEdgeQuickstart.linux-arm.tar.gz'
      - template: templates/longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          build.repo.path: '$(Build.SourcesDirectory)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHub-ConnStr)'
          eventHub.connectionString: '$(IotHub-EventHubConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchLongHaulAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          longHaul.sendReportFrequency: '$(longHaul.sendReportFrequency)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm32v7'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          logAnalytics.logType: '$(logAnalyticsLogType)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm32v7_moby'
          test.testMode: 'LongHaul'
          test.useTRC: '$(useTRC)'
          test.deploymentFileName: 'long_haul_deployment_constrained.template.json'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeLonghaulStorageAccountConnString)'
          clientModuleTransportType: 'mqtt'

################################################################################
  - job: linux_arm64v8_docker_amqp
################################################################################
    displayName: Linux ARM64v8 Docker (Amqp Client-Protocol)
    condition: eq(variables['run.linux.arm64v8.docker'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 64
        - run-long-haul -equals true
        - client-transport -equals amqp
    steps:
      - template: templates/longhaul-setup.yaml
        parameters:
          edgelet.artifact.name: 'iotedged-ubuntu18.04-aarch64'
          images.artifact.name: '$(images.artifact.name.linux)'
          aziotis.artifact.name: 'packages_ubuntu-18.04_aarch64'
          aziotis.package.filter: 'aziot-identity-service_*_arm64.deb'
          quickstart.artifactName: 'IotEdgeQuickstart.linux-arm64.tar.gz'
      - template: templates/longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          build.repo.path: '$(Build.SourcesDirectory)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHub-ConnStr)'
          eventHub.connectionString: '$(IotHub-EventHubConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchLongHaulAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          longHaul.sendReportFrequency: '$(longHaul.sendReportFrequency)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm64v8'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          logAnalytics.logType: '$(logAnalyticsLogType)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm64v8_docker'
          test.testMode: 'LongHaul'
          test.useTRC: '$(useTRC)'
          test.deploymentFileName: 'long_haul_deployment_constrained.template.json'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeLonghaulStorageAccountConnString)'
          clientModuleTransportType: 'amqp'

################################################################################
  - job: linux_arm64v8_docker_mqtt
################################################################################
    displayName: Linux ARM64v8 Docker (Mqtt Client-Protocol)
    condition: eq(variables['run.linux.arm64v8.docker'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 64
        - run-long-haul -equals true
        - client-transport -equals mqtt 
    steps:
      - template: templates/longhaul-setup.yaml
        parameters:
          edgelet.artifact.name: 'iotedged-ubuntu18.04-aarch64'
          images.artifact.name: '$(images.artifact.name.linux)'
          aziotis.artifact.name: 'packages_ubuntu-18.04_aarch64'
          aziotis.package.filter: 'aziot-identity-service_*_arm64.deb'
          quickstart.artifactName: 'IotEdgeQuickstart.linux-arm64.tar.gz'
      - template: templates/longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay.arm)'
          build.source.branch: '$(Build.SourceBranchName)'
          build.repo.path: '$(Build.SourcesDirectory)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(images.artifact.name.linux)'
          container.registry: '$(container.registry)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHub-ConnStr)'
          eventHub.connectionString: '$(IotHub-EventHubConnStr)'
          snitch.build.number: '$(snitch.build.number)'
          snitch.alert.url: '$(SnitchLongHaulAlertUrl)'
          snitch.storage.account: '$(snitch.storage.account)'
          snitch.storage.masterKey: '$(StorageAccountMasterKeyStress)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          longHaul.sendReportFrequency: '$(longHaul.sendReportFrequency)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          analyzer.consumerGroupId: 'longhaul_linux_arm64v8'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          logAnalytics.logType: '$(logAnalyticsLogType)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: 'linux_arm64v8_docker'
          test.testMode: 'LongHaul'
          test.useTRC: '$(useTRC)'
          test.deploymentFileName: 'long_haul_deployment_constrained.template.json'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeLonghaulStorageAccountConnString)'
          clientModuleTransportType: 'mqtt'
