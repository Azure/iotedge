trigger: none
pr: none

variables:
  Build.SyncSources: false
  images.artifact.name: 'core-linux'
  vsts.project: $(System.TeamProjectId)
  # Variable defined in VSTS
  #azure.keyVault: ''
  #azure.subscription: ''
  #edgelet.package.build: <edglet package build id>
  #images.build: <images build id>
  #pool.name: ''
  #container.registry: ''
  #snitch.storage.account: ''
  # Variables settable at queue time
  #loadGen.message.frequency.amd64: 'xx:xx:xx.xx'
  #loadGen.message.frequency.arm32v7: 'xx:xx:xx.xx'
  #loadGen.transportType: ''
  #run.linux.amd64.moby: 'true/false'
  #run.linux.arm32v7.moby: 'true/false'

jobs:
################################################################################
  - job: linux_amd64_moby
################################################################################
    displayName: Linux AMD64 Moby
    condition: eq(variables['run.linux.amd64.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - run-long-haul -equals true
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu-amd64'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchLongHaulAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          buildVersionToDownload: latestFromBranch
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          buildVersionToDownload: latestFromBranch
          artifactName: $(images.artifact.name)
          itemPattern: |
            $(images.artifact.name)/IotEdgeQuickstart.linux-x64.tar.gz
            $(images.artifact.name)/e2e_deployment_files/long_haul_deployment.template.json
            $(images.artifact.name)/scripts/linux/runE2ETest.sh
            $(images.artifact.name)/artifactInfo.txt
      - task: CopyFiles@2
        displayName: 'Copy Edgelet Artifact'
        inputs:
          SourceFolder: '$(System.ArtifactsDirectory)/$(edgelet.artifact.name)'
          TargetFolder: '$(Agent.HomeDirectory)/../artifacts/$(edgelet.artifact.name)'
          CleanTargetFolder: true
      - task: CopyFiles@2
        displayName: 'Copy Images artifact'
        inputs:
          SourceFolder: '$(System.ArtifactsDirectory)/$(images.artifact.name)'
          TargetFolder: '$(Agent.HomeDirectory)/../artifacts/$(images.artifact.name)'
          CleanTargetFolder: true
      - task: Bash@3
        displayName: 'Run Long Haul Deployment'
        inputs:
          targetType: inline
          script: |
            declare -a cnreg=( $(edgebuilds-azurecr-io) )
            testName="LongHaul"
            . $(Agent.HomeDirectory)/../artifacts/core-linux/artifactInfo.txt
            chmod +x $(Agent.HomeDirectory)/../artifacts/core-linux/scripts/linux/runE2ETest.sh
            sudo $(Agent.HomeDirectory)/../artifacts/core-linux/scripts/linux/runE2ETest.sh -testDir "$(Agent.HomeDirectory)/.." -releaseLabel "LH" -artifactImageBuildNumber "$BuildNumber" -testName "$testName" -containerRegistry "$(container.registry)" -containerRegistryUsername "${cnreg[0]}" -containerRegistryPassword "${cnreg[1]}" -iotHubConnectionString "$(IotHubStressConnString)" -eventHubConnectionString "$(EventHubStressConnStr)" -snitchBuildNumber "$(snitch.build.number)" -snitchStorageAccount "$(snitch.storage.account)" -snitchStorageMasterKey "$(StorageAccountMasterKeyStress)" -snitchAlertUrl "$(SnitchLongHaulAlertUrl)" -loadGenTransportType "$(loadGen.transportType)" -loadGenMessageFrequency "$(loadGen.message.frequency.amd64)"
          workingDirectory: "$(Agent.HomeDirectory)/.."

################################################################################
  - job: linux_arm32v7_moby
################################################################################
    displayName: Linux ARM32v7 Moby
    condition: eq(variables['run.linux.arm32v7.moby'], 'true')
    pool:
      name: $(pool.name)
      demands:
        - run-long-haul -equals true
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
    variables:
      edgelet.artifact.name: 'iotedged-ubuntu-armhf'
    steps:
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault'
        inputs:
          azureSubscription: $(azure.subscription)
          KeyVaultName: $(azure.keyVault)
          SecretsFilter: 'edgebuilds-azurecr-io,IotHubStressConnString,EventHubStressConnStr,StorageAccountMasterKeyStress,SnitchLongHaulAlertUrl'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Edgelet Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(edgelet.package.build)
          buildVersionToDownload: latestFromBranch
          artifactName: $(edgelet.artifact.name)
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Images Artifacts'
        inputs:
          buildType: specific
          project: $(vsts.project)
          pipeline: $(images.build)
          buildVersionToDownload: latestFromBranch
          artifactName: $(images.artifact.name)
          itemPattern: |
            $(images.artifact.name)/IotEdgeQuickstart.linux-arm.tar.gz
            $(images.artifact.name)/e2e_deployment_files/long_haul_deployment.template.arm.json
            $(images.artifact.name)/scripts/linux/runE2ETest.sh
            $(images.artifact.name)/artifactInfo.txt
      - task: CopyFiles@2
        displayName: 'Copy Edgelet Artifact'
        inputs:
          SourceFolder: '$(System.ArtifactsDirectory)/$(edgelet.artifact.name)'
          TargetFolder: '$(Agent.HomeDirectory)/../artifacts/$(edgelet.artifact.name)'
          CleanTargetFolder: true
      - task: CopyFiles@2
        displayName: 'Copy Images Artifact'
        inputs:
          SourceFolder: '$(System.ArtifactsDirectory)/$(images.artifact.name)'
          TargetFolder: '$(Agent.HomeDirectory)/../artifacts/$(images.artifact.name)'
          CleanTargetFolder: true
      - task: Bash@3
        displayName: 'Run Long Haul Deployment'
        inputs:
          targetType: inline
          script: |
            declare -a cnreg=( $(edgebuilds-azurecr-io) )
            testName="LongHaul"
            . $(Agent.HomeDirectory)/../artifacts/core-linux/artifactInfo.txt
            chmod +x $(Agent.HomeDirectory)/../artifacts/core-linux/scripts/linux/runE2ETest.sh
            sudo $(Agent.HomeDirectory)/../artifacts/core-linux/scripts/linux/runE2ETest.sh -testDir "$(Agent.HomeDirectory)/.." -releaseLabel "LH" -artifactImageBuildNumber "$BuildNumber" -testName "$testName" -containerRegistry "$(container.registry)" -containerRegistryUsername "${cnreg[0]}" -containerRegistryPassword "${cnreg[1]}" -iotHubConnectionString "$(IotHubStressConnString)" -eventHubConnectionString "$(EventHubStressConnStr)" -snitchBuildNumber "$(snitch.build.number)" -snitchStorageAccount "$(snitch.storage.account)" -snitchStorageMasterKey "$(StorageAccountMasterKeyStress)" -snitchAlertUrl "$(SnitchLongHaulAlertUrl)" -loadGenTransportType "$(loadGen.transportType)" -loadGenMessageFrequency "$(loadGen.message.frequency.arm32v7)"
          workingDirectory: "$(Agent.HomeDirectory)/.."