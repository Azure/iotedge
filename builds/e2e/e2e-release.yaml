parameters:
  dependency: []

stages:
################################################################################
  - stage: RunE2ETest
################################################################################
    dependsOn: PublishManifests
    condition: in(dependencies.PublishManifests.result, 'Succeeded', 'SucceededWithIssues')
    variables:
      # A 'minimal' pipeline only runs one end-to-end test (TempSensor). This is useful for platforms or
      # environments that are very similar to other platforms/environments in our matrix, Ubuntu 18.04
      # with the 'docker-ce' package vs. Ubuntu 18.04 with the 'iotedge-moby' package vs. the same
      # variations in Ubuntu 20.04. In these instances the platforms/environments are so similar that we
      # don't reasonably expect to encounter differences--if we do, it would likely manifest during
      # installation, or in running a very basic test. We don't need to repeat the entire test suite.
      # The 'minimal' variable defaults to 'false'; we override it in specific jobs as needed.
      minimal: false
      verbose: false
    jobs:
    ################################################################################
      - job: linux_arm32v7
    ################################################################################
        displayName: Linux arm32v7

        pool:
          name: $(pool.custom.name)
          demands: rpi3-e2e-tests

        variables:
          os: linux
          arch: arm32v7
          artifactName: iotedged-debian9-arm32v7
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

        timeoutInMinutes: 120

        steps:
        - task: Docker@2
          displayName: Docker login edgerelease
          inputs:
            command: login
            containerRegistry: iotedge-release-acr
        - template: templates/e2e-clean-directory.yaml
        - template: templates/e2e-setup-base-image-update-release.yaml
        - template: templates/e2e-clear-docker-cached-images.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: ubuntu_1804_msmoby
    ################################################################################
        displayName: Ubuntu 18.04 with iotedge-moby

        pool:
          name: $(pool.linux.name)
          demands:
            - ImageOverride -equals agent-aziotedge-ubuntu-18.04-msmoby

        variables:
          os: linux
          arch: amd64
          artifactName: iotedged-ubuntu18.04-amd64
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

        steps:
        - template: templates/e2e-setup-base-image-update-release.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: ubuntu_1804_docker
    ################################################################################
        displayName: Ubuntu 18.04 with Docker (minimal)

        pool:
          name: $(pool.linux.name)
          demands:
            - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker

        variables:
          os: linux
          arch: amd64
          artifactName: iotedged-ubuntu18.04-amd64
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
          minimal: true

        steps:
        - template: templates/e2e-setup-base-image-update-release.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: ubuntu_2004_msmoby
    ################################################################################
        displayName: Ubuntu 20.04 with iotedge-moby

        pool:
          name: $(pool.linux.name)
          demands:
            - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby

        variables:
          os: linux
          arch: amd64
          artifactName: iotedged-ubuntu20.04-amd64
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

        steps:
        - template: templates/e2e-setup-base-image-update-release.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: ubuntu_2004_arm64v8
    ################################################################################
        displayName: Ubuntu 20.04 with arm64v8
        pool:
          name: $(pool.linux.arm.name)
          demands:
          - ImageOverride -equals agent-aziotedge-ubuntu-20.04-arm64-docker

        variables:
          os: linux
          arch: arm64v8
          artifactName: iotedged-ubuntu20.04-aarch64
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

        steps:
        - task: Docker@2
          displayName: Docker login edgerelease
          inputs:
            command: login
            containerRegistry: iotedge-release-acr
        - template: templates/e2e-clean-directory.yaml
        - template: templates/e2e-setup-base-image-update-release.yaml
        - template: templates/e2e-clear-docker-cached-images.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: ubuntu_2004_docker
    ################################################################################
        displayName: Ubuntu 20.04 with Docker (minimal)

        pool:
          name: $(pool.linux.name)
          demands:
            - ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker

        variables:
          os: linux
          arch: amd64
          artifactName: iotedged-ubuntu20.04-amd64
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
          minimal: true

        steps:
        - template: templates/e2e-setup-base-image-update-release.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: windows_server
    ################################################################################
        displayName: Windows Server 2019

        pool:
          name: $(pool.windows.name)
          demands:
            - ImageOverride -equals agent-aziotedge-winserver-2019dc-test

        variables:
          os: windows
          arch: amd64
          artifactName: iotedged-windows
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]

        steps:
        - template: templates/e2e-setup-base-image-update-release.yaml

        - pwsh: |
            $certBytes = [system.Text.Encoding]::UTF8.GetBytes($env:PACKAGE_SIGNING_CERT)
            $cert = [System.Security.Cryptography.X509Certificates.X509Certificate]::new($certBytes)
            $store = New-Object System.Security.Cryptography.X509Certificates.X509Store `
              -ArgumentList 'Root', 'LocalMachine'
            $store.Open('ReadWrite')
            $store.Add($cert)
          displayName: Install CAB signing root cert
          env:
            PACKAGE_SIGNING_CERT: $(TestIotedgedPackageRootSigningCert)

        - pwsh: |
            Write-Output '>>> BEFORE:'
            netsh interface ipv6 show prefixpolicies
            netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 45 4
            Write-Output '>>> AFTER:'
            netsh interface ipv6 show prefixpolicies
          displayName: Prefer IPv4

        - template: templates/e2e-clear-docker-cached-images.yaml
        - template: templates/e2e-run-base-image-update.yaml

    ################################################################################
      - job: windows_10ent
    ################################################################################
        displayName: Windows 10 Enterprise (minimal)

        pool:
          name: $(pool.windows.name)
          demands:
            - ImageOverride -equals agent-aziotedge-win10-entn2019-test

        variables:
          os: windows
          arch: amd64
          artifactName: iotedged-windows
          builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
          minimal: true

        steps:
        - template: templates/e2e-setup-base-image-update-release.yaml

        - pwsh: |
            $certBytes = [system.Text.Encoding]::UTF8.GetBytes($env:PACKAGE_SIGNING_CERT)
            $cert = [System.Security.Cryptography.X509Certificates.X509Certificate]::new($certBytes)
            $store = New-Object System.Security.Cryptography.X509Certificates.X509Store `
              -ArgumentList 'Root', 'LocalMachine'
            $store.Open('ReadWrite')
            $store.Add($cert)
          displayName: Install CAB signing root cert
          env:
            PACKAGE_SIGNING_CERT: $(TestIotedgedPackageRootSigningCert)

        - pwsh: |
            Write-Output '>>> BEFORE:'
            netsh interface ipv6 show prefixpolicies
            netsh interface ipv6 set prefixpolicy ::ffff:0:0/96 45 4
            Write-Output '>>> AFTER:'
            netsh interface ipv6 show prefixpolicies
          displayName: Prefer IPv4

        - template: templates/e2e-clear-docker-cached-images.yaml
        - template: templates/e2e-run-base-image-update.yaml

    # Disabling until EFLOW agent hardware issues are resolved
    # ################################################################################
    #   - job: EFLOW_amd64
    # ################################################################################
    #     displayName: EFLOW amd64

    #     pool:
    #       name: $(pool.custom.name)
    #       demands:
    #         - Agent.OS -equals Linux
    #         - Agent.OSArchitecture -equals X64
    #         - run-new-e2e-tests -equals true
    #         - eflow -equals true

    #     variables:
    #       os: linux
    #       arch: amd64
    #       artifactName: iotedged-mariner-amd64
    #       NUGET_HTTP_CACHE_PATH: /var/tmp/NuGet/v3-cache
    #       NUGET_PACKAGES: /var/tmp/NuGet/packages
    #       NUGET_PLUGINS_CACHE_PATH: /var/tmp/NuGet/plugins-cache

    #     steps:
    #     - template: templates/e2e-clean-directory.yaml
    #     - template: templates/e2e-setup-base-image-update-release.yaml
    #     - template: templates/e2e-clear-docker-cached-images.yaml
    #     - template: templates/e2e-run-base-image-update.yaml