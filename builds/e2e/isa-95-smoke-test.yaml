trigger: none
pr: none

# Test agents are shared, so schedules must be coordinated to avoid conflicts:
# - main and release/1.4 run daily, but are offset from each other by 12 hours
schedules:
- cron: "0 0 * * *"
  displayName: Daily run main
  branches:
    include:
    - main
  always: true
- cron: "0 12 * * *"
  displayName: Daily run release/1.4
  branches:
    include:
    - release/1.4
  always: true

variables:
  Codeql.Enabled: false
  DisableDockerDetector: true
  itProxy: http://10.16.8.4:3128
  otProxy: http://10.16.5.4:3128
  resourceGroup: nested-edge-isa95
  otProxyName: "otproxy"

resources:
  pipelines:
  - pipeline: ci-build
    source: 'Azure-IoT-Edge-Core CI Build'
    branch: 'main'

stages:
- stage: LockAgents
  jobs:
  - job:  LockAgents
    displayName: Lock agents
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
    steps:
      - template: templates/nested-get-secrets.yaml
      - script: scripts/linux/nestedAgentLock.sh --group '$(agent.group)' --build-id '$(Build.BuildId)'
        env:
          PAT: "$(IotEdgePAT)"
        displayName: Lock agents for nested topology
        name: lock_test_agent

- stage: RunISA95Tests
  dependsOn: LockAgents
  jobs:
  - job: SetupVM_level5
    displayName: SettingUp level 5
    strategy:
      matrix:
        x64:
          arch: X64
          identityArtifactName: aziot-identity-ubuntu24.04-amd64
          artifactName: iotedged-ubuntu24.04-amd64
        arm64:
          arch: ARM64
          identityArtifactName: aziot-identity-ubuntu22.04-aarch64
          artifactName: iotedged-ubuntu22.04-aarch64
    variables:
      level: 5
      upstreamProtocol: amqp
      deploymentFile: nestededge_topLayerBaseDeployment_amqp.json
      parentName: ''
      parentDeviceId: ''
      proxyAddress: $(itProxy)
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals $(arch)
        - level -equals $(level)
    steps:
      - template: templates/clean-drive-and-images.yaml
      - template: templates/nested-get-secrets.yaml
      - template: templates/e2e-clean-directory.yaml
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-create-identity.yaml
        parameters:
          arch: $(arch)
      - template: templates/nested-agent-deploy.yaml
      - task: Bash@3
        displayName: 'Exporting agentName'
        name: exportAgentName
        inputs:
          targetType: inline
          script: |
            echo "##vso[task.setvariable variable=agentName;isOutput=true]$(Agent.Name)"

  - job: SetupVM_level4
    dependsOn: SetupVM_level5
    displayName: SettingUp level 4
    condition: succeeded()
    variables:
      level: 4
      upstreamProtocol: amqp
      deploymentFile: nestededge_middleLayerBaseDeployment_amqp.json
      x64ParentName: $[ dependencies.SetupVM_level5.outputs['x64.deployIoTEdge.deviceName'] ]
      x64ParentDeviceId: $[ dependencies.SetupVM_level5.outputs['x64.createIdentity.parentDeviceId'] ]
      arm64ParentName: $[ dependencies.SetupVM_level5.outputs['arm64.deployIoTEdge.deviceName'] ]
      arm64ParentDeviceId: $[ dependencies.SetupVM_level5.outputs['arm64.createIdentity.parentDeviceId'] ]
    strategy:
      matrix:
        x64:
          arch: X64
          identityArtifactName: aziot-identity-ubuntu24.04-amd64
          artifactName: iotedged-ubuntu24.04-amd64
          parentName: $(x64ParentName)
          parentDeviceId: $(x64ParentDeviceId)
        arm64:
          arch: ARM64
          identityArtifactName: aziot-identity-ubuntu22.04-aarch64
          artifactName: iotedged-ubuntu22.04-aarch64
          parentName: $(arm64ParentName)
          parentDeviceId: $(arm64ParentDeviceId)
    pool:
     name: $(pool.name)
     demands:
       - agent-group -equals $(agent.group)
       - Agent.OS -equals Linux
       - Agent.OSArchitecture -equals $(arch)
       - level -equals $(level)
    steps:
      - template: templates/clean-drive-and-images.yaml
      - template: templates/nested-get-secrets.yaml
      - template: templates/e2e-clean-directory.yaml
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-create-identity.yaml
        parameters:
          arch: $(arch)
      - template: templates/nested-agent-deploy.yaml
      - task: Bash@3
        displayName: 'Exporting agentName'
        name: exportAgentName
        inputs:
          targetType: inline
          script: |
            echo "##vso[task.setvariable variable=agentName;isOutput=true]$(Agent.Name)"

  - job: SetupVM_level3
    dependsOn: SetupVM_level4
    displayName: SettingUp level 3
    condition: succeeded()
    variables:
      level: 3
      upstreamProtocol: amqp
      deploymentFile: nestededge_isa95_smoke_test_BaseDeployment.json
      proxyAddress: $(otProxy)
      x64ParentName: $[ dependencies.SetupVM_level4.outputs['x64.deployIoTEdge.deviceName'] ]
      x64ParentDeviceId: $[ dependencies.SetupVM_level4.outputs['x64.createIdentity.parentDeviceId'] ]
      arm64ParentName: $[ dependencies.SetupVM_level4.outputs['arm64.deployIoTEdge.deviceName'] ]
      arm64ParentDeviceId: $[ dependencies.SetupVM_level4.outputs['arm64.createIdentity.parentDeviceId'] ]
    strategy:
      matrix:
        x64:
          arch: X64
          identityArtifactName: aziot-identity-ubuntu24.04-amd64
          artifactName: iotedged-ubuntu24.04-amd64
          parentName: $(x64ParentName)
          parentDeviceId: $(x64ParentDeviceId)
        arm64:
          arch: ARM64
          identityArtifactName: aziot-identity-ubuntu22.04-aarch64
          artifactName: iotedged-ubuntu22.04-aarch64
          parentName: $(arm64ParentName)
          parentDeviceId: $(arm64ParentDeviceId)
    pool:
     name: $(pool.name)
     demands:
       - agent-group -equals $(agent.group)
       - Agent.OS -equals Linux
       - Agent.OSArchitecture -equals $(arch)
       - level -equals $(level)
    steps:
      - template: templates/clean-drive-and-images.yaml
      - template: templates/nested-get-secrets.yaml
      - template: templates/e2e-clean-directory.yaml
      - template: templates/nested-get-root-ca.yaml
      - template: templates/nested-create-identity.yaml
        parameters:
          arch: $(arch)
      - template: templates/nested-agent-deploy.yaml
      - task: Bash@3
        displayName: 'Exporting agentName'
        name: exportAgentName
        inputs:
          targetType: inline
          script: |
            echo "##vso[task.setvariable variable=agentName;isOutput=true]$(Agent.Name)"

  - job: Run_ISA95_test
    dependsOn:
      - SetupVM_level5
      - SetupVM_level4
      - SetupVM_level3
    displayName: Run ISA-95 test
    condition: succeeded()
    variables:
      x64Lvl3DeviceId: $[ dependencies.SetupVM_level3.outputs['x64.createIdentity.parentDeviceId'] ]
      x64DeviceLvl5AgentName: $[ dependencies.SetupVM_level5.outputs['x64.exportAgentName.agentName'] ]
      x64DeviceLvl4AgentName: $[ dependencies.SetupVM_level4.outputs['x64.exportAgentName.agentName'] ]
      x64DeviceLvl3AgentName: $[ dependencies.SetupVM_level3.outputs['x64.exportAgentName.agentName'] ]
      x64ParentName: $[ dependencies.SetupVM_level5.outputs['x64.deployIoTEdge.deviceName'] ]
      x64ParentDeviceId: $[ dependencies.SetupVM_level5.outputs['x64.createIdentity.parentDeviceId'] ]
      arm64Lvl3DeviceId: $[ dependencies.SetupVM_level3.outputs['arm64.createIdentity.parentDeviceId'] ]
      arm64DeviceLvl5AgentName: $[ dependencies.SetupVM_level5.outputs['arm64.exportAgentName.agentName'] ]
      arm64DeviceLvl4AgentName: $[ dependencies.SetupVM_level4.outputs['arm64.exportAgentName.agentName'] ]
      arm64DeviceLvl3AgentName: $[ dependencies.SetupVM_level3.outputs['arm64.exportAgentName.agentName'] ]
      arm64ParentName: $[ dependencies.SetupVM_level5.outputs['arm64.deployIoTEdge.deviceName'] ]
      arm64ParentDeviceId: $[ dependencies.SetupVM_level5.outputs['arm64.createIdentity.parentDeviceId'] ]
      os: linux
      arch: amd64
      identityArtifactName: aziot-identity-ubuntu24.04-amd64
      artifactName: iotedged-ubuntu24.04-amd64
      nestededge: true
      proxyAddress: $(otProxy)
      test_type: nestededge_isa95
      verbose: false
    strategy:
      matrix:
        x64:
          Lvl3DeviceId: $(x64Lvl3DeviceId)
          deviceLvl5AgentName: $(x64DeviceLvl5AgentName)
          deviceLvl4AgentName: $(x64DeviceLvl4AgentName)
          deviceLvl3AgentName: $(x64DeviceLvl3AgentName)
          parentName: $(x64ParentName)
          parentDeviceId: $(x64ParentDeviceId)
        arm64:
          Lvl3DeviceId: $(arm64Lvl3DeviceId)
          deviceLvl5AgentName: $(arm64DeviceLvl5AgentName)
          deviceLvl4AgentName: $(arm64DeviceLvl4AgentName)
          deviceLvl3AgentName: $(arm64DeviceLvl3AgentName)
          parentName: $(arm64ParentName)
          parentDeviceId: $(arm64ParentDeviceId)
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - level -equals jumpbox
    steps:
      - template: templates/nested-get-secrets.yaml
      - template: templates/e2e-clean-directory.yaml
      - template: templates/nested-isa95-lock.yaml
        parameters:
          agentName: $(deviceLvl5AgentName)
          lvl: 5
      - template: templates/nested-isa95-lock.yaml
        parameters:
          agentName: $(deviceLvl4AgentName)
          lvl: 4
      - template: templates/nested-isa95-lock.yaml
        parameters:
          agentName: $(otProxyName)
          lvl: 35
      - template: templates/nested-isa95-lock.yaml
        parameters:
          agentName: $(deviceLvl3AgentName)
          lvl: 3
      - pwsh: |
          #Sleep 30s to let the rules time to set
          Start-Sleep -s 30
        displayName: Wait for network to lock
      - template: templates/nested-get-root-ca.yaml
      - template: templates/e2e-setup.yaml
      - template: templates/e2e-run.yaml
        parameters:
          EventHubCompatibleEndpoint: '$(IotHub-EventHubConnStr)'
          IotHubConnectionString: '$(IotHub-ConnStr)'
          test_type: $(test_type)
      - template: templates/nested-isa95-unlock.yaml
        parameters:
          agentName: $(deviceLvl5AgentName)
          nsgName: $(isa95_lock_lvl5.nsgName)
      - template: templates/nested-isa95-unlock.yaml
        parameters:
          agentName: $(deviceLvl4AgentName)
          nsgName: $(isa95_lock_lvl4.nsgName)
      - template: templates/nested-isa95-unlock.yaml
        parameters:
          agentName: $(otProxyName)
          nsgName: $(isa95_lock_lvl35.nsgName)
      - template: templates/nested-isa95-unlock.yaml
        parameters:
          agentName: $(deviceLvl3AgentName)
          nsgName: $(isa95_lock_lvl3.nsgName)

- stage: Cleanup
  condition: always()
  dependsOn:
    - LockAgents
    - RunISA95Tests
  jobs:
  - job: Clean_images
    displayName: Clean up Docker images
    strategy:
      matrix:
        L3-x64:
          level: 3
          arch: X64
        L3-arm64:
          level: 3
          arch: ARM64
        L4-x64:
          level: 4
          arch: X64
        L4-arm64:
          level: 4
          arch: ARM64
        L5-x64:
          level: 5
          arch: X64
        L5-arm64:
          level: 5
          arch: ARM64
        Jumpbox:
          level: jumpbox
          arch: X64
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals $(arch)
        - level -equals $(level)
    steps:
      - template: templates/e2e-clean-all-images.yaml

  - job:  Unlock_agents
    displayName: Unlock agents
    dependsOn: Clean_images
    condition: always()
    timeoutInMinutes: 10
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
    steps:
      - template: templates/nested-get-secrets.yaml
      - template: templates/unlock-test-agents.yaml

  - job:  Clean_up_identities
    displayName: Clean up identities
    dependsOn: Clean_images
    condition: always()
    timeoutInMinutes: 10
    variables:
      x64Lvl5DeviceId: $[ stageDependencies.RunISA95Tests.SetupVM_level5.outputs['x64.createIdentity.parentDeviceId'] ]
      x64Lvl4DeviceId: $[ stageDependencies.RunISA95Tests.SetupVM_level4.outputs['x64.createIdentity.parentDeviceId'] ]
      x64Lvl3DeviceId: $[ stageDependencies.RunISA95Tests.SetupVM_level3.outputs['x64.createIdentity.parentDeviceId'] ]
      x64DeviceLvl5IoTHubName: $[ stageDependencies.RunISA95Tests.SetupVM_level5.outputs['x64.createIdentity.iotHubName'] ]
      x64DeviceLvl4IoTHubName: $[ stageDependencies.RunISA95Tests.SetupVM_level4.outputs['x64.createIdentity.iotHubName'] ]
      x64DeviceLvl3IoTHubName: $[ stageDependencies.RunISA95Tests.SetupVM_level3.outputs['x64.createIdentity.iotHubName'] ]
      x64DeviceLvl5AgentName: $[ stageDependencies.RunISA95Tests.SetupVM_level5.outputs['x64.exportAgentName.agentName'] ]
      x64DeviceLvl4AgentName: $[ stageDependencies.RunISA95Tests.SetupVM_level4.outputs['x64.exportAgentName.agentName'] ]
      x64DeviceLvl3AgentName: $[ stageDependencies.RunISA95Tests.SetupVM_level3.outputs['x64.exportAgentName.agentName'] ]
      arm64Lvl5DeviceId: $[ stageDependencies.RunISA95Tests.SetupVM_level5.outputs['arm64.createIdentity.parentDeviceId'] ]
      arm64Lvl4DeviceId: $[ stageDependencies.RunISA95Tests.SetupVM_level4.outputs['arm64.createIdentity.parentDeviceId'] ]
      arm64Lvl3DeviceId: $[ stageDependencies.RunISA95Tests.SetupVM_level3.outputs['arm64.createIdentity.parentDeviceId'] ]
      arm64DeviceLvl5IoTHubName: $[ stageDependencies.RunISA95Tests.SetupVM_level5.outputs['arm64.createIdentity.iotHubName'] ]
      arm64DeviceLvl4IoTHubName: $[ stageDependencies.RunISA95Tests.SetupVM_level4.outputs['arm64.createIdentity.iotHubName'] ]
      arm64DeviceLvl3IoTHubName: $[ stageDependencies.RunISA95Tests.SetupVM_level3.outputs['arm64.createIdentity.iotHubName'] ]
      arm64DeviceLvl5AgentName: $[ stageDependencies.RunISA95Tests.SetupVM_level5.outputs['arm64.exportAgentName.agentName'] ]
      arm64DeviceLvl4AgentName: $[ stageDependencies.RunISA95Tests.SetupVM_level4.outputs['arm64.exportAgentName.agentName'] ]
      arm64DeviceLvl3AgentName: $[ stageDependencies.RunISA95Tests.SetupVM_level3.outputs['arm64.exportAgentName.agentName'] ]
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - level -equals jumpbox
    steps:
      - template: templates/nested-get-secrets.yaml
      - template: templates/nested-clean-identity.yaml
        parameters:
          arch: 'x64'
          iotHubName: $(x64DeviceLvl5IoTHubName)
          deviceId: $(x64Lvl5DeviceId)
          lvl: 5
      - template: templates/nested-clean-identity.yaml
        parameters:
          arch: 'x64'
          iotHubName: $(x64DeviceLvl4IoTHubName)
          deviceId: $(x64Lvl4DeviceId)
          lvl: 4
      - template: templates/nested-clean-identity.yaml
        parameters:
          arch: 'x64'
          iotHubName: $(x64DeviceLvl3IoTHubName)
          deviceId: $(x64Lvl3DeviceId)
          lvl: 3
      - template: templates/nested-clean-identity.yaml
        parameters:
          arch: 'arm64'
          iotHubName: $(arm64DeviceLvl5IoTHubName)
          deviceId: $(arm64Lvl5DeviceId)
          lvl: 5
      - template: templates/nested-clean-identity.yaml
        parameters:
          arch: 'arm64'
          iotHubName: $(arm64DeviceLvl4IoTHubName)
          deviceId: $(arm64Lvl4DeviceId)
          lvl: 4
      - template: templates/nested-clean-identity.yaml
        parameters:
          arch: 'arm64'
          iotHubName: $(arm64DeviceLvl3IoTHubName)
          deviceId: $(arm64Lvl3DeviceId)
          lvl: 3
