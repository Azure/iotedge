parameters:
  agentName: ''
  lvl: ''

steps:
  - task: Bash@3
    displayName: 'Release ${{parameters.agentName}} on level ${{ parameters.lvl }}'
    condition: always()
    env:
      POOL_ID: 123
      API_VER: 6.0
      PAT: $(IotEdge1.PAT)
    inputs:
      targetType: inline
      script: |
        agentName="${{ parameters.agentName }}"
        if [ -z $agentName ]; then
          exit 0
        fi

        # Get info of Azure-IoT-Edge-Core pool (poolId=123) test agents
        agentsInfo=$(curl -s -u :$(edgebuild-1-PAT) --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents?api-version=$API_VER")
        # Filter test agent ID given the name
        agentId=$(echo $agentsInfo | jq '.value | .[] | select(.name=="${{ parameters.agentName }}") | .id')
        # Get test agent's capabilities
        agentCapabilities=$(curl -s -u :$(edgebuild-1-PAT) --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents/$agentId?includeCapabilities=true&api-version=$API_VER")
        # Filter for user capabilities, access "status" field and append buildId as a suffix
        newAgentUserCapabilities=$(echo $agentCapabilities | jq '.userCapabilities | (.["status"]) |= "unlocked"')
        # Update the user capability on the agent pool for this agent
        responseCapabilities=$(curl -s -u :$(edgebuild-1-PAT) \
        --request PUT "https://msazure.visualstudio.com/_apis/distributedtask/pools/$POOL_ID/agents/$agentId/usercapabilities" \
        -H "Content-Type:application/json" \
        -H "Accept: application/json;api-version=5.0;" \
        --data @<(cat <<EOF
        $newAgentUserCapabilities
        EOF
        ))
        # Validate the capability update was successful
        responseUserCapabilities=$(echo $responseCapabilities | jq '.userCapabilities')
        [[ $responseUserCapabilities == $newAgentUserCapabilities ]] && exit 0 || exit -1