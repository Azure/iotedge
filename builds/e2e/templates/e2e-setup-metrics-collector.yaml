steps:
  - checkout: self
    fetchDepth: 100
  
  - task: AzureKeyVault@1
    displayName: Get secrets
    inputs:
      azureSubscription: $(az.subscription)
      keyVaultName: $(kv.name)
      secretsFilter: >-
        ReleaseContainerRegistryPassword,
        TestEventHubCompatibleEndpoint,
        TestIotHubConnectionString,
        TestIotHubResourceId,
        TestRootCaCertificate,
        TestRootCaKey,
        TestRootCaPassword

  - pwsh: |
      $certsDir = '$(System.ArtifactsDirectory)/certs'
      New-Item "$certsDir" -ItemType Directory -Force | Out-Null
      $env:ROOT_CERT | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.cert.pem"
      $env:ROOT_KEY | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.key.pem"
      Write-Output "##vso[task.setvariable variable=certsDir]$certsDir"
    displayName: Install CA keys
    env:
      ROOT_CERT: $(TestRootCaCertificate)
      ROOT_KEY: $(TestRootCaKey)
  
  - pwsh: |
      $testDir = '$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test'
      dotnet build -c $(Build.Configuration) $testDir
  
      $binDir = Convert-Path "$testDir/bin/$(Build.Configuration)/net6.0"
      Write-Output "##vso[task.setvariable variable=binDir]$binDir"
    displayName: Build tests
    env:
      http_proxy: $(Agent.ProxyUrl)
      https_proxy: $(Agent.ProxyUrl)
  
  - pwsh: |
      $imagePrefix = '$(registry.address)/microsoft/azureiotedge'
      $caCertScriptPath = Convert-Path '$(Build.SourcesDirectory)/tools/CACertificates'
      $rootCaCertificatePath = Convert-Path '$(certsDir)/rsa_root_ca.cert.pem';
      $rootCaPrivateKeyPath = Convert-Path '$(certsDir)/rsa_root_ca.key.pem';
      $versionInfo = "$(version)-$(os)-$(arch)"
      $runtimeVersion=$(cat versionInfo.json | grep -oP '^\s*\"version\":\s*\"\K\d+\.\d+')
      $edgeAgentImage = "$imagePrefix-agent:$runtimeVersion";
      $edgeHubImage = "$imagePrefix-hub:$runtimeVersion";

      echo "Edge agent image: $edgeAgentImage"
      echo "Edge hub image: $edgeHubImage"
  
      $context = @{
        nestededge = 'false';
        isa95Tag = 'false';
        edgeAgentImage = "$edgeAgentImage";
        edgeHubImage = "$edgeHubImage";
        metricsCollectorImage = "$imagePrefix-metrics-collector:$versionInfo";
        iotHubResourceId = "$env:IOT_HUB_RESOURCE_ID";
        registries = @(
          @{
            address = '$(registry.address)';
            username = '$(registry.username)';
          }
        );
        caCertScriptPath = "$caCertScriptPath";
        rootCaCertificatePath = "$rootCaCertificatePath";
        rootCaPrivateKeyPath = "$rootCaPrivateKeyPath";
        logFile = Join-Path '$(binDir)' 'testoutput.log';
        verbose = '$(verbose)';
        getSupportBundle = 'true';
        teardownTimeoutMinutes = 10;
      }
  
      if ('$(arch)' -eq 'arm32v7' -Or '$(arch)' -eq 'arm64v8')
      {
        $context['optimizeForPerformance'] = 'false'
        $context['setupTimeoutMinutes'] = 10
        $context['teardownTimeoutMinutes'] = 10
        $context['testTimeoutMinutes'] = 10
      }
  
      if ($env:AGENT_PROXYURL)
      {
        $context['testRunnerProxy'] = $env:AGENT_PROXYURL
        $context['edgeProxy'] = $env:AGENT_PROXYURL
      }
      
      $context | ConvertTo-Json | Out-File -Encoding Utf8 '$(binDir)/context.json'
      Get-Content -Path '$(binDir)/context.json'
    displayName: Create test arguments file (context.json)
    env:
      IOT_HUB_RESOURCE_ID: $(TestIotHubResourceId)
