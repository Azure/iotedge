parameters:
  level: ''

jobs:
  - job: SetupVM_level_${{level}}
    displayName: SettingUp
    condition: ne(variables['agent.group'], '')
    timeoutInMinutes: 180
    variables:
      testrun.vmTier: L3_5
      testrun.waitTimeMin: 1

    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
        - run-idle -equals true
        - nested-edge -equals $(testrun.vmTier)

    steps:
      - script: echo "JobName:$(Agent.JobName)"
        displayName: jobName

      - bash: echo "##vso[task.setvariable variable=$(testrun.vmTier).readyAgent;isOutput=true]$(Agent.Name)"
        name: var1

      - task: Bash@3
        name: lock_test_agent
        displayName: 'Reserve $(Agent.Name)'
        env:
          POOL_ID: 123
          API_VER: 6.0
          PAT: $(IotEdge1.PAT)
        inputs:
          targetType: inline
          script: |
            # Install pre-requisite 'jq'
            CMD=jq
            if ! command -v $CMD &> /dev/null
            then
              echo "Command '$CMD' not found, Installing '$CMD'"
              sudo add-apt-repository universe
              sudo apt-get update
              sudo apt-get install -y $CMD
            fi

            # Get info of Azure-IoT-Edge-Core pool (poolId=123) test agents
            agentsInfo=$(curl -s -u :$PAT --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents?api-version=$API_VER")

            # Filter test agent ID given the name
            agentId=$(echo $agentsInfo | jq '.value | .[] | select(.name=="$(Agent.Name)") | .id')

            # Get test agent's capabilities
            agentCapabilities=$(curl -s -u :$PAT --request GET "https://dev.azure.com/msazure/_apis/distributedtask/pools/$POOL_ID/agents/$agentId?includeCapabilities=true&api-version=$API_VER")

            # Filter for user capabilities, access "nested-edge" field and append buildId as a suffix
            newAgentUserCapabilities=$(echo $agentCapabilities | jq '.userCapabilities | (.["nested-edge"]) |= sub("$"; "_$(Build.BuildId)")')

            # Update the user capability on the agent pool for this agent
            responseCapabilities=$(curl -s -u :$PAT \
            --request PUT "https://msazure.visualstudio.com/_apis/distributedtask/pools/$POOL_ID/agents/$agentId/usercapabilities" \
            -H "Content-Type:application/json" \
            -H "Accept: application/json;api-version=5.0;" \
            --data @<(cat <<EOF
            $newAgentUserCapabilities
            EOF
            ))

            # Validate the capability update was successful
            responseUserCapabilities=$(echo $responseCapabilities | jq '.userCapabilities')
            echo "##vso[task.setvariable variable=agentName;isOutput=true]$(Agent.Name)"
            [[ $responseUserCapabilities == $newAgentUserCapabilities ]] && exit 0 || exit -1

      - task: Bash@3
        name: setting_up
        displayName: 'Setting up $(testrun.vmTier)'
        inputs:
          targetType: inline
          script: |
            # Use sleep to pretend it is a setup time
            echo "$(Agent.Name) is sleeping for $(testrun.waitTimeMin)"
            sleep $(testrun.waitTimeMin)m
            echo "$(Agent.Name) is waking up"

      #Method 1 -- sleep until it's time
      - script: |
            # This works
            echo "var1.L3.readyAgent= $(var1.L3.readyAgent)"
            echo "var1.L3_5.readyAgent= $(var1.L3_5.readyAgent)"
            echo "var1.L4.readyAgent= $(var1.L4.readyAgent)"
            echo "SetupVM_job13= $(dependencies.SetupVM_job13.outputs['var1.L3.readyAgent'])"
            echo "[$(Agent.JobName)]= $(dependencies.$(Agent.JobName).outputs['var1.L3.readyAgent'])"
        name: RunTest
