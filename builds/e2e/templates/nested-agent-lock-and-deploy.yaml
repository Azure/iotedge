steps:
  - script: echo "JobName:$(Agent.JobName)"
    displayName: jobName
  - template: set-run-flag.yaml
  - task: AzureKeyVault@1
    condition: eq(variables['run.flag'], 1)
    displayName: 'EdgeBuild Azure Key Vault'
    inputs:
      azureSubscription: $(service.connections)
      KeyVaultName: $(azure.keyVault)
      SecretsFilter: 'edgebuilds-azurecr-io-username,edgebuilds-azurecr-io-pwd,kvLogAnalyticWorkspaceId,kvLogAnalyticSharedKey,EdgeConnectivityStorageAccountConnString'
  - task: AzureKeyVault@1
    condition: eq(variables['run.flag'], 1)
    displayName: 'Nested Edge Azure Key Vault'
    inputs:
      azureSubscription: $(service.connections)
      KeyVaultName: $(azure.keyVault)
      SecretsFilter: 'ConnectivityNestedEdge-ConnectionString,ConnectivityNestedEdge-EventHubConnectionString,edgebuild-blob-core-connection-string,edgebuild-service-principal-secret,edgebuild-1-PAT' 
  - template: lock-test-agent.yaml
  - task: Bash@3
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Az login'
    inputs:
      targetType: inline
      script: |     
        az login --service-principal -p $(edgebuild-service-principal-secret) -u $(servicePrincipal.clientId) --tenant $(servicePrincipal.tenantId) 
  - task: Bash@3
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Get rootCA'
    inputs:
      targetType: inline
      script: |
        az storage blob download --file rootCA.tar.bz2 --container-name test-certificates --name test-certs.tar.bz2 --connection-string "$(edgebuild-blob-core-connection-string)"
        sudo tar -xjvf rootCA.tar.bz2           
  - task: DownloadBuildArtifacts@0
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Download Edgelet Artifacts'
    inputs:
      buildType: specific
      project: $(vsts.project)
      pipeline: $(edgelet.package.build)
      branchName: $(edgelet.package.branchName)
      buildVersionToDownload: latestFromBranch
      downloadPath: '$(Build.StagingDirectory)'
      artifactName: $(edgelet.artifact.name)
  - task: DownloadBuildArtifacts@0
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Download Images Artifacts'
    inputs:
      buildType: specific
      project: $(vsts.project)
      pipeline: $(images.build)
      branchName: $(images.branchName)
      buildVersionToDownload: latestFromBranch
      downloadPath: '$(Build.StagingDirectory)'
      artifactName: $(images.artifact.name.linux)
      itemPattern: |
        $(images.artifact.name.linux)/e2e_deployment_files/$(deploymentFileName)
        $(images.artifact.name.linux)/scripts/connectivityTest.sh
        $(images.artifact.name.linux)/scripts/testHelper.sh
        $(images.artifact.name.linux)/artifactInfo.txt  
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Copy Edgelet Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/$(edgelet.artifact.name)"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/$(edgelet.artifact.name)"
      CleanTargetFolder: true
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Copy Images Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/$(images.artifact.name.linux)"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/$(images.artifact.name.linux)"
      CleanTargetFolder: true 
  - task: Bash@3
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Run Connectivity Deployment'
    name: deployIoTEdge
    inputs:
      targetType: inline
      #@TODO change Build.Repository.LocalPath to use artifact.
      #@TODO remove hard coding of deploymentFileName: It is also hardcoded in install.sh
      #@TODO remove hard coding of level and parent
      script: |
        declare -a cnreg=( ${edgebuilds-azurecr-io-pwd} )
        . $(Agent.HomeDirectory)/../artifacts/$(images.artifact.name.linux)/artifactInfo.txt

        chmod +x $(Build.Repository.LocalPath)/test/connectivity/scripts/install.sh
        
        sudo $(Build.Repository.LocalPath)/test/connectivity/scripts/install.sh \
          -testDir "$(Agent.HomeDirectory)/.." \
          -releaseLabel "ct$(agent.group)" \
          -artifactImageBuildNumber "$BuildNumber" \
          -containerRegistry "$(container.registry)" \
          -containerRegistryUsername "$(edgebuilds-azurecr-io-username)" \
          -containerRegistryPassword "$(edgebuilds-azurecr-io-pwd)" \
          -iotHubConnectionString "$(ConnectivityNestedEdge-ConnectionString)" \
          -eventHubConnectionString "$(ConnectivityNestedEdge-EventHubConnectionString)" \
          -upstreamProtocol "$(upstream.protocol)" \
          -loadGenMessageFrequency "$(loadGen.message.frequency.amd64)" \
          -logAnalyticsWorkspaceId "$(kvLogAnalyticWorkspaceId)" \
          -logAnalyticsSharedKey "$(kvLogAnalyticSharedKey)" \
          -logAnalyticsLogType "$(testResultCoordinator.logAnalyticsLogType)" \
          -verificationDelay "$(testResultCoordinator.verificationDelay)" \
          -metricsEndpointsCSV "$(metricsCollector.metricsEndpointsCSV)" \
          -metricsScrapeFrequencyInSecs "$(metricsCollector.scrapeFrequencyInSecs)" \
          -metricsUploadTarget "$(metricsCollector.uploadTarget)" \
          -deploymentFileName "$(deploymentFile)" \
          -EdgeHubRestartTestRestartPeriod "$(edgeHubRestartTest.restartPeriod)" \
          -EdgeHubRestartTestSdkOperationTimeout "$(edgeHubRestartTest.sdkOperationTimeout)" \
          -storageAccountConnectionString "$(EdgeConnectivityStorageAccountConnString)" \
          -devOpsAccessToken "$(System.AccessToken)" \
          -devOpsBuildId "$(Build.BuildId)" \
          -edgeRuntimeBuildNumber "$(Build.BuildNumber)" \
          -customEdgeAgentImage "$(customEdgeAgent.image)" \
          -customEdgeHubImage "$(customEdgeHub.image)" \
          -testRuntimeLogLevel "$(test.runtimeLogLevel)" \
          -testInfo "$testInfo" \
          -subscription "$(azure.subscription)" \
          -level "$(level)" \
          -parentName  "$(parentName)"\
          -parentConnectionString "$(parentConnectionString)"\
          -waitForTestComplete \
          -cleanAll
  - template: unlock-test-agent.yaml