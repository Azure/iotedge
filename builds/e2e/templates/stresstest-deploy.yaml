parameters:
  release.label: ''
  edgelet.artifact.name: ''
  images.artifact.name: ''
  container.registry: ''
  container.registry.username: ''
  container.registry.password: ''
  iotHub.connectionString: ''
  eventHub.connectionString: ''
  snitch.build.number: ''
  snitch.alert.url: ''
  snitch.storage.account: ''
  snitch.storage.masterKey: ''
  amqp.settings.enabled: 'true'
  mqtt.settings.enabled: 'true'
  loadGen.message.frequency: ''
  transportType1: 'Amqp_Tcp_Only'
  transportType2: 'Amqp_WebSocket_Only'
  transportType3: 'Mqtt_Tcp_Only'
  transportType4: 'Mqtt_WebSocket_Only'
  analyzer.consumerGroupId: ''
  analyzer.logAnalytics.enabled: ''
  analyzer.logAnalytics.logType: ''
  logAnalytics.workspaceId: ''
  logAnalytics.sharedKey: ''
  twinTester.twinUpdateSize: ''
  twinTester.twinUpdateFrequency: ''
  twinTester.twinUpdateFailureThreshold: ''
  metricsCollector.metricsEndpointsCSV: ''
  metricsCollector.scrapeFrequencyInSecs: ''
  metricsCollector.uploadTarget: ''
  metricsCollector.hostPlatform: ''

steps:
  - task: CopyFiles@2
    displayName: 'Copy Edgelet Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['edgelet.artifact.name'] }}"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/${{ parameters['edgelet.artifact.name'] }}"
      CleanTargetFolder: true
  - task: CopyFiles@2
    displayName: 'Copy Images Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['images.artifact.name'] }}"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}"
      CleanTargetFolder: true
  - task: Bash@3
    displayName: 'Run Stress Test Deployment'
    inputs:
      targetType: inline
      script: |
        declare -a cnreg=( ${{ parameters['container.registry.credential'] }} )
        testName="Stress"
        . $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/artifactInfo.txt
        echo "snitcher duration in mins=$(snitcher.test.duration.in.mins)"
        chmod +x $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/linux/runE2ETest.sh
        sudo $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/linux/runE2ETest.sh \
          -testDir "$(Agent.HomeDirectory)/.." \
          -releaseLabel "${{ parameters['release.label'] }}" \
          -artifactImageBuildNumber "$BuildNumber" \
          -testName "$testName" \
          -containerRegistry "${{ parameters['container.registry'] }}" \
          -containerRegistryUsername "${{ parameters['container.registry.username'] }}" \
          -containerRegistryPassword "${{ parameters['container.registry.password'] }}" \
          -iotHubConnectionString "${{ parameters['iotHub.connectionString'] }}" \
          -eventHubConnectionString "${{ parameters['eventHub.connectionString'] }}" \
          -snitchBuildNumber "${{ parameters['snitch.build.number'] }}" \
          -snitchStorageAccount "${{ parameters['snitch.storage.account'] }}" \
          -snitchStorageMasterKey "${{ parameters['snitch.storage.masterKey'] }}" \
          -snitchAlertUrl "${{ parameters['snitch.alert.url'] }}" \
          -transportType1 "${{ parameters['transportType1'] }}" \
          -transportType2 "${{ parameters['transportType2'] }}" \
          -transportType3 "${{ parameters['transportType3'] }}" \
          -transportType4 "${{ parameters['transportType4'] }}" \
          -amqpSettingsEnabled "${{ parameters['amqp.settings.enabled'] }}" \
          -mqttSettingsEnabled "${{ parameters['mqtt.settings.enabled'] }}" \
          -loadGenMessageFrequency "${{ parameters['loadGen.message.frequency'] }}" \
          -snitchTestDurationInSecs "$(($(snitcher.test.duration.in.mins)*60))" \
          -eventHubConsumerGroupId "${{ parameters['analyzer.consumerGroupId'] }}" \
          -logAnalyticsEnabled "${{ parameters['analyzer.logAnalytics.enabled'] }}" \
          -logAnalyticsLogType "${{ parameters['analyzer.logAnalytics.logType'] }}" \
          -logAnalyticsWorkspaceId "${{ parameters['logAnalytics.workspaceId'] }}" \
          -logAnalyticsSharedKey "${{ parameters['logAnalytics.sharedKey'] }}" \
          -twinUpdateSize "${{ parameters['twinTester.twinUpdateSize'] }}" \
          -twinUpdateFrequency "${{ parameters['twinTester.twinUpdateFrequency'] }}" \
          -twinUpdateFailureThreshold "${{ parameters['twinTester.twinUpdateFailureThreshold'] }}" \
          -metricsEndpointsCSV "${{ parameters['metricsCollector.metricsEndpointsCSV'] }}" \
          -metricsScrapeFrequencyInSecs "${{ parameters['metricsCollector.scrapeFrequencyInSecs'] }}" \
          -metricsUploadTarget "${{ parameters['metricsCollector.uploadTarget'] }}" \
          -hostPlatform "${{ parameters['metricsCollector.hostPlatform'] }}" \
          -cleanAll
        #Remove all pending jobs
        atrm $(atq | cut -f1)
        durationToStop=$(($(snitcher.test.duration.in.mins)+30))
        echo "Duration in mins to stop iotedge=$durationToStop"
        echo "sudo systemctl stop iotedge" | at now + $durationToStop minutes && atq
      workingDirectory: '$(Agent.HomeDirectory)/..'