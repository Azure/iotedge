parameters:
  device.label: ''
  edgelet.artifact.name: ''
  images.artifact.name: ''
  container.registry: ''
  container.registry.credential: ''
  iotHub.connectionString: ''
  eventHub.connectionString: ''
  snitch.build.number: ''
  snitch.alert.url: ''
  snitch.storage.account: ''
  snitch.storage.masterKey: ''
  amqp.settings.enabled: 'true'
  mqtt.settings.enabled: 'true'
  loadGen.message.frequency: ''
  loadGen1.transportType: 'amqp'
  loadGen2.transportType: 'amqp'
  loadGen3.transportType: 'mqtt'
  loadGen4.transportType: 'mqtt'

steps:
  - task: CopyFiles@2
    displayName: 'Copy Edgelet Artifact'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/${{ parameters.edgelet.artifact.name }}'
      TargetFolder: '$(Agent.HomeDirectory)/../artifacts/${{ parameters.edgelet.artifact.name }}'
      CleanTargetFolder: true
  - task: CopyFiles@2
    displayName: 'Copy Images Artifact'
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/${{ parameters.images.artifact.name }}'
      TargetFolder: '$(Agent.HomeDirectory)/../artifacts/${{ parameters.images.artifact.name }}'
      CleanTargetFolder: true
  - bash: |
        declare -a cnreg=( $CONTAINER_REGISTRY_CREDENTIAL )
        echo "amqp settings=$AMQP_SETTINGS_ENABLED"
        echo "snitch.storage.account=$SNITCH_STORAGE_ACCOUNT"
        echo "snitch.storage.account=${{ parameters.snitch.storage.account }}"
        echo "device label=$DEVICE_LABEL"
        echo "device label=${{ parameters.device.label }}"
        testName="Stress"
        . $(Agent.HomeDirectory)/../artifacts/$IMAGES_ARTIFACT_NAME/artifactInfo.txt
        chmod +x $(Agent.HomeDirectory)/../artifacts/$IMAGES_ARTIFACT_NAME/scripts/linux/runE2ETest.sh
        sudo $(Agent.HomeDirectory)/../artifacts/$IMAGES_ARTIFACT_NAME/scripts/linux/runE2ETest.sh -testDir "$(Agent.HomeDirectory)/.." -releaseLabel "$DEVICE_LABEL" -artifactImageBuildNumber "$BuildNumber" -testName "$testName" -containerRegistry "$CONTAINER_REGISTRY" -containerRegistryUsername "${cnreg[0]}" -containerRegistryPassword "${cnreg[1]}" -iotHubConnectionString "$IOTHUB_CONNECTIONSTRING" -eventHubConnectionString "$EVENTHUB_CONNECTIONSTRING" -snitchBuildNumber "SNITCH_BUILD_NUMBER" -snitchStorageAccount "$SNITCH_STORAGE_ACCOUNT" -snitchStorageMasterKey "$SNITCH_STORAGE_MASTERKEY" -snitchAlertUrl "$SNITCH_ALERT_URL" -loadGen1TransportType "$LOADGEN1_TRANSPORTTYPE" -loadGen2TransportType "$LOADGEN2_TRANSPORTTYPE" -loadGen3TransportType "$LOADGEN3_TRANSPORTTYPE" -loadGen4TransportType "$LOADGEN4_TRANSPORTTYPE" -amqpSettingsEnabled "$AMQP_SETTINGS_ENABLED" -mqttSettingsEnabled "$MQTT_SETTINGS_ENABLED" -loadGenMessageFrequency "$LOADGEN_MESSAGE_FREQUENCY"
    displayName: 'Run Stress Test Deployment'
    workingDirectory: '$(Agent.HomeDirectory)/..'
    env:
      DEVICE_LABEL: '${{ parameters.device.label }}'
      AMQP_SETTINGS_ENABLED: '${{ parameters.amqp.settings.enabled }}'
      CONTAINER_REGISTRY: '${{ parameters.container.registry }}'
      CONTAINER_REGISTRY_CREDENTIAL: '${{ parameters.container.registry.credential }}'
      EVENTHUB_CONNECTIONSTRING: '${{ parameters.eventHub.connectionString }}'
      IMAGES_ARTIFACT_NAME: '${{ parameters.images.artifact.name }}'
      IOTHUB_CONNECTIONSTRING: '${{ parameters.iotHub.connectionString }}'
      LOADGEN_MESSAGE_FREQUENCY: '${{ parameters.loadGen.message.frequency }}'
      LOADGEN1_TRANSPORTTYPE: '${{ parameters.loadGen1.transportType }}'
      LOADGEN2_TRANSPORTTYPE: '${{ parameters.loadGen2.transportType }}'
      LOADGEN3_TRANSPORTTYPE: '${{ parameters.loadGen3.transportType }}'
      LOADGEN4_TRANSPORTTYPE: '${{ parameters.loadGen4.transportType }}'
      MQTT_SETTINGS_ENABLED: '${{ parameters.mqtt.settings.enabled }}'
      SNITCH_ALERT_URL: '${{ parameters.snitch.alert.url }}'
      SNITCH_BUILD_NUMBER: '${{ parameters.snitch.build.number }}'
      SNITCH_STORAGE_ACCOUNT: '${{ parameters.snitch.storage.account }}'
      SNITCH_STORAGE_MASTERKEY: '${{ parameters.snitch.storage.masterKey }}'