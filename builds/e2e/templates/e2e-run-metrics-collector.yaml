steps:
- pwsh: |
    $testFile = '$(binDir)/Microsoft.Azure.Devices.Edge.Test.dll'

    $filter = 'TestMetricsCollector'

    if ($IsWindows)
    {
      # The windows installer script doesn't update the PATH in the current
      # terminal session, so add `iotedge` and `docker` CLIs manually
      $env:Path =
        $env:Path,
        $(Join-Path $env:ProgramFiles 'iotedge'),
        $(Join-Path $env:ProgramFiles 'iotedge-moby') -join ';'
      dotnet test $testFile --no-build --logger 'trx' --filter "$filter"
    }
    else
    {
      sudo --preserve-env dotnet test $testFile --no-build --logger 'trx' --filter "$filter"
    }
  displayName: Run tests
  env:
    E2E_DPS_GROUP_KEY: $(TestDpsGroupKeySymmetric)
    E2E_EVENT_HUB_ENDPOINT: $(TestEventHubCompatibleEndpoint)
    E2E_PREVIEW_EVENT_HUB_ENDPOINT: $(TestPreviewEventHubCompatibleEndpoint)
    E2E_IOT_HUB_CONNECTION_STRING: $(TestIotHubConnectionString)
    E2E_IOT_HUB_RESOURCE_ID: $(TestIotHubResourceId)
    E2E_PREVIEW_IOT_HUB_CONNECTION_STRING: $(TestPreviewIotHubConnectionString)
    E2E_REGISTRIES__0__PASSWORD: $(ReleaseContainerRegistryPassword)
    E2E_ROOT_CA_PASSWORD: $(TestRootCaPassword)
    E2E_BLOB_STORE_SAS: $(TestBlobStoreSas)

- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFormat: vstest
    testResultsFiles: '**/*.trx'
    searchFolder: $(Build.SourcesDirectory)/TestResults
    testRunTitle: End-to-end tests ($(Build.BuildNumber) $(System.JobDisplayName))
    buildPlatform: $(arch)
  condition: always()

- pwsh: |
    $logDir = '$(Build.ArtifactStagingDirectory)/logs'
    New-Item $logDir -ItemType Directory -Force | Out-Null
    Out-File "$logDir/$(Build.DefinitionName)-$(Build.BuildNumber)"
    Copy-Item "$(Build.SourcesDirectory)/TestResults" "$logDir/" -Recurse
    # The setup fixtures run outside the scope of any test, so their logs (*-[test|device]-*.log)
    # aren't included in the TRX. Copy them manually here.
    Copy-Item "$(binDir)/*-test-*.log" "$logDir/"
    Copy-Item "$(binDir)/*-device-*.log" "$logDir/"
    Copy-Item "$(binDir)/testoutput.log" "$logDir/"
    Copy-Item "$(binDir)/supportbundle*" "$logDir/"
    $artifactSuffix = '$(Build.BuildNumber)-$(System.PhaseName)' -replace '_','-'
    Write-Output "##vso[task.setvariable variable=artifactSuffix]$artifactSuffix"
  displayName: Collect Logs
  condition: always()

- task: PublishBuildArtifacts@1
  displayName: Publish logs
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/logs
    ArtifactName: logs-end-to-end-$(Build.BuildNumber)-$(artifactSuffix)
  condition: always()
