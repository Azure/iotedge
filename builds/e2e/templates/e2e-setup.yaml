steps:
- checkout: self
  fetchDepth: 100

- task: AzureKeyVault@1
  displayName: Get secrets
  inputs:
    azureSubscription: $(az.subscription)
    keyVaultName: $(kv.name)
    secretsFilter: >-
      TestContainerRegistryPassword,
      TestEventHubCompatibleEndpoint,
      TestIotedgedPackageRootSigningCert,
      TestIotHubConnectionString,
      TestRootCaCertificate,
      TestRootCaKey,
      TestRootCaPassword

- pwsh: |
    if (-not '$(az.pipeline.packages.buildId)')
    {
      Write-Output 'Using packages from latest successful build against master'
      Write-Output '##vso[task.setvariable variable=whichVersion]latestFromBranch'
    }
    else
    {
      Write-Output "Using packages from build '$(az.pipeline.packages.buildId)'"
      Write-Output '##vso[task.setvariable variable=whichVersion]specific'
    }
  displayName: Locate iotedged packages

- task: DownloadBuildArtifacts@0
  displayName: Download iotedged packages
  inputs:
    buildType: specific
    project: one
    pipeline: $(az.pipeline.packages)
    buildVersionToDownload: $(whichVersion)
    branchName: refs/heads/master
    buildId: $(az.pipeline.packages.buildId)
    downloadType: specific
    itemPattern: $(artifactDir)/*

- pwsh: |
    $testDir = '$(Pipeline.Workspace)/e2e'
    New-Item "$testDir/certs" -ItemType Directory -Force | Out-Null
    $env:ROOT_CERT | Out-File -Encoding Utf8 "$testDir/certs/rsa_root_ca.cert.pem"
    $env:ROOT_KEY | Out-File -Encoding Utf8 "$testDir/certs/rsa_root_ca.key.pem"
  displayName: Install CA keys
  env:
    ROOT_CERT: $(TestRootCaCertificate)
    ROOT_KEY: $(TestRootCaKey)

- pwsh: |
    $imageId = '$(az.pipeline.images.buildNum)'
    if (-not $imageId)
    {
      $imageId = '$(Build.TriggeredBy.BuildNumber)'
    }
    if (-not $imageId)
    {
      Write-Output 'Build not triggered by the "Build Images" build, and argument "az.pipeline.images.buildNum" not specified'
      return 1
    }

    $binDir = '$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test/bin/Debug/netcoreapp2.1'
    $testDir = '$(Pipeline.Workspace)/e2e'
    $imagePrefix = '$(cr.address)/$(cr.labelPrefix)azureiotedge'
    $imageTag = "$imageId-$(os)-$(arch)"
    $context = @{
      edgeAgentImage = "$imagePrefix-agent:$imageTag";
      edgeHubImage = "$imagePrefix-hub:$imageTag";
      tempSensorImage = "$imagePrefix-simulated-temperature-sensor:$imageTag";
      methodSenderImage = "$imagePrefix-direct-method-sender:$imageTag";
      methodReceiverImage = "$imagePrefix-direct-method-receiver:$imageTag";
      registries = @(
        @{
          address = '$(cr.address)';
          username = '$(cr.username)';
        }
      );
      packagePath = $(Convert-Path '$(System.ArtifactsDirectory)/$(artifactDir)');
      caCertScriptPath = $(Convert-Path '$(Build.SourcesDirectory)/tools/CACertificates');
      rootCaCertificatePath = $(Convert-Path "$testDir/certs/rsa_root_ca.cert.pem");
      rootCaPrivateKeyPath = $(Convert-Path "$testDir/certs/rsa_root_ca.key.pem");
      logFile = $(Join-Path $binDir 'testoutput.log');
    }

    if ($IsWindows)
    {
      $context['installerPath'] = $(Convert-Path '$(Build.SourcesDirectory)/scripts/windows/setup')
    }

    if ('$(arch)' -eq 'arm32v7')
    {
      $context['optimizeForPerformance'] = false
      $context['setupTimeoutMinutes'] = 10
      $context['teardownTimeoutMinutes'] = 5
      $context['testTimeoutMinutes'] = 10
    }

    New-Item $binDir -ItemType Directory -Force | Out-Null
    $context | ConvertTo-Json | Out-File -Encoding Utf8 "$binDir/context.json"
  displayName: Create test arguments file (context.json)
