steps:
- checkout: self
  clean: true
  fetchDepth: 100

- task: AzureKeyVault@1
  displayName: Get secrets
  inputs:
    azureSubscription: $(az.subscription)
    keyVaultName: $(kv.name)
    secretsFilter: >-
      TestContainerRegistryPassword,
      TestEventHubCompatibleEndpoint,
      TestIotedgedPackageRootSigningCert,
      TestIotHubConnectionString,
      TestRootCaCertificate,
      TestRootCaKey,
      TestRootCaPassword

- pwsh: |
    # If 'az.pipeline.packages.buildId' AND 'az.pipeline.images.buildId' are given (e.g., manual
    # build), use them for edgelet packages and runtime images.
    if ('$(az.pipeline.packages.buildId)' -and '$(az.pipeline.images.buildId)')
    {
      Write-Output "Using edgelet packages from build '$(az.pipeline.packages.buildId)'"
      Write-Output '##vso[task.setvariable variable=whichPackageBuild]specific'
      Write-Output '##vso[task.setvariable variable=packageBuildId]$(az.pipeline.packages.buildId)'

      Write-Output "Using runtime images from build '$(az.pipeline.images.buildId)'"
      Write-Output '##vso[task.setvariable variable=whichImageBuild]specific'
      Write-Output '##vso[task.setvariable variable=imageBuildId]$(az.pipeline.images.buildId)'
    }
    # If neither are given (e.g., triggered by completion of the Build Images or Edgelet Packages
    # build), use the triggered build for one, and the latest build on master for the other.
    elseif (-not '$(az.pipeline.packages.buildId)' -and -not '$(az.pipeline.images.buildId)')
    {
      if ('$(Build.TriggeredBy.DefinitionName)' -eq '$(azure.pipeline.packages)')
      {
        Write-Output "Using edgelet packages from build '$(Build.TriggeredBy.BuildId)'"
        Write-Output '##vso[task.setvariable variable=whichPackageBuild]specific'
        Write-Output '##vso[task.setvariable variable=packageBuildId]$(Build.TriggeredBy.BuildId)'

        Write-Output 'Using runtime images from latest successful build against master'
        Write-Output '##vso[task.setvariable variable=whichImageBuild]latestFromBranch'
      }
      elseif ('$(Build.TriggeredBy.DefinitionName)' -eq '$(azure.pipeline.images)')
      {
        Write-Output "Using edgelet packages from latest successful build against master'"
        Write-Output '##vso[task.setvariable variable=whichPackageBuild]latestFromBranch'

        Write-Output "Using runtime images from build '$(Build.TriggeredBy.BuildId)'"
        Write-Output '##vso[task.setvariable variable=whichImageBuild]specific'
        Write-Output '##vso[task.setvariable variable=imageBuildId]$(Build.TriggeredBy.BuildId)'
      }
      else
      {
        Write-Output "Build triggered by unrecognized build '$(Build.TriggeredBy.DefinitionName)', " +
          "or 'az.pipeline.packages.buildId' and 'az.pipeline.images.buildId' not specified for manual build."
        return 1
      }
    }
    # If one argument is given without the other, that's an error.
    else
    {
      Write-Output "One of 'az.pipeline.packages.buildId' or 'az.pipeline.images.buildId' was specified without the other"
      return 1
    }
  displayName: Locate edgelet packages, runtime images

- task: DownloadBuildArtifacts@0
  displayName: Download edgelet packages
  inputs:
    buildType: specific
    project: one
    pipeline: $(az.pipeline.packages)
    buildVersionToDownload: $(whichPackageBuild)
    branchName: refs/heads/master
    buildId: $(packageBuildId)
    downloadType: specific
    itemPattern: $(artifactDir)/*

- task: DownloadBuildArtifacts@0
  displayName: Get Docker image tag
  inputs:
    buildType: specific
    project: one
    pipeline: $(az.pipeline.images)
    buildVersionToDownload: $(whichImageBuild)
    branchName: refs/heads/master
    buildId: $(imageBuildId)
    downloadType: specific
    itemPattern: $(az.pipeline.images.artifacts)/artifactInfo.txt

- pwsh: |
    $certsDir = '$(System.ArtifactsDirectory)/certs'
    New-Item "$certsDir" -ItemType Directory -Force | Out-Null
    $env:ROOT_CERT | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.cert.pem"
    $env:ROOT_KEY | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.key.pem"
    Write-Output "##vso[task.setvariable variable=certsDir]$certsDir"
  displayName: Install CA keys
  env:
    ROOT_CERT: $(TestRootCaCertificate)
    ROOT_KEY: $(TestRootCaKey)

- pwsh: |
    $testDir = '$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test'
    dotnet build $testDir

    $binDir = Convert-Path "$testDir/bin/Debug/netcoreapp2.1"
    Write-Output "##vso[task.setvariable variable=binDir]$binDir"
  displayName: Build tests

- pwsh: |
    $imagePrefix = '$(cr.address)/$(cr.labelPrefix)azureiotedge'
    $imageId = Get-Content -Encoding Utf8 `
      '$(System.ArtifactsDirectory)/$(az.pipeline.images.artifacts)/artifactInfo.txt'
    $imageTag = "$imageId-$(os)-$(arch)"
    $context = @{
      edgeAgentImage = "$imagePrefix-agent:$imageTag";
      edgeHubImage = "$imagePrefix-hub:$imageTag";
      tempSensorImage = "$imagePrefix-simulated-temperature-sensor:$imageTag";
      methodSenderImage = "$imagePrefix-direct-method-sender:$imageTag";
      methodReceiverImage = "$imagePrefix-direct-method-receiver:$imageTag";
      registries = @(
        @{
          address = '$(cr.address)';
          username = '$(cr.username)';
        }
      );
      packagePath = Convert-Path '$(System.ArtifactsDirectory)/$(artifactDir)';
      caCertScriptPath = Convert-Path '$(Build.SourcesDirectory)/tools/CACertificates';
      rootCaCertificatePath = Convert-Path '$(certsDir)/rsa_root_ca.cert.pem';
      rootCaPrivateKeyPath = Convert-Path '$(certsDir)/rsa_root_ca.key.pem';
      logFile = Join-Path '$(binDir)' 'testoutput.log';
    }

    if ($IsWindows)
    {
      $context['installerPath'] = Convert-Path '$(Build.SourcesDirectory)/scripts/windows/setup'
    }

    if ('$(arch)' -eq 'arm32v7')
    {
      $context['optimizeForPerformance'] = 'false'
      $context['setupTimeoutMinutes'] = 8
      $context['teardownTimeoutMinutes'] = 5
      $context['testTimeoutMinutes'] = 8
    }

    $context | ConvertTo-Json | Out-File -Encoding Utf8 '$(binDir)/context.json'
  displayName: Create test arguments file (context.json)
