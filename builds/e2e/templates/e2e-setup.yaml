steps:
- checkout: self
  clean: true
  fetchDepth: 100

- task: AzureKeyVault@1
  displayName: Get secrets
  inputs:
    azureSubscription: $(az.subscription)
    keyVaultName: $(kv.name)
    secretsFilter: >-
      TestContainerRegistryPassword,
      TestDpsGroupKeySymmetric,
      TestEventHubCompatibleEndpoint,
      TestIotedgedPackageRootSigningCert,
      TestIotHubConnectionString,
      TestRootCaCertificate,
      TestRootCaKey,
      TestRootCaPassword

- pwsh: |
    $imageBuildId = $(resources.pipeline.images.runID)
    $packageBuildId = $(resources.pipeline.packages.runID)

    if ('$(az.pipeline.images.buildId)')
    {
      Write-Output '>> User supplied az.pipeline.images.buildId=$(az.pipeline.images.buildId)'
      $imageBuildId = '$(az.pipeline.images.buildId)'
    }

    if ('$(az.pipeline.packages.buildId)')
    {
      Write-Output '>> User supplied az.pipeline.packages.buildId=$(az.pipeline.packages.buildId)'
      $packageBuildId = '$(az.pipeline.packages.buildId)'
    }

    Write-Output "##vso[task.setvariable variable=imageBuildId]$imageBuildId"
    Write-Output "##vso[task.setvariable variable=packageBuildId]$packageBuildId"
  displayName: Override artifacts with user-supplied args

- task: DownloadBuildArtifacts@0
  displayName: Get Docker image info
  inputs:
    buildType: specific
    project: $(resources.pipeline.images.projectID)
    pipeline: $(resources.pipeline.images.pipelineName)
    buildVersionToDownload: specific
    buildId: $(imageBuildId)
    downloadType: single
    artifactName: $(az.pipeline.images.artifacts)
    itemPattern: $(az.pipeline.images.artifacts)/artifactInfo.txt

- task: DownloadBuildArtifacts@0
  displayName: Download edgelet packages
  inputs:
    buildType: specific
    project: $(resources.pipeline.packages.projectID)
    pipeline: $(resources.pipeline.packages.pipelineName)
    buildVersionToDownload: specific
    buildId: $(packageBuildId)
    downloadType: single
    artifactName: $(artifactName)

- pwsh: |
    $certsDir = '$(System.ArtifactsDirectory)/certs'
    New-Item "$certsDir" -ItemType Directory -Force | Out-Null
    $env:ROOT_CERT | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.cert.pem"
    $env:ROOT_KEY | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.key.pem"
    Write-Output "##vso[task.setvariable variable=certsDir]$certsDir"
  displayName: Install CA keys
  env:
    ROOT_CERT: $(TestRootCaCertificate)
    ROOT_KEY: $(TestRootCaKey)

- pwsh: |
    $testDir = '$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test'
    dotnet build $testDir

    $binDir = Convert-Path "$testDir/bin/Debug/netcoreapp3.1"
    Write-Output "##vso[task.setvariable variable=binDir]$binDir"
  displayName: Build tests

- pwsh: |
    $imagePrefix = '$(cr.address)/$(cr.labelPrefix)azureiotedge'
    $imageId = Get-Content -Encoding Utf8 `
      '$(System.ArtifactsDirectory)/$(az.pipeline.images.artifacts)/artifactInfo.txt'
    $imageId = ($imageId -split '=')[1]
    $imageTag = "$imageId-$(os)-$(arch)"

    $context = @{
      dpsIdScope = '$(dps.idScope)'
      edgeAgentImage = "$imagePrefix-agent:$imageTag";
      edgeHubImage = "$imagePrefix-hub:$imageTag";
      tempFilterFuncImage = "$imagePrefix-functions-filter:$imageTag";
      tempFilterImage = "$imagePrefix-temperature-filter:$imageTag";
      tempSensorImage = "$imagePrefix-simulated-temperature-sensor:$imageTag";
      methodSenderImage = "$imagePrefix-direct-method-sender:$imageTag";
      methodReceiverImage = "$imagePrefix-direct-method-receiver:$imageTag";
      loadGenImage = "$imagePrefix-load-gen:$imageTag";
      relayerImage = "$imagePrefix-relayer:$imageTag";
      networkControllerImage = "$imagePrefix-network-controller:$imageTag";
      testResultCoordinatorImage = "$imagePrefix-test-result-coordinator:$imageTag";
      metricsValidatorImage = "$imagePrefix-metrics-validator:$imageTag";
      edgeAgentBootstrapImage = "$imagePrefix-agent-bootstrap-e2e-$(os)-$(arch)";
      registries = @(
        @{
          address = '$(cr.address)';
          username = '$(cr.username)';
        }
      );
      packagePath = Convert-Path '$(System.ArtifactsDirectory)/$(artifactName)';
      caCertScriptPath = Convert-Path '$(Build.SourcesDirectory)/tools/CACertificates';
      rootCaCertificatePath = Convert-Path '$(certsDir)/rsa_root_ca.cert.pem';
      rootCaPrivateKeyPath = Convert-Path '$(certsDir)/rsa_root_ca.key.pem';
      logFile = Join-Path '$(binDir)' 'testoutput.log';
    }

    if ('$(arch)' -eq 'arm32v7')
    {
      $context['optimizeForPerformance'] = 'false'
      $context['setupTimeoutMinutes'] = 6
      $context['teardownTimeoutMinutes'] = 5
      $context['testTimeoutMinutes'] = 6
    }

    $context | ConvertTo-Json | Out-File -Encoding Utf8 '$(binDir)/context.json'
  displayName: Create test arguments file (context.json)
