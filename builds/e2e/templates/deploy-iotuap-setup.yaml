parameters:
  release.label: ''
  edgelet.artifact.name: ''
  images.artifact.name: ''
  container.registry: ''
  container.registry.username: ''
  container.registry.password: ''
  iotHub.connectionString: ''
  eventHub.connectionString: ''
  snitch.build.number: ''
  snitch.alert.url: ''
  snitch.storage.account: ''
  snitch.storage.masterKey: ''
  amqp.settings.enabled: 'true'
  mqtt.settings.enabled: 'true'
  loadGen.message.frequency: ''
  loadGen1.transportType: 'Amqp_Tcp_Only'
  loadGen2.transportType: 'Amqp_WebSocket_Only'
  loadGen3.transportType: 'Mqtt_Tcp_Only'
  loadGen4.transportType: 'Mqtt_WebSocket_Only'

steps:
  - task: CopyFiles@2
    displayName: 'Copy Edgelet Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['edgelet.artifact.name'] }}"
      TargetFolder: "\\\\$(iotuap-x64-machine)\\c$\\Data\\e2etests\\artifacts\\${{ parameters['edgelet.artifact.name'] }}"
      CleanTargetFolder: true
  - task: CopyFiles@2
    displayName: 'Copy Images Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['images.artifact.name'] }}"
      TargetFolder: "\\\\$(iotuap-x64-machine)\\c$\\Data\\e2etests\\artifacts\\${{ parameters['images.artifact.name'] }}"
      CleanTargetFolder: true
  - task: PowerShellOnTargetMachines@3
    displayName: 'Update iotedged'
    inputs:
      Machines: '$(iotuap-x64-machine)'
      UserName: '$(iotuap-x64-login)'
      UserPassword: '$(iotuap-x64-password)'
      InlineScript: |
        # Check iotedge version
        $serviceName = 'iotedge'
        
        If (Get-Service $serviceName -ErrorAction SilentlyContinue) {
            $serviceVersion = Get-Service $serviceName version
            $serviceVersion.Substring($serviceVersion.IndexOf("dev")+3,$serviceVersion.IndexOf(" (")-$serviceVersion.IndexOf("dev")-3)
            If ($(RELEASE.ARTIFACTS.EDGELET.BUILDNUMBER) -gt $serviceVersion) {
                If ((Get-Service $serviceName).Status -eq 'Running') {
                    Stop-Service $serviceName
                }
                Write-Host "Updating $serviceName..."
                Update-IoTEdge -ContainerOs Windows -OfflineInstallationPath C:\Data\e2etests\artifacts\iotedged-windows
            } Else {
                Write-Host "$serviceName is up to date."
                # shutdown -r
            }
        } Else {
            Write-Host "$serviceName not found."
            Write-Host "Installing $serviceName..."
            . C:\Data\e2etests\artifacts\core-windows\scripts\windows\setup\IotEdgeSecurityDaemon.ps1
            deploy-iotedge
        }
      CommunicationProtocol: Http
      ErrorActionPreference: silentlyContinue
    condition: succeededOrFailed()