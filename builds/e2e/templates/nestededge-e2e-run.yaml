parameters:
- name: deviceId
  type: string

steps:
- pwsh: |
    $keyFile = "~/sshkeys/nested${{ parameters.deviceId }}key.pem"
    $deviceAlias = "nesteddevice${{ parameters.deviceId }}"

    $testFile = '$(nestedDeviceTestFolder)/testbin/Microsoft.Azure.Devices.Edge.Test.dll'
    
    $Command = @'pwsh -Command "env E2E_DPS_GROUP_KEY=\"$(TestDpsGroupKeySymmetric)\" `
    E2E_EVENT_HUB_ENDPOINT=\"$(TestEventHubCompatibleEndpoint)\" `
    E2E_PREVIEW_EVENT_HUB_ENDPOINT=\"$(TestPreviewEventHubCompatibleEndpoint)\" `
    E2E_IOT_HUB_CONNECTION_STRING=\"$(TestIotHubConnectionString)\" `
    E2E_PREVIEW_IOT_HUB_CONNECTION_STRING=\"$(TestPreviewIotHubConnectionString)\" `
    E2E_REGISTRIES__0__PASSWORD=\"$(TestContainerRegistryPassword)\" `
    E2E_ROOT_CA_PASSWORD=\"$(TestRootCaPassword)\"; `
    sudo --preserve-env dotnet vstest $testFile --logger:trx --filter FullyQualifiedName==Microsoft.Azure.Devices.Edge.Test.Module.TempSensor"'

    ssh -i $keyFile $deviceAlias $Command
  displayName: Run tests on nesteddevice${{ parameters.deviceId }}

#copy result from remote before publish
#- task: PublishTestResults@2
#  displayName: Publish test results
#  inputs:
#    testResultsFormat: vstest
#    testResultsFiles: '**/*.trx'
#    searchFolder: $(Build.SourcesDirectory)/TestResults
#    testRunTitle: End-to-end tests ($(Build.BuildNumber) $(os) $(arch))
#    buildPlatform: $(arch)
#  condition: succeededOrFailed()

#- pwsh: |
#    $logDir = '$(Build.ArtifactStagingDirectory)/logs'
#    New-Item $logDir -ItemType Directory -Force | Out-Null
#    Out-File "$logDir/$(Build.DefinitionName)-$(Build.BuildNumber)"
#    Copy-Item "$(Build.SourcesDirectory)/TestResults" "$logDir/" -Recurse
#    # The setup fixtures run outside the scope of any test, so their logs (*-[test|device]-*.log)
#    # aren't included in the TRX. Copy them manually here.
#    Copy-Item "$(binDir)/*-test-*.log" "$logDir/"
#    Copy-Item "$(binDir)/*-device-*.log" "$logDir/"
#    Copy-Item "$(binDir)/testoutput.log" "$logDir/"
#  displayName: Collect Logs
#  condition: succeededOrFailed()
#
#- task: PublishBuildArtifacts@1
#  displayName: Publish logs
#  inputs:
#    PathtoPublish: $(Build.ArtifactStagingDirectory)/logs
#    ArtifactName: logs-end-to-end-$(Build.BuildNumber)-$(os)-$(arch)
#  condition: succeededOrFailed()
