parameters:
  transportType: ''

jobs:
  - job:  Deploy_Longhaul_Linux_Arm32_${{ parameters.transportType }}
    displayName: Set up and run longhaul tests on Linux Arm32 for ${{ parameters.transportType }}
    dependsOn: SetupVM_level4_${{ parameters.transportType }}
    condition: and(succeeded(), eq(variables['run.linux.arm32v7.moby'], 'true'))
    pool:
      name: $(pool.name)
      demands:
        - agent-group -equals $(agent.group)-${{ parameters.transportType }}
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals ARM
        - agent-osbits -equals 32
        - status -equals unlocked  
    variables:
      parentName: $[ dependencies.SetupVM_level4_${{ parameters.transportType }}.outputs['deployIoTEdge.deviceName'] ]
      parentDeviceId: $[ dependencies.SetupVM_level4_${{ parameters.transportType }}.outputs['createIdentity.parentDeviceId'] ] 
      edgelet.artifact.name: 'iotedged-debian9-arm32v7'
      aziotis.artifact.name: 'packages_debian-9-slim_arm32v7'
      aziotis.package.filter: 'aziot-identity-service_*_armhf.deb'
      hostPlatform: 'linux_arm32v7_moby'
      quickstart.package.name: 'IotEdgeQuickstart.linux-arm.tar.gz'
      nestededge: true
    steps:   
      - template: nested-get-secrets.yaml     
      - template: lock-test-agent.yaml     
      - template: nested-get-root-ca.yaml 
      - template: nested-longhaul-deploy.yaml
        parameters:
          release.label: 'lh$(agent.group)'
          test.buildNumber: '$(Build.BuildNumber)'
          test.buildId: '$(Build.BuildId)'
          test.startDelay: '$(test.startDelay)'
          test.deploymentFileName: 'nestededge_bottomLayerBaseDeployment_long_haul_${{ parameters.transportType }}.template.json'
          build.source.branch: '$(Build.SourceBranchName)'
          edgelet.source.branch: '$(edgelet.package.branchName)'
          images.source.branch: '$(images.branchName)'
          build.repo.path: '$(Build.SourcesDirectory)'
          edgelet.artifact.name: '$(edgelet.artifact.name)'
          images.artifact.name: '$(az.pipeline.images.artifacts)'
          container.registry: '$(cr.address)'
          container.registry.username: '$(edgebuilds-azurecr-io-username)'
          container.registry.password: '$(edgebuilds-azurecr-io-pwd)'
          iotHub.connectionString: '$(IotHubStressConnString)'
          eventHub.connectionString: '$(EventHubStressConnStr)'
          loadGen.message.frequency: '$(loadGen.message.frequency)'
          longHaul.desiredModulesToRestartCSV: '$(longHaul.desiredModulesToRestartCSV)'
          longHaul.restartIntervalInMins: '$(longHaul.restartIntervalInMins)'
          longHaul.sendReportFrequency: '$(longHaul.sendReportFrequency)'
          test.runtimeLogLevel: '$(test.runtimeLogLevel)'
          logAnalytics.workspaceId: '$(kvLogAnalyticWorkspaceId)'
          logAnalytics.sharedKey: '$(kvLogAnalyticSharedKey)'
          twinTester.twinUpdateSize: '$(twinTester.twinUpdateSize)'
          twinTester.twinUpdateFrequency: '$(twinTester.twinUpdateFrequency)'
          twinTester.twinUpdateFailureThreshold: '$(twinTester.twinUpdateFailureThreshold)'
          twinTester.edgeHubRestartFailureTolerance: '$(twinTester.edgeHubRestartFailureTolerance)'
          metricsCollector.metricsEndpointsCSV: '$(metricsCollector.metricsEndpointsCSV)'
          metricsCollector.scrapeFrequencyInSecs: '$(metricsCollector.scrapeFrequencyInSecs)'
          metricsCollector.uploadTarget: '$(metricsCollector.uploadTarget)'
          metricsCollector.hostPlatform: '$(hostPlatform)'
          longHaul.parentHostname: '$(parentName)'
          longHaul.parentEdgeDevice: '$(parentDeviceId)'
          testResultCoordinator.storageAccountConnectionString: '$(EdgeLonghaulStorageAccountConnString)'
          quickstart.package.name: '$(quickstart.package.name)'
          aziotis.artifact.name: '$(aziotis.artifact.name)'
          aziotis.package.filter: '$(aziotis.package.filter)'
          testInfo.testName: '$(testInfo.testName)'