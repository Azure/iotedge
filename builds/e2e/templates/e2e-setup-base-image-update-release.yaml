steps:
  - checkout: self
    clean: true
    fetchDepth: 100
    submodules: recursive
  
  - task: AzureKeyVault@1
    displayName: Get secrets
    inputs:
      azureSubscription: $(az.subscription)
      keyVaultName: $(kv.name)
      secretsFilter: >-
        ReleaseContainerRegistryPassword,
        TestDpsGroupKeySymmetric,
        TestEventHubCompatibleEndpoint,
        TestGitHubAccessToken,
        TestPreviewEventHubCompatibleEndpoint,
        TestIotedgedPackageRootSigningCert,
        TestIotHubConnectionString,
        TestRootCaCertificate,
        TestRootCaKey,
        TestRootCaPassword,
        TestBlobStoreSas,
        TestManifestSigningGoodRootCa,
        TestManifestSigningIntermediateCa,
        TestManifestSigningSignerCert,
        TestManifestSigningSignerKey,
        TestManifestSigningBadRootCa,
        TestContentTrustRootCa,
        TestContentTrustRegistryPassword

  - bash: |
      wget https://github.com/theupdateframework/notary/releases/download/v0.6.0/notary-Linux-amd64
      chmod +x notary-Linux-amd64
      sudo mv notary-Linux-amd64 /usr/bin/notary
      ls -l /usr/bin
    name: install_notary_for_content_trust
    displayName: Install Notary for Content Trust
    condition: eq(variables['skip_notary'], 'false')

  - pwsh: |
      $certsDir = '$(System.ArtifactsDirectory)/certs'
      New-Item "$certsDir" -ItemType Directory -Force | Out-Null
      $env:ROOT_CERT | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.cert.pem"
      $env:ROOT_KEY | Out-File -Encoding Utf8 "$certsDir/rsa_root_ca.key.pem"
      Write-Output "##vso[task.setvariable variable=certsDir]$certsDir"
    displayName: Install CA keys
    env:
      ROOT_CERT: $(TestRootCaCertificate)
      ROOT_KEY: $(TestRootCaKey)
  
  - pwsh: |
      $testDir = '$(Build.SourcesDirectory)/test/Microsoft.Azure.Devices.Edge.Test'
      dotnet build -c $(Build.Configuration) $testDir
  
      $binDir = Convert-Path "$testDir/bin/$(Build.Configuration)/net6.0"
      Write-Output "##vso[task.setvariable variable=binDir]$binDir"
    env:
      http_proxy: $(Agent.ProxyUrl)
      https_proxy: $(Agent.ProxyUrl)
    displayName: Build tests
    
  - pwsh: |
      $manifestSignerClientDir = '$(Build.SourcesDirectory)/samples/dotnet/ManifestSignerClient'
      dotnet build -c $(Build.Configuration) $manifestSignerClientDir
      $manifestSignerClientBinDir = Convert-Path "$manifestSignerClientDir/bin/$(Build.Configuration)/net6.0"
      Write-Output "##vso[task.setvariable variable=manifestSignerClientDir]$manifestSignerClientDir"
      Write-Output "##vso[task.setvariable variable=manifestSignerClientBinDir]$manifestSignerClientBinDir"
      $manifestSigningTestDir = '$(System.ArtifactsDirectory)/manifest_signing'
      $manifestSigningDeploymentDir = '$(System.ArtifactsDirectory)/manifest_signing/deployment'
      Write-Output "##vso[task.setvariable variable=manifestSigningDeploymentDir]$manifestSigningDeploymentDir"
      $manifestSigningCertDir = '$(System.ArtifactsDirectory)/manifest_signing/certs'
      $contentTrustCertDir = '$(System.ArtifactsDirectory)/content_trust/certs'
      New-Item "$manifestSigningCertDir" -ItemType Directory -Force | Out-Null
      New-Item "$contentTrustCertDir" -ItemType Directory -Force | Out-Null
      New-Item "$manifestSigningDeploymentDir" -ItemType Directory -Force | Out-Null
      New-Item -Path "$manifestSigningDeploymentDir/deployment.json" -ItemType File
      New-Item -Path "$manifestSigningDeploymentDir/signed_deployment.json" -ItemType File
      $env:GOOD_ROOT_CA_CERT | Out-File -Encoding Utf8 "$manifestSigningCertDir/good_root_ca.pem"
      $env:BAD_ROOT_CA_CERT | Out-File -Encoding Utf8 "$manifestSigningCertDir/bad_root_ca.pem"
      $env:INTERMEDIATE_CA_CERT | Out-File -Encoding Utf8 "$manifestSigningCertDir/intermediate_ca.pem"
      $env:SIGNER_CERT | Out-File -Encoding Utf8 "$manifestSigningCertDir/signer_cert.pem"
      $env:SIGNER_KEY | Out-File -Encoding Utf8 "$manifestSigningCertDir/signer_key.key"
      $env:CONTENT_TRUST_ROOT_CA_CERT | Out-File -Encoding Utf8 "$contentTrustCertDir/content_trust_root_ca.pem"
      Write-Output "##vso[task.setvariable variable=manifestSigningCertDir]$manifestSigningCertDir"
      Write-Output "##vso[task.setvariable variable=contentTrustCertDir]$contentTrustCertDir"
    displayName: Manifest Trust Setup
    env:
      GOOD_ROOT_CA_CERT: $(TestManifestSigningGoodRootCa)
      BAD_ROOT_CA_CERT: $(TestManifestSigningBadRootCa)
      INTERMEDIATE_CA_CERT: $(TestManifestSigningIntermediateCa)
      SIGNER_CERT: $(TestManifestSigningSignerCert)
      SIGNER_KEY: $(TestManifestSigningSignerKey)
      CONTENT_TRUST_ROOT_CA_CERT : $(TestContentTrustRootCa)
  
  - pwsh: |
      if ('$(nestededge)' -eq 'true')
      {
        $nestededge = "true"
        $imagePrefix = '$upstream:443/microsoft/azureiotedge'
        $diagnosticImagePrefix ='$(parentName):443/microsoft/azureiotedge'
        $caCertScriptPath = Convert-Path "/certs"
        $rootCaCertificatePath = Convert-Path "/certs/certs/azure-iot-test-only.root.ca.cert.pem"
        $rootCaPrivateKeyPath = Convert-Path "/certs/private/azure-iot-test-only.root.ca.key.pem"
      }else
      {
        $nestededge = "false"
        $imagePrefix = '$(registry.address)/microsoft/azureiotedge'
        $diagnosticImagePrefix = '$(registry.address)/microsoft/azureiotedge'
        $caCertScriptPath = Convert-Path '$(Build.SourcesDirectory)/tools/CACertificates'
        $rootCaCertificatePath = Convert-Path '$(certsDir)/rsa_root_ca.cert.pem';
        $rootCaPrivateKeyPath = Convert-Path '$(certsDir)/rsa_root_ca.key.pem';
      }

      $testManifestSigningGoodRootCaPath = Convert-Path "$(manifestSigningCertDir)/good_root_ca.pem";
      $testManifestSigningBadRootCaPath = Convert-Path "$(manifestSigningCertDir)/bad_root_ca.pem";
      $testManifestSigningIntermediateCaPath = Convert-Path "$(manifestSigningCertDir)/intermediate_ca.pem";
      $testManifestSigningSignerCertPath = Convert-Path "$(manifestSigningCertDir)/signer_cert.pem";
      $testManifestSigningSignerKeyPath = Convert-Path "$(manifestSigningCertDir)/signer_key.key";
      $testManifestSigningDeploymentPath = Convert-Path "$(manifestSigningDeploymentDir)/deployment.json";
      $testManifestSigningSignedDeploymentPath = Convert-Path "$(manifestSigningDeploymentDir)/signed_deployment.json";
      $testManifestSignerClientDirectory = Convert-Path "$(manifestSignerClientDir)";
      $testManifestSignerClientProjectPath = Convert-Path "$(manifestSignerClientDir)/ManifestSignerClient.csproj";
      $testManifestSigningLaunchSettingsPath = Convert-Path "$(manifestSignerClientDir)/Properties/launchSettings.json";
      $testContentTrustRootCaPath = Convert-Path "$(contentTrustCertDir)/content_trust_root_ca.pem";

      $testManifestSigningDefaultLaunchSettings = @{
        profiles = @{
          ManifestSignerClient = @{
            commandName = "Project";
            environmentVariables = @{  
              USE_TESTING_CA = "true";
              DEPLOYMENT_MANIFEST_FILE_PATH = "$testManifestSigningDeploymentPath";
              SIGNED_DEPLOYMENT_MANIFEST_FILE_PATH = "$testManifestSigningSignedDeploymentPath";
              MANIFEST_TRUST_INTERMEDIATE_CA_PATH = "$testManifestSigningIntermediateCaPath";
              MANIFEST_TRUST_SIGNER_PRIVATE_KEY_PATH = "$testManifestSigningSignerKeyPath";
              MANIFEST_TRUST_SIGNER_CERT_PATH = "$testManifestSigningSignerCertPath";
              DSA_ALGORITHM = "ES256";
            }
          }
        }
      };

      $testManifestSigningDefaultLaunchSettings = $testManifestSigningDefaultLaunchSettings | ConvertTo-Json -Depth 3 
      $testManifestSigningDefaultLaunchSettings | Out-File -Encoding Utf8 "$testManifestSigningLaunchSettingsPath"
      Get-Content -Path "$testManifestSigningLaunchSettingsPath"
      
      $versionInfo = "$(version)-$(os)-$(arch)"
      $edgeAgentImage = "$imagePrefix-agent:$versionInfo";
      $edgeHubImage = "$imagePrefix-hub:$versionInfo";

      echo "Edge agent image: $edgeAgentImage"
      echo "Edge hub image: $edgeHubImage"
  
      $context = @{
        nestededge = "$nestededge";
        dpsIdScope = '$(dps.idScope)';
        isa95Tag = 'false';
        edgeAgentImage = "$edgeAgentImage";
        edgeHubImage = "$edgeHubImage";
        diagnosticsImage = "$diagnosticImagePrefix-diagnostics:$versionInfo";
        tempFilterFuncImage = "$imagePrefix-functions-filter:$versionInfo";
        tempFilterImage = "$imagePrefix-temperature-filter:$versionInfo";
        tempSensorImage = "$imagePrefix-simulated-temperature-sensor:$versionInfo";
        methodSenderImage = "$imagePrefix-direct-method-sender:$versionInfo";
        methodReceiverImage = "$imagePrefix-direct-method-receiver:$versionInfo";
        loadGenImage = "$imagePrefix-load-gen:$versionInfo";
        relayerImage = "$imagePrefix-relayer:$versionInfo";
        networkControllerImage = "$imagePrefix-network-controller:$versionInfo";
        testResultCoordinatorImage = "$imagePrefix-test-result-coordinator:$versionInfo";
        metricsValidatorImage = "$imagePrefix-metrics-validator:$versionInfo";
        numberLoggerImage = "$imagePrefix-number-logger:$versionInfo";
        edgeAgentBootstrapImage = "$imagePrefix-agent-bootstrap-e2e-$(os)-$(arch)";
        genericMqttTesterImage = "$imagePrefix-generic-mqtt-tester:$versionInfo"
        registries = @(
          @{
            address = '$(registry.address)';
            username = '$(registry.username)';
          },
          @{
            address = '$(contenttrust.address)';
            username = '$(contenttrust.username)';
          }
        );
        caCertScriptPath = "$caCertScriptPath";
        rootCaCertificatePath = "$rootCaCertificatePath";
        rootCaPrivateKeyPath = "$rootCaPrivateKeyPath";
        logFile = Join-Path '$(binDir)' 'testoutput.log';
        verbose = '$(verbose)';
        getSupportBundle = 'true';
        manifestSigningDeploymentPath = "$testManifestSigningDeploymentPath";
        manifestSigningSignedDeploymentPath = "$testManifestSigningSignedDeploymentPath";
        manifestSigningGoodRootCaPath = "$testManifestSigningGoodRootCaPath";
        manifestSigningBadRootCaPath = "$testManifestSigningBadRootCaPath";
        manifestSigningDefaultLaunchSettings = "$testManifestSigningDefaultLaunchSettings";
        manifestSigningLaunchSettingsPath = "$testManifestSigningLaunchSettingsPath";
        manifestSignerClientDirectory = "$testManifestSignerClientDirectory";
        manifestSignerClientProjectPath = "$testManifestSignerClientProjectPath";
        contentTrustRootCaPath = "$testContentTrustRootCaPath";
        contentTrustRegistryName = "${env:CONTENTTRUST_ADDRESS}";
        contentTrustSignedImage = "${env:CONTENTTRUST_SIGNEDIMAGE}";
        contentTrustUnsignedImage = "${env:CONTENTTRUST_UNSIGNEDIMAGE}";
      }
  
      if ('$(nestededge)' -eq 'true')
      {
        $context['hostname'] = '$(deviceName)'
        $context['parentHostname'] = '$(parentName)'
        $context['parentDeviceId'] = '$(parentDeviceId)'
  
        if ('$(test_type)' -eq 'nestededge_isa95')
        {
          $context['deviceId'] = '$(Lvl3DeviceId)'
          $context['edgeProxy'] = '$(proxyAddress)'
          $context['isa95Tag'] = 'true'
        }
      }
  
      if ('$(arch)' -eq 'arm32v7' -Or '$(arch)' -eq 'arm64v8')
      {
        $context['optimizeForPerformance'] = 'false'
        $context['setupTimeoutMinutes'] = 10
        $context['teardownTimeoutMinutes'] = 10
        $context['testTimeoutMinutes'] = 10
      }
  
      if ($env:AGENT_PROXYURL)
      {
        $context['testRunnerProxy'] = $env:AGENT_PROXYURL
        $context['edgeProxy'] = $env:AGENT_PROXYURL
      }
      
      $context | ConvertTo-Json | Out-File -Encoding Utf8 '$(binDir)/context.json'
      Get-Content -Path '$(binDir)/context.json'
    displayName: Create test arguments file (context.json)
