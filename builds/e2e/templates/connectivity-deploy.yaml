parameters:
  release.label: ''
  test.buildNumber: ''
  test.buildId: ''
  build.source.branch: ''
  build.checkout.path: ''
  edgelet.source.branch: ''
  images.source.branch: ''
  edgelet.artifact.name: ''
  images.artifact.name: ''
  container.registry: ''
  container.registry.username: ''
  container.registry.password: ''
  iotHub.connectionString: ''
  eventHub.connectionString: ''
  upstream.protocol: ''
  loadGen.message.frequency: ''
  networkController.description: ''
  networkController.frequencies: ''
  networkController.runProfile: ''
  logAnalyticsWorkspaceId: ''
  logAnalyticsSharedKey: ''
  testResultCoordinator.logAnalyticsLogType: ''
  testResultCoordinator.verificationDelay: ''
  testResultCoordinator.storageAccountConnectionString: ''
  metricsCollector.metricsEndpointsCSV: ''
  metricsCollector.scrapeFrequencyInSecs: ''
  metricsCollector.uploadTarget: ''
  metricsCollector.hostPlatform: ''
  edgeRuntime.buildNumber: ''
  customEdgeAgent.image: ''
  customEdgeHub.image: ''
  test.runtimeLogLevel: ''

steps:
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Copy Edgelet Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['edgelet.artifact.name'] }}"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/"
      CleanTargetFolder: true
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Copy Images Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['images.artifact.name'] }}"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}"
  - task: CopyFiles@2
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Copy aziot-identity-service'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)"
      Contents: "$(aziotis.package.filter)"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/"
  - task: Bash@3
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Generate device certificates'
    inputs:
      targetType: inline
      workingDirectory: "$(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/CACertificates"
      script: |
        chmod +x certGen.sh

        ./certGen.sh create_root_and_intermediate
        ./certGen.sh create_edge_device_ca_certificate 'ConnectivityTestDeviceCA'

        echo "##vso[task.setvariable variable=TrustBundle]$(pwd)/certs/azure-iot-test-only.intermediate-full-chain.cert.pem"
        echo "##vso[task.setvariable variable=DeviceCaCert]$(pwd)/certs/iot-edge-device-ca-ConnectivityTestDeviceCA.cert.pem"
        echo "##vso[task.setvariable variable=DeviceCaKey]$(pwd)/private/iot-edge-device-ca-ConnectivityTestDeviceCA.key.pem"

  - task: Bash@3
    condition: and(succeeded(), eq(variables['run.flag'], 1))
    displayName: 'Run Connectivity Deployment'
    inputs:
      targetType: inline
      script: |
        declare -a cnreg=( ${{ parameters['container.registry.credential'] }} )
        . $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/artifactInfo.txt
        chmod +x $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/linux/trcE2ETest.sh
        testName="Connectivity"

        testInfo="TestBuildNumber=${{ parameters['test.buildNumber'] }}"
        testInfo="$testInfo,TestBuildId=${{ parameters['test.buildId'] }}"
        testInfo="$testInfo,BuildSourceBranch=${{ parameters['build.source.branch'] }}"
        testInfo="$testInfo,EdgeletSourceBranch=${{ parameters['edgelet.source.branch'] }}"
        testInfo="$testInfo,ImagesSourceBranch=${{ parameters['images.source.branch'] }}"
        testInfo="$testInfo,HostPlatform=${{ parameters['metricsCollector.hostPlatform'] }}"
        testInfo="$testInfo,NetworkDescription=${{ parameters['networkController.description'] }}"
        testInfo="$testInfo,TestName=$testName"
        testInfo="$testInfo,CustomEdgeAgentImage=${{ parameters['customEdgeAgent.image'] }}"
        testInfo="$testInfo,CustomEdgeHubImage=${{ parameters['customEdgeHub.image'] }}"

        sudo --preserve-env $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/linux/trcE2ETest.sh \
          -testName 'Connectivity' \
          -testDir "$(Agent.HomeDirectory)/.." \
          -releaseLabel "${{ parameters['release.label'] }}" \
          -artifactImageBuildNumber "$BuildNumber" \
          -containerRegistry "${{ parameters['container.registry'] }}" \
          -containerRegistryUsername "${{ parameters['container.registry.username'] }}" \
          -containerRegistryPassword "${{ parameters['container.registry.password'] }}" \
          -iotHubConnectionString "${{ parameters['iotHub.connectionString'] }}" \
          -eventHubConnectionString "${{ parameters['eventHub.connectionString'] }}" \
          -upstreamProtocol "${{ parameters['upstream.protocol'] }}" \
          -testDuration "${{ parameters['testDuration'] }}" \
          -testStartDelay "${{ parameters['testStartDelay'] }}" \
          -loadGenMessageFrequency "${{ parameters['loadGen.message.frequency'] }}" \
          -networkControllerFrequency "${{ parameters['networkController.frequencies'] }}" \
          -networkControllerRunProfile "${{ parameters['networkController.runProfile'] }}" \
          -logAnalyticsWorkspaceId "${{ parameters['logAnalyticsWorkspaceId'] }}" \
          -logAnalyticsSharedKey "${{ parameters['logAnalyticsSharedKey'] }}" \
          -logAnalyticsLogType "${{ parameters['testResultCoordinator.logAnalyticsLogType'] }}" \
          -verificationDelay "${{ parameters['testResultCoordinator.verificationDelay'] }}" \
          -metricsEndpointsCSV "${{ parameters['metricsCollector.metricsEndpointsCSV'] }}" \
          -metricsScrapeFrequencyInSecs "${{ parameters['metricsCollector.scrapeFrequencyInSecs'] }}" \
          -metricsUploadTarget "${{ parameters['metricsCollector.uploadTarget'] }}" \
          -deploymentFileName "${{ parameters['deploymentFileName'] }}" \
          -EdgeHubRestartTestRestartPeriod "${{ parameters['edgeHubRestartTest.restartPeriod'] }}" \
          -EdgeHubRestartTestSdkOperationTimeout "${{ parameters['edgeHubRestartTest.sdkOperationTimeout'] }}" \
          -storageAccountConnectionString "${{ parameters['testResultCoordinator.storageAccountConnectionString'] }}" \
          -devOpsAccessToken "$(System.AccessToken)" \
          -devOpsBuildId "$(Build.BuildId)" \
          -edgeRuntimeBuildNumber "${{ parameters['edgeRuntime.buildNumber'] }}" \
          -customEdgeAgentImage "${{ parameters['customEdgeAgent.image'] }}" \
          -customEdgeHubImage "${{ parameters['customEdgeHub.image'] }}" \
          -testRuntimeLogLevel "${{ parameters['test.runtimeLogLevel'] }}" \
          -testInfo "$testInfo" \
          -checkoutPath "${{ parameters['build.checkout.path'] }}" \
          -waitForTestComplete \
          -cleanAll

        scriptExitCode=$?
        echo "script exit code=$scriptExitCode"
        exit $scriptExitCode

      workingDirectory: "$(Agent.HomeDirectory)/.."
    env:
      E2E_trustedCaCerts: $(TrustBundle)
      E2E_deviceCaCert: $(DeviceCaCert)
      E2E_deviceCaPrivateKey: $(DeviceCaKey)
