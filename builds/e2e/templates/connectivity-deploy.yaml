parameters:
  release.label: ''
  test.buildNumber: ''
  edgelet.artifact.name: ''
  images.artifact.name: ''
  edgelet.branchName: ''
  images.branchName: ''
  container.registry: ''
  container.registry.username: ''
  container.registry.password: ''
  iotHub.connectionString: ''
  eventHub.connectionString: ''
  upstream.protocol: ''
  loadGen.message.frequency: ''
  networkController.frequencies: ''
  networkController.runProfile: ''
  logAnalyticsWorkspaceId: ''
  logAnalyticsSharedKey: ''
  testResultCoordinator.logAnalyticsLogType: ''
  testResultCoordinator.verificationDelay: ''
  testResultCoordinator.storageAccountConnectionString: ''
  metricsCollector.metricsEndpointsCSV: ''
  metricsCollector.scrapeFrequencyInSecs: ''
  metricsCollector.uploadTarget: ''
  metricsCollector.hostPlatform: ''
  edgeRuntime.buildNumber: ''

steps:
  - task: CopyFiles@2
    condition: eq(variables['run.steps'], 1)
    displayName: 'Copy Edgelet Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['edgelet.artifact.name'] }}"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/${{ parameters['edgelet.artifact.name'] }}"
      CleanTargetFolder: true
  - task: CopyFiles@2
    condition: eq(variables['run.steps'], 1)
    displayName: 'Copy Images Artifact'
    inputs:
      SourceFolder: "$(Build.StagingDirectory)/${{ parameters['images.artifact.name'] }}"
      TargetFolder: "$(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}"
      CleanTargetFolder: true
  - task: Bash@3
    condition: eq(variables['run.steps'], 1)
    displayName: 'Run Connectivity Deployment'
    inputs:
      targetType: inline
      script: |
        declare -a cnreg=( ${{ parameters['container.registry.credential'] }} )
        . $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/artifactInfo.txt
        chmod +x $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/testHelper.sh
        chmod +x $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/connectivityTest.sh
        
        sudo $(Agent.HomeDirectory)/../artifacts/${{ parameters['images.artifact.name'] }}/scripts/connectivityTest.sh \
          -testDir "$(Agent.HomeDirectory)/.." \
          -releaseLabel "${{ parameters['release.label'] }}" \
          -artifactImageBuildNumber "$BuildNumber" \
          -containerRegistry "${{ parameters['container.registry'] }}" \
          -containerRegistryUsername "${{ parameters['container.registry.username'] }}" \
          -containerRegistryPassword "${{ parameters['container.registry.password'] }}" \
          -iotHubConnectionString "${{ parameters['iotHub.connectionString'] }}" \
          -eventHubConnectionString "${{ parameters['eventHub.connectionString'] }}" \
          -upstreamProtocol "${{ parameters['upstream.protocol'] }}" \
          -testDuration "${{ parameters['testDuration'] }}" \
          -testStartDelay "${{ parameters['testStartDelay'] }}" \
          -loadGenMessageFrequency "${{ parameters['loadGen.message.frequency'] }}" \
          -networkControllerFrequency "${{ parameters['networkController.frequencies'] }}" \
          -networkControllerRunProfile "${{ parameters['networkController.runProfile'] }}" \
          -logAnalyticsWorkspaceId "${{ parameters['logAnalyticsWorkspaceId'] }}" \
          -logAnalyticsSharedKey "${{ parameters['logAnalyticsSharedKey'] }}" \
          -logAnalyticsLogType "${{ parameters['testResultCoordinator.logAnalyticsLogType'] }}" \
          -verificationDelay "${{ parameters['testResultCoordinator.verificationDelay'] }}" \
          -metricsEndpointsCSV "${{ parameters['metricsCollector.metricsEndpointsCSV'] }}" \
          -metricsScrapeFrequencyInSecs "${{ parameters['metricsCollector.scrapeFrequencyInSecs'] }}" \
          -metricsUploadTarget "${{ parameters['metricsCollector.uploadTarget'] }}" \
          -deploymentFileName "${{ parameters['deploymentFileName'] }}" \
          -EdgeHubRestartTestRestartPeriod "${{ parameters['edgeHubRestartTest.restartPeriod'] }}" \
          -EdgeHubRestartTestSdkOperationTimeout "${{ parameters['edgeHubRestartTest.sdkOperationTimeout'] }}" \
          -testBuildNumber "${{ parameters['test.buildNumber'] }}" \
          -imagesBranchName "${{ parameters['images.branchName'] }}" \
          -edgeletBranchName "${{ parameters['edgelet.branchName'] }}" \
          -hostPlatform "${{ parameters['metricsCollector.hostPlatform'] }}" \
          -storageAccountConnectionString "${{ parameters['testResultCoordinator.storageAccountConnectionString'] }}" \
          -devOpsAccessToken $(System.AccessToken) \
          -devOpsBuildId $(Build.BuildId) \
          -edgeRuntimeBuildNumber "${{ parameters['edgeRuntime.buildNumber'] }}" \
          -waitForTestComplete \
          -cleanAll
        
        scriptExitCode=$?
        echo "script exit code=$scriptExitCode"
        exit $scriptExitCode

      workingDirectory: "$(Agent.HomeDirectory)/.."