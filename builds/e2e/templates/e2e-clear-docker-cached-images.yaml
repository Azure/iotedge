steps:
- pwsh: |
    if ($IsWindows)
    {
        Get-Command docker -ErrorAction SilentlyContinue
        if ($?) {
            $moby = Get-Service 'iotedge-moby' -ErrorAction SilentlyContinue
            if (($moby -ne $null) -and ($moby.Status -eq 'Running')) {
                exit 0
            }
        }

        Write-Output 'Docker not installed, skipping...'
        echo "##vso[task.setvariable variable=hasDocker]No"
    }
  displayName: Check for Docker

- task: Docker@2
  displayName: Docker login
  condition: and(succeeded(), ne(variables['hasDocker'], 'No'))
  inputs:
    command: login
    containerRegistry: iotedge-edgebuilds-acr

- pwsh: |
    # We use a self-hosted agent for this job, so we need to clean up
    # old docker images and containers to keep disk usage in check. But
    # pull any required images for this test run first, to take advantage
    # of cached layers from the old images (and also so that the pull
    # operation doesn't count against each test's timeout period).

    # Get images required for this run
    $images = Get-Content -Encoding UTF8 '$(binDir)/context.json' `
        | ConvertFrom-Json `
        | foreach { $_.PSObject.Properties } `
        | where { $_.Name -match 'Image$' } `
        | foreach { $_.Value }

    if ($IsWindows)
    {
        # set docker command prefix
        $dockerCommand="docker -H npipe:////./pipe/iotedge_moby_engine"

        # Pull required images
        $images | foreach { Invoke-Expression ( $dockerCommand + " pull $_" ) }
    }
    else
    {
        # set docker command prefix
        $dockerCommand="sudo docker"

        # Pull required images
        $images | foreach { sudo --preserve-env docker pull $_ }
    }

    # Remove old images
    $remove = Invoke-Expression ($dockerCommand + " images --format '{{.Repository}}:{{.Tag}}'") `
        | where { $images -notcontains $_ }
    Invoke-Expression ($dockerCommand + " rm -f $(Invoke-Expression ($dockerCommand + " ps -a -q"))")
    $remove | foreach { Invoke-Expression ($dockerCommand + " rmi $_") }

    # Delete everything else
    Invoke-Expression ($dockerCommand + " network prune -f")
    Invoke-Expression ($dockerCommand + " volume prune -f")
  displayName: Clear Docker cached images
  condition: and(succeeded(), ne(variables['hasDocker'], 'No'))