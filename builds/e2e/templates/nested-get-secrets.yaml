steps:
  - task: AzureKeyVault@2
    displayName: 'Azure Key Vault: EdgeBuildkv'
    condition: or(eq(variables['run.flag'], ''), eq(variables['run.flag'], 1))
    inputs:
      azureSubscription: $(az.subscription)
      KeyVaultName: 'edgebuildkv'
      SecretsFilter: >-
        edgebuilds-azurecr-io-username,
        edgebuilds-azurecr-io-pwd,
        kvLogAnalyticWorkspaceId,
        kvLogAnalyticSharedKey,
        GitHubAccessToken,
        edgebuild-service-principal-secret,

  - task: AzureKeyVault@2
    displayName: 'Azure Key Vault: $(azure.keyVault)'
    inputs:
      azureSubscription: $(az.subscription)
      KeyVaultName: $(azure.keyVault)
      SecretsFilter: >- 
        IotHub-ConnStr,
        IotHub-EventHubConnStr

  - task: AzureCLI@2
    displayName: 'Get PAT'
    inputs:
      azureSubscription: 'IoTEdge1-msazure'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Note that the resoruce is specified to limit the token to Azure DevOps
        aadTokenInfo=$(az account get-access-token --resource "499b84ac-1321-427f-aa17-267ca6975798")
        if [ $? -ne 0 ]; then
            echo "Could not acquire Azure DevOps token."
            exit 40
        fi
        echo "Azure DevOps AAD token acquired.  Expires $(echo $aadTokenInfo | jq -r .expiresOn)"
        aadToken=$(echo $aadTokenInfo | jq -r .accessToken)
        echo "##vso[task.setvariable variable=IotEdgePAT;issecret=true]$aadToken"
  - task: AzureCLI@2
    displayName: 'Get SAS URI for Blob Storage Account'
    inputs:
      azureSubscription: $(azure.subscription)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Hardcoded resource group and storage account name
        resource_group="iotedge-deploy"
        storage_account="iotedgeconnectivitytest"

        # Set container name with current date
        container_name="logs$(date +%Y%m%d)"

        # Set expiry time for the SAS token
        expiry_time="$(date --utc --date "+12 hours" +"%Y-%m-%dT%H:%MZ")"

        # Generate the SAS token for the container
        sasToken="$(az storage container generate-sas --account-name "$storage_account" --name "$container_name" --https-only --expiry "$expiry_time" --as-user --auth-mode login --permissions drwl --output tsv)"
        if [ $? -ne 0 ]; then
          echo "Failed to generate SAS token."
          exit 1
        fi

        echo "SAS token for Azure Storage account acquired.  Expires $expiry_time"

        # Construct the SAS URI
        endpoint="$(az storage account show --name "$storage_account" --resource-group "$resource_group" --query 'primaryEndpoints.blob' -o tsv)"
        sasUri="$endpoint$container_name?$sasToken"
        echo "##vso[task.setvariable variable=testBlobStoreSas;issecret=true]$sasUri"
