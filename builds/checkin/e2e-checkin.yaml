# Prefix build number with "e2e" to ensure images pushed to ACR by this
# pipeline don't conflict with images pushed by the CI build pipeline.
name: e2e.$(Date:yyyyMMdd).$(Rev:r)

trigger: none
pr:
  branches:
    include:
      - main
      - release/*
  paths:
    exclude:
      - platform-validation
      - release/1.1-k8s-preview

variables:
  Codeql.Enabled: false
  DisableDockerDetector: true

resources:
  pipelines:
  - pipeline: ci-build
    source: 'Azure-IoT-Edge-Core CI Build'
    branch: 'main'

stages:
  
  - template: ../misc/templates/build-images.yaml
    parameters:
      E2EBuild : true

  - template: ../misc/templates/build-packages.yaml
    parameters:
      E2EBuild : true

  - stage: RunE2ETest
    displayName: End-to-End Test
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
    dependsOn:
      - CheckBuildImages
      - CheckBuildPackages
      - BuildImages
      - BuildPackages
    condition: or(succeeded('BuildImages'),succeeded('BuildPackages'))
    variables:
      builtImages: $[stageDependencies.CheckBuildImages.check_source_change_runtime.outputs['check_files.RUNTIMECHANGES']]
      builtPackages: $[stageDependencies.CheckBuildPackages.check_source_change_edgelet.outputs['check_files.EDGELETCHANGES']]
    jobs:
      - job: Token
        displayName: 'Get SAS URI for Blob Storage Account'
        dependsOn: []

        steps:
        - task: AzureCLI@2
          name: generate
          displayName: 'Get Storage URI'
          inputs:
            azureSubscription: $(az.subscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Hardcoded resource group and storage account name
              resource_group="EdgeBuilds"
              storage_account="e2eteststorageedge"
              # Set container name with name of storage account container
              container_name="e2etest"
              # Set expiry time for the SAS token
              expiry_time=$(date --utc --date "+2 days" +"%Y-%m-%dT%H:%MZ")
              # Generate the SAS token for the container
              sasToken=$(az storage container generate-sas --account-name "$storage_account" --name "$container_name" --https-only --expiry "$expiry_time" --as-user --auth-mode login --permissions drwl --output tsv)
              if [ $? -ne 0 ]; then
                echo "Failed to generate SAS token."
                exit 1
              fi
              echo "SAS token for Azure Storage account acquired.  Expires $expiry_time"
              # Construct the SAS URI
              endpoint=$(az storage account show --name "$storage_account" --resource-group "$resource_group" --query 'primaryEndpoints.blob' -o tsv)
              sas_uri="$endpoint$container_name?$sasToken"
              export E2E_BLOB_STORE_SAS=$sas_uri
              echo "Built SAS URI length: ${#sas_uri}"
              echo "Envt variable length: ${#E2E_BLOB_STORE_SAS}"
              echo "##vso[task.setvariable variable=sas_uri;isoutput=true]$sas_uri"

      - job: ubuntu_2004_msmoby
        displayName: Ubuntu 20.04 with iotedge-moby
        dependsOn: Token
        condition: succeeded('Token')
        variables:
          verbose: false
          os: linux
          arch: amd64
          artifactName: iotedged-ubuntu20.04-amd64
          identityServiceArtifactName: packages_ubuntu-20.04_amd64
          identityServicePackageFilter: aziot-identity-service_*_amd64.deb
        steps:
        - script: |
            echo "Length of envt variable E2E_BLOB_STORE_SAS: ${#sas_uri}"
        - template: ../e2e/templates/e2e-setup.yaml
        - template: ../e2e/templates/e2e-run.yaml
          parameters:
            E2E_BLOB_STORE_SAS: $(sas_uri)