trigger: none
pr:
  branches:
    include:
    - main
    - release/*

jobs:
################################################################################
- job: check_run_pipeline
################################################################################
  displayName: Check pipeline preconditions (changes ARE NOT in either edgelet, docs, or mqtt folder)
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  steps:
  - bash: |
      git log -m -1 --name-only --first-parent --pretty="" | egrep -i -v '^(edgelet|doc|mqtt)'
      if [[ $? == 0 ]]; then
        echo "Detected changes outside of edgelet, docs and mqtt folders"
        echo "##vso[task.setvariable variable=RUN_PIPELINE;isOutput=true]TRUE"
      fi
    displayName: Check changes in sources
    name: check_files

################################################################################
- job: linux_amd64
################################################################################
  displayName: Linux amd64
  dependsOn: check_run_pipeline
  condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  steps:
  - script: scripts/linux/installPrereqs.sh
    displayName: Install Prerequisites
  - script: scripts/linux/buildBranch.sh -c '$(configuration)'
    displayName: Build
  - script: scripts/linux/runTests.sh '--filter Category=Unit&Category!=GetLogsTests'
    displayName: Test
  - script: scripts/linux/runTests.sh '--filter Category=GetLogsTests'
    displayName: Run GetLogsTests Tests
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/TestResults/*.trx'
    condition: succeededOrFailed()

################################################################################
- job: code_coverage
################################################################################
  displayName: Code coverage
  dependsOn: check_run_pipeline
  condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
  variables:
    coverage.goal: 50
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  steps:
  - script: scripts/linux/installPrereqs.sh
    displayName: Install Prerequisites
  - script: |
      dotnet test \
        --logger trx \
        --results-directory '$(Agent.TempDirectory)' \
        --filter 'Category=Unit&Category!=GetLogsTests' \
        --collect 'xplat code coverage' \
        --settings CodeCoverage.runsettings
    displayName: Run unit tests with code coverage
  - script: |
      dotnet test 'edge-agent/test/Microsoft.Azure.Devices.Edge.Agent.Core.Test' \
        --logger trx \
        --results-directory '$(Agent.TempDirectory)' \
        --filter 'Category=GetLogsTests' \
        --collect 'xplat code coverage' \
        --settings CodeCoverage.runsettings
    displayName: Run GetLogsTests unit tests with code coverage
    condition: succeededOrFailed()
  - script: |
      dotnet new tool-manifest
      dotnet tool install dotnet-reportgenerator-globaltool
      dotnet tool run reportgenerator \
        -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml \
        -targetdir:$(Build.SourcesDirectory) \
        -reporttypes:"Cobertura"
    displayName: Generate coverage report
    condition: succeededOrFailed()
  - task: PublishCodeCoverageResults@1
    displayName: Publish coverage report
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/Cobertura.xml'
    condition: succeededOrFailed()
  - task: BuildQualityChecks@8
    displayName: 'Check build quality'
    inputs:
      checkCoverage: true
      coverageFailOption: fixed
      coverageType: branch
      coverageThreshold: $(coverage.goal)
    condition: succeededOrFailed()
