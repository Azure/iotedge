trigger: none
pr:
  branches:
    include:
      - master
      - release/*
      - iiot
jobs:

################################################################################
  - job: check_run_pipeline
################################################################################
    displayName: Check pipeline preconditions (changes ARE NOT in either edgelet, docs, or mqtt folder)
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
    steps:
      - bash: |
          git log -m -1 --name-only --first-parent --pretty="" | egrep -i -v '^(edgelet|doc|mqtt)'
          if [[ $? == 0 ]]; then
            echo "Detected changes outside of edgelet, docs and mqtt folders"
            echo "##vso[task.setvariable variable=RUN_PIPELINE;isOutput=true]TRUE"
          fi
        displayName: Check changes in sources
        name: check_files

################################################################################
  - job: linux_amd64
################################################################################
    displayName: Linux amd64
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      name: $(pool.linux.name)
      demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
    steps:
      - task: Bash@3
        displayName: Install Prerequisites
        inputs:
          filePath: scripts/linux/installPrereqs.sh
      - task: Bash@3
        displayName: Build
        inputs:
          filePath: scripts/linux/buildBranch.sh
          arguments: -c "$(configuration)"
      - task: Bash@3
        displayName: Test
        inputs:
          filePath: scripts/linux/runTests.sh
          arguments: '"--filter Category=Unit&Category!=GetLogsTests"'
      - task: Bash@3
        displayName: Run GetLogsTests Tests
        inputs:
          filePath: scripts/linux/runTests.sh
          arguments: '"--filter Category=GetLogsTests"'
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/TestResults/*.trx"
        condition: succeededOrFailed()

################################################################################
  - job: windows_amd64
################################################################################
    displayName: Windows amd64
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      name: $(pool.windows.name)
      demands:
        - ImageOverride -equals agent-aziotedge-winserver-2019dc-build
    steps:
      - task: PowerShell@2
        displayName: Build
        inputs:
          filePath: scripts/windows/build/Publish-Branch.ps1
          arguments: -Configuration:"$(configuration)" -UpdateVersion
      - task: PowerShell@2
        displayName: Test
        inputs:
          filePath: scripts/windows/test/Test-Branch.ps1
          arguments: -Filter:"Category=Unit&Category!=GetLogsTests"
      - task: PowerShell@2
        displayName: Run GetLogsTests Tests
        inputs:
          filePath: scripts/windows/test/Test-Branch.ps1
          arguments: -Filter:"Category=GetLogsTests"
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/TestResults/*.trx"
        condition: succeededOrFailed()

################################################################################
  - job: code_coverage
################################################################################
    displayName: Code coverage
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    variables:
      coverage.goal: 60
    pool:
      name: $(pool.windows.name)
      demands:
        - ImageOverride -equals agent-aziotedge-winserver-2019dc-build
    steps:
      - task: DotNetCoreCLI@2
        displayName: Run unit tests with code coverage
        inputs:
          command: test
          arguments: '--filter "Category=Unit&Category!=GetLogsTests" --collect "Code coverage"'
          publishTestResults: true
          noCache: true
      - task: DotNetCoreCLI@2
        displayName: Run GetLogsTests unit tests with code coverage
        inputs:
          command: test
          projects: 'edge-agent/test/Microsoft.Azure.Devices.Edge.Agent.Core.Test'
          arguments: '--filter "Category=GetLogsTests" --collect "Code coverage"'
          publishTestResults: true
          noCache: true
      - task: BuildQualityChecks@8
        displayName: 'Check build quality'
        inputs:
          checkCoverage: true
          coverageFailOption: fixed
          coverageType: blocks
          coverageThreshold: $(coverage.goal)