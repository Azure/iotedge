trigger: none
pr:
  branches:
    include:
    - main
    - release/*

jobs:
################################################################################
- job: check_run_pipeline
################################################################################
  displayName: Check pipeline preconditions (changes ARE NOT in either edgelet, docs, or mqtt folder)
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  steps:
  - bash: |
      git log -m -1 --name-only --first-parent --pretty="" | egrep -i -v '^(edgelet|doc|mqtt)'
      if [[ $? == 0 ]]; then
        echo "Detected changes outside of edgelet, docs and mqtt folders"
        echo "##vso[task.setvariable variable=RUN_PIPELINE;isOutput=true]TRUE"
      fi
    displayName: Check changes in sources
    name: check_files

################################################################################
- job: linux_amd64
################################################################################
  displayName: Linux amd64
  dependsOn: check_run_pipeline
  condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  steps:
  - task: Bash@3
    displayName: Install Prerequisites
    inputs:
      filePath: scripts/linux/installPrereqs.sh
  - task: Bash@3
    displayName: Build
    inputs:
      filePath: scripts/linux/buildBranch.sh
      arguments: -c "$(configuration)"
  - task: Bash@3
    displayName: Test
    inputs:
      filePath: scripts/linux/runTests.sh
      arguments: '"--filter Category=Unit&Category!=GetLogsTests"'
  - task: Bash@3
    displayName: Run GetLogsTests Tests
    inputs:
      filePath: scripts/linux/runTests.sh
      arguments: '"--filter Category=GetLogsTests"'
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testRunner: VSTest
      testResultsFiles: "**/TestResults/*.trx"
    condition: succeededOrFailed()

################################################################################
- job: code_coverage
################################################################################
  displayName: Code coverage
  dependsOn: check_run_pipeline
  condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
  variables:
    coverage.goal: 60
  pool:
    name: $(pool.linux.name)
    demands:
    - ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET 6'
    inputs:
      packageType: sdk
      version: 6.0
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: DotNetCoreCLI@2
    displayName: Run unit tests with code coverage
    inputs:
      command: test
      arguments: '--filter "Category=Unit&Category!=GetLogsTests" --settings CodeCoverage.runsettings'
      publishTestResults: true
      noCache: true
  - task: DotNetCoreCLI@2
    displayName: Run GetLogsTests unit tests with code coverage
    inputs:
      command: test
      projects: 'edge-agent/test/Microsoft.Azure.Devices.Edge.Agent.Core.Test'
      arguments: '--filter "Category=GetLogsTests" --settings CodeCoverage.runsettings'
      publishTestResults: true
      noCache: true
    condition: succeededOrFailed()
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator \
        -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml \
        -targetdir:$(Build.SourcesDirectory) \
        -reporttypes:"Cobertura"
    displayName: 'Generate coverage report'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish coverage report'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/Cobertura.xml'
  # - task: BuildQualityChecks@8
  #   displayName: 'Check build quality'
  #   inputs:
  #     checkCoverage: true
  #     coverageFailOption: fixed
  #     coverageType: blocks
  #     coverageThreshold: $(coverage.goal)
  #   condition: succeededOrFailed()
