trigger: none
pr:
  branches:
    include:
      - master
      - release/*

jobs:
  ################################################################################
  - job: check_run_pipeline
  ################################################################################
    displayName: Check pipeline preconditions (changes ARE in builds or mqtt)
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - checkout: self
        submodules: false
        fetchDepth: 3
      - bash: |
          git log -m -1 --name-only --first-parent --pretty="" | egrep -i '^(builds|mqtt)'
          if [[ $? == 0 ]]; then
            echo "Detected changes inside builds or mqtt folders"
            echo "##vso[task.setvariable variable=RUN_PIPELINE;isOutput=true]TRUE"
          fi
        displayName: Check changes in sources
        name: check_files

  ################################################################################
  - job: linux_amd64
  ################################################################################
    displayName: Linux amd64
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - checkout: self
        submodules: false # mqtt broker does not use submodules
        fetchDepth: 3
      - script: echo "##vso[task.setvariable variable=RUST_BACKTRACE;]1"
        displayName: Set env variables
      - bash: scripts/linux/generic-rust/install.sh --project-root "mqtt"
        displayName: Install Rust
      - bash: scripts/linux/generic-rust/build.sh --project-root "mqtt" --packages "mqttd/Cargo.toml" --manifest-path --no-default-features --features "generic"
        displayName: Build with no default features
      - bash: scripts/linux/generic-rust/build.sh --project-root "mqtt" --packages "mqttd/Cargo.toml" --manifest-path
        displayName: Build with default features
      - bash: mqtt/build/linux/test.sh --report test-results.xml
        displayName: Test
      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "**/test-results.xml"
          failTaskOnFailedTests: true
        condition: succeededOrFailed()

  ################################################################################
  - job: style_check
  ################################################################################
    displayName: Style Check
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - checkout: self
        submodules: false # mqtt broker does not use submodules
        fetchDepth: 3
      - bash: scripts/linux/generic-rust/install.sh --project-root "mqtt"
        displayName: Install Rust
      - bash: scripts/linux/generic-rust/format.sh --project-root "mqtt"
        displayName: Format Code
      - bash: mqtt/build/linux/clippy.sh
        displayName: Clippy

################################################################################
  - job: code_coverage
################################################################################
    displayName: Code Coverage
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    variables:
      coverage.goal: 84
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - script: |
          echo "##vso[task.setvariable variable=IOTEDGE_HOMEDIR;]/tmp"
          echo "##vso[task.setvariable variable=CARGO;]${CARGO_HOME:-"$HOME/.cargo"}/bin/cargo"
        displayName: Set env variables
        workingDirectory: mqtt
      - script: scripts/linux/generic-rust/install.sh --project-root "mqtt"
        displayName: Install Rust
      - script: |
          $CARGO install cargo-tarpaulin
        workingDirectory: mqtt
        displayName: Install Cargo Tarpaulin
      - script: |
          $CARGO tarpaulin --out Xml --output-dir .
        displayName: Test
        workingDirectory: mqtt
      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage results
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: "mqtt/cobertura.xml"
      - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
        displayName: "Check build quality"
        inputs:
          checkCoverage: true
          coverageFailOption: fixed
          coverageType: lines
          coverageThreshold: $(coverage.goal)
