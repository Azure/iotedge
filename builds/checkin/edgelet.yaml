trigger: none
pr:
  branches:
    include:
      - master
      - release/*
  paths:
    include:
      - builds/*
      - edgelet/*
jobs:

################################################################################
  - job: linux_amd64
################################################################################
    displayName: Linux amd64
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
        displayName: Set env variables
      - bash: edgelet/build/linux/install.sh
        displayName: Install Rust
      - bash: edgelet/build/linux/check-submodules.sh
        displayName: Check submodules
      - bash: edgelet/build/linux/build.sh
        displayName: Build
      - bash: edgelet/build/linux/test.sh
        displayName: Test

################################################################################
  - job: linux_arm32v7
################################################################################
    displayName: Linux arm32v7
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      IOTEDGE_HOMEDIR: /tmp
    steps:
      - bash: 'echo "##vso[task.setvariable variable=PATH;]${CARGO_HOME:-"$HOME/.cargo"}/bin:$PATH"'
        displayName: Modify path
      - bash: |
          BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
          VERSION="$BASE_VERSION$BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=VERSION;]$VERSION"
        displayName: Set Version
      - script: edgelet/build/linux/install.sh
        displayName: Install Rust
      - script: 'cargo install --git https://github.com/arsing/cross.git --branch set-path'
        displayName: 'Install cross (fork with docker fix)'
      - script: 'cross build --target armv7-unknown-linux-gnueabihf'
        displayName: armv7-unknown-linux-gnueabihf build
        workingDirectory: $(Build.SourcesDirectory)/edgelet
      - script: 'cross test --target armv7-unknown-linux-gnueabihf'
        displayName: armv7-unknown-linux-gnueabihf test
        workingDirectory: $(Build.SourcesDirectory)/edgelet

  ################################################################################
  - job: linux_arm64v8
    ################################################################################
    displayName: Linux arm64v8
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      IOTEDGE_HOMEDIR: /tmp
    steps:
      - bash: 'echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"'
        displayName: Modify path
      - bash: |
          BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
          VERSION="$BASE_VERSION$BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=VERSION;]$VERSION"
        displayName: Set Version
      - script: edgelet/build/linux/install.sh
        displayName: Install Rust
      - script: 'cargo install --git https://github.com/arsing/cross.git --branch set-path'
        displayName: 'Install cross (fork with docker fix)'
      - script: 'cross build --target aarch64-unknown-linux-gnu'
        displayName: aarch64-unknown-linux-gnu build
        workingDirectory: $(Build.SourcesDirectory)/edgelet
      - script: 'cross test --target aarch64-unknown-linux-gnu'
        displayName: aarch64-unknown-linux-gnu test
        workingDirectory: $(Build.SourcesDirectory)/edgelet

################################################################################
  - job: windows_amd64
################################################################################
    displayName: Windows amd64
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - powershell: Write-Host ("##vso[task.setvariable variable=NO_VALGRIND;]true")
        displayName: Set env variables
      - powershell: edgelet/build/windows/install.ps1
        displayName: Install Rust
      - powershell: edgelet/build/windows/build.ps1
        displayName: Build
      - powershell: edgelet/build/windows/test.ps1
        displayName: Test
      - powershell: edgelet/build/windows/clippy.ps1
        displayName: Clippy

################################################################################
  - job: style_check
################################################################################
    displayName: Style Check
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
        displayName: Set env variables
      - bash: edgelet/build/linux/install.sh
        displayName: Install Rust
      - bash: edgelet/build/linux/format.sh
        displayName: Format Code
      - bash: edgelet/build/linux/clippy.sh
        displayName: Clippy

################################################################################
  - job: code_coverage
################################################################################
    displayName: Code Coverage
    variables:
      coverage.excludes: "docker-rs*"
      coverage.goal: 68
      rust.toolchain: nightly-2019-06-07
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
          echo "##vso[task.setvariable variable=CARGO_INCREMENTAL;]0"
          echo "##vso[task.setvariable variable=RUSTFLAGS;]-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
          echo "##vso[task.setvariable variable=IOTEDGE_HOMEDIR;]/tmp"
          echo "##vso[task.setvariable variable=CARGO;]${CARGO_HOME:-"$HOME/.cargo"}/bin/cargo"
        displayName: Set env variables
      - script: edgelet/build/linux/install.sh -t "${RUST_TOOLCHAIN}"
        displayName: Install Rust
      - script: |
          curl -L https://github.com/mozilla/grcov/releases/download/v0.5.1/grcov-linux-x86_64.tar.bz2 | tar jxf -
          curl -L https://raw.github.com/eriwen/lcov-to-cobertura-xml/8c55cd11f80a21e7e46f20f8c81fcde0bf11f5e5/lcov_cobertura/lcov_cobertura.py -o lcov_cobertura.py
        workingDirectory: edgelet
        displayName: Install code coverage tools
      - script: $CARGO "+${RUST_TOOLCHAIN}" build --verbose
        displayName: Build
        workingDirectory: edgelet
        env:
          RUST_TOOLCHAIN: $(rust.toolchain)
      - script: $CARGO "+${RUST_TOOLCHAIN}" test --verbose
        displayName: Test
        workingDirectory: edgelet
        env:
          RUST_TOOLCHAIN: $(rust.toolchain)
      - script: |
          zip -0 target/ccov.zip `find ./target \( -name "*.gc*" \) -print`
          ./grcov target/ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore-dir "/*" --ignore-dir "*docker-rs*" > target/lcov.info
          python lcov_cobertura.py target/lcov.info --output target/coverage.xml --demangle --base-dir $(Build.SourcesDirectory)/edgelet -e "${COVERAGE_EXCLUDES}"
        displayName: Assemble code coverage results
        workingDirectory: edgelet
        env:
          COVERAGE_EXCLUDES: $(coverage.excludes)
      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage results
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: "edgelet/target/coverage.xml"
      - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
        displayName: 'Check build quality'
        inputs:
          checkCoverage: true
          coverageFailOption: fixed
          coverageType: lines
          coverageThreshold: $(coverage.goal)

