trigger: none
pr:
  branches:
    include:
      - master
      - release/*
      - iiot
jobs:

################################################################################
  - job: check_run_pipeline
################################################################################
    displayName: Check pipeline preconditions (changes ARE in builds or edgelet)
    pool:
      vmImage: ubuntu-18.04
    steps:
      - bash: |
          git log -m -1 --name-only --first-parent --pretty="" | egrep -i '^(builds|edgelet)'
          if [[ $? == 0 ]]; then
            echo "Detected changes inside builds or edgelet folders"
            echo "##vso[task.setvariable variable=RUN_PIPELINE;isOutput=true]TRUE"
          fi
        displayName: Check changes in sources
        name: check_files

################################################################################
  - job: linux_amd64
################################################################################
    displayName: Linux amd64
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: ubuntu-18.04
    steps:
      - script: echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
        displayName: Set env variables
      - bash: edgelet/build/linux/install.sh
        displayName: Install Rust
      - bash: edgelet/build/linux/check-submodules.sh
        displayName: Check submodules
      - bash: edgelet/build/linux/build.sh
        displayName: Build
      - bash: edgelet/build/linux/build-k8s.sh
        displayName: Build (runtime-kubernetes)
      - bash: edgelet/build/linux/test.sh
        displayName: Test

################################################################################
  - job: linux_arm32v7
################################################################################
    displayName: Linux arm32v7
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: ubuntu-18.04
    variables:
      IOTEDGE_HOMEDIR: /tmp
    steps:
      - bash: 'echo "##vso[task.setvariable variable=PATH;]${CARGO_HOME:-"$HOME/.cargo"}/bin:$PATH"'
        displayName: Modify path
      - bash: |
          BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
          VERSION="$BASE_VERSION$BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=VERSION;]$VERSION"
        displayName: Set Version
      - script: edgelet/build/linux/install.sh
        displayName: Install Rust
      - script: "cargo install --git https://github.com/arsing/cross.git --branch set-path"
        displayName: "Install cross (fork with docker fix)"
      - script: "cross build --target armv7-unknown-linux-gnueabihf"
        displayName: armv7-unknown-linux-gnueabihf build
        workingDirectory: $(Build.SourcesDirectory)/edgelet
      - script: "cross test --target armv7-unknown-linux-gnueabihf"
        displayName: armv7-unknown-linux-gnueabihf test
        workingDirectory: $(Build.SourcesDirectory)/edgelet

################################################################################
  - job: linux_arm64v8
################################################################################
    displayName: Linux arm64v8
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: ubuntu-18.04
    variables:
      IOTEDGE_HOMEDIR: /tmp
    steps:
      - bash: 'echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"'
        displayName: Modify path
      - bash: |
          BASE_VERSION=`cat $BUILD_SOURCESDIRECTORY/edgelet/version.txt`
          VERSION="$BASE_VERSION$BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=VERSION;]$VERSION"
        displayName: Set Version
      - script: edgelet/build/linux/install.sh
        displayName: Install Rust
      - script: "cargo install --git https://github.com/arsing/cross.git --branch set-path"
        displayName: "Install cross (fork with docker fix)"
      - script: "cross build --target aarch64-unknown-linux-gnu"
        displayName: aarch64-unknown-linux-gnu build
        workingDirectory: $(Build.SourcesDirectory)/edgelet
      - script: "cross test --target aarch64-unknown-linux-gnu"
        displayName: aarch64-unknown-linux-gnu test
        workingDirectory: $(Build.SourcesDirectory)/edgelet

################################################################################
  - job: windows_amd64
################################################################################
    displayName: Windows amd64
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: "vs2017-win2016"
    steps:
      - powershell: Write-Host ("##vso[task.setvariable variable=NO_VALGRIND;]true")
        displayName: Set env variables
      - powershell: edgelet/build/windows/install.ps1
        displayName: Install Rust
      - powershell: edgelet/build/windows/build.ps1
        displayName: Build
      - powershell: edgelet/build/windows/test.ps1
        displayName: Test
      - powershell: edgelet/build/windows/clippy.ps1
        displayName: Clippy

################################################################################
  - job: style_check
################################################################################
    displayName: Style Check
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    pool:
      vmImage: ubuntu-18.04
    steps:
      - script: echo "##vso[task.setvariable variable=NO_VALGRIND;]true"
        displayName: Set env variables
      - bash: edgelet/build/linux/install.sh
        displayName: Install Rust
      - bash: edgelet/build/linux/format.sh
        displayName: Format Code
      - bash: edgelet/build/linux/clippy.sh
        displayName: Clippy

# The CI VMs encounter
#
# >ld returned 1 exit status
#
# ... when running this job for no obvious reason.
#
################################################################################
  - job: code_coverage
################################################################################
    displayName: Code Coverage
    dependsOn: check_run_pipeline
    condition: eq(dependencies.check_run_pipeline.outputs['check_files.RUN_PIPELINE'], 'true')
    variables:
      coverage.excludes: "docker-rs*"
      coverage.goal: 44
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - script: |
          echo "##vso[task.setvariable variable=IOTEDGE_HOMEDIR;]/tmp"
          echo "##vso[task.setvariable variable=CARGO;]${CARGO_HOME:-"$HOME/.cargo"}/bin/cargo"
        displayName: Set env variables
        workingDirectory: edgelet
      - script: edgelet/build/linux/install.sh
        displayName: Install Rust
      - script: |
          $CARGO install cargo-tarpaulin
        workingDirectory: edgelet
        displayName: Install Cargo Tarpaulin
      - script: |
          $CARGO tarpaulin --out Xml --exclude-files $COVERAGE_EXCLUDES --output-dir .
        displayName: Test
        workingDirectory: edgelet
        env:
          COVERAGE_EXCLUDES: $(coverage.excludes)
      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage results
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: "edgelet/cobertura.xml"
      - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
        displayName: "Check build quality"
        inputs:
          checkCoverage: true
          coverageFailOption: fixed
          coverageType: lines
          coverageThreshold: $(coverage.goal)
