# iotedged configuration
iotedged:
  image:
    repository: azureiotedge/azureiotedge-iotedged
    tag: 0.1.0-beta9
    pullPolicy: Always
  nodeSelector: {}
  # Volumes which support ownership management are modified to be owned and 
  # writable by the GID specified in fsGroup.
  # fsGroup: 2000
  service:
    name: iotedged
    type: ClusterIP
  apiVersion: '2019-01-30'
  # TCP ports on which iotedged should listen
  ports:
    management: 35000
    workload: 35001
  data:
    enableGetNodesRBAC: true
    targetPath: /var/lib/iotedge
    # Normally the iotedged is running as a host process, and has access to 
    # the host's trusted CA certificates.  Use this options to allow the 
    # iotedged deployment to use the host OS's /etc/ssl/certs 
    # useHostTrust: false
    #
    # In order to benefit from HA, at a minimum the data location for iotedged
    # should be backed by a persistent volume. 
    # User may create a PersistentVolumeClaim and provide the name only here. Alternatively.
    # user may set persistent volume claim details below. In that case the charts will define a PVC. 
    # If nothing is provided then the iotedged pod will default to using an
    # "emptyDir" volume which is not recommended because emptyDir storage is tied to the Pod's 
    # lifetime and the runtime will fail if iotedged is restarted.
    #
    # persistentVolumeClaim:
    #   # name is required for iotedged to use persistence.
    #   name: <CLAIM NAME HERE>
    #   # Set the following fields if you would like the chart to create a PVC
    #   storageClassName: <STORAGE CLASS NAME HERE>
    #   volumeName: <OPTIONAL VOLUME NAME HERE>
    #   size: 100Mi
    #
    ###############################################################################
    # Proxy settings
    ###############################################################################
    # Set the following if an HTTPS proxy is needed
    # httpsProxy: "<proxy URL>"
    ###############################################################################
    # Watchdog settings
    ###############################################################################
    #
    # The IoT edge daemon has a watchdog that periodically checks the health of the
    # Edge Agent module and restarts it if it's down.
    #
    # maxRetries - Configures the number of retry attempts that the IoT edge daemon
    #               should make for failed operations before failing with a fatal error.
    #
    #               If this configuration is not specified, the daemon keeps retrying
    #               on errors and doesn't fail fatally.
    #
    #               On a fatal failure, the daemon returns an exit code which
    #               signifies the kind of error encountered. Currently, the following
    #               error codes are returned by the daemon -
    #
    #               150 - Invalid Device ID specified.
    #               151 - Invalid IoT hub configuration.
    #               152 - Invalid SAS token used to call IoT hub.
    #                     This could signal an invalid SAS key.
    #               1 - All other errors.
    ###############################################################################
    #  maxRetries: 2

  ###############################################################################
  # Certificate settings
  ###############################################################################
  #
  # Configures the certificates required to operate the IoT Edge
  # runtime as a gateway which enables external leaf devices to securely
  # communicate with the Edge Hub. If not specified, the required certificates
  # are auto generated for quick start scenarios which are not intended for
  # production environments.
  #
  # Please create a secret containing 3 items, the Device CA cert, the Device CA private key, and
  # the root CA. Then give the chart the secret name and the item names. For example, if a secret 
  # is created like this:
  # `kubectl create secret generic -n device-namespace edge-certs --from-file=certs/iot-edge-device-ca-MyEdgeDeviceCA-full-chain.cert.pem --from-file=private/iot-edge-device-ca-MyEdgeDeviceCA.key.pem --from-file=certs/azure-iot-test-only.root.ca.cert.pem`
  # The YAML would look like:
  # certificates:
  #   secret: "edge-certs"
  #   device_ca_cert: "iot-edge-device-ca-MyEdgeDeviceCA-full-chain.cert.pem"
  #   device_ca_pk: "iot-edge-device-ca-MyEdgeDeviceCA.key.pem"
  #   trusted_ca_certs: "azure-iot-test-only.root.ca.cert.pem"
  #
  # certificates:
  #   secret: "<Name of secret>"
  #   device_ca_cert: "<ADD SECRET ITEM NAME FOR DEVICE CA CERTIFICATE HERE>"
  #   device_ca_pk: "<ADD SECRET ITEM NAME FOR CA PRIVATE KEY HERE>"
  #   trusted_ca_certs: "<ADD SECRET ITEM NAME FOR CA CERTIFICATES HERE>"
  #   auto_generated_ca_lifetime_days: <value>

iotedgedProxy:
  image:
    repository: azureiotedge/azureiotedge-proxy
    tag: 0.1.0-beta9
    pullPolicy: Always

# Edge Agent image configuration
# Settings:
#     containerName  - name of the edge agent module. Expected to be "edgeAgent".
#     image          - Image tag and image pull policy
#     env            - Any environment variable that needs to be set for edge agent module.
#                      Some environment variables affect how Edge Agent creates modules in the
#                      cluster see the descriptions below.
edgeAgent:
  containerName: edgeagent
  image:
    repository: azureiotedge/azureiotedge-agent
    tag: 0.1.0-beta9
    pullPolicy: Always
  hostname: "localhost"
  env:
    authScheme: 'sasToken'
    # Set this to one of "LoadBalancer", "NodePort", or "ClusterIP" to tell the
    # IoT Edge runtime how you want to expose mapped ports as Services.
    portMappingServiceType: 'ClusterIP'
    
    # Set the location of the backup configuration file.
    backupConfigFilePath: '/tmp/backup.json'
    
    # Set this to false if you want to turn off verbose k8s call tracing
    enableK8sServiceCallTracing: false
    
    # Configure edge agent log verbosity
    runtimeLogLevel: 'debug'

    # Set this to set the upstream protocol for edgeAgent (default: Amqp with AmpqWs as fallback)
    # upstreamProtocol: 'AmqpWs'

    # Configure the default claim size to use (in megabytes) when creating PVCs.
    # persistentVolumeClaimDefaultSizeInMb: ""

    # Set this as guidance for converting Docker Volume mounts to Persistent Volume Claims.
    # Set to true to tell the runtime to use the Volume mount source (mount.Source) as the
    # Persistent volume name (volumeName) in the PVC
    useMountSourceForVolumeName: false

    # Set this to the name of a storage class name if you wish the volumes that
    # back persistent storage in modules to use dynamically provisioned PVCs.
    # If you wish this to be an empty string then you'll need to use the string
    # literal "-" in liue of an empty string.
    # storageClassName: ""

    # Set this to true if you wish to turn on experimental features support. Please see 
    # https://github.com/Azure/iotedge/blob/master/kubernetes/doc/create-options.md to
    # find more information about experimental create options feature.
    enableExperimentalFeatures: true
    
    # Create options extensions for Kubernetes
    # The feature allows the user to extend a module's create options with some Kubernetes primitives. 
    # To activate this experimental feature, both "enableExperimentalFeatures" and "enableK8sExtensions" 
    # must be set to "true".
    enableK8sExtensions: true

    # Configure default pod security context rule. If set true, it will allow kubernetes to run only non-root containers
    # under the user with uid(1000).
    # false dy default.
    # runAsNonRoot: false

# Optional registry credentials for module images
# registryCredentials:
#   <SERVER ADDRESS>:
#     username: '<USERNAME>'
#     password: '<PASSWORD>'

###############################################################################
# Provisioning mode and settings
###############################################################################
#
# Configures the identity provisioning mode of the daemon.
#
# Supported modes:
#     manual   - using an iothub connection string or an X.509 identity certificate
#     dps      - using dps for provisioning
#     external - the device has been provisioned externally.
#                Uses an external provisioning endpoint to get device specific information.
#
# Manual settings when using IoT Hub connection string
#     deviceConnectionString - Required. The Edge device connection string
#                                when using SharedAccessKey authentication mode.
#                                Ex. "HostName=<hub-name>.azure-devices.net;DeviceId=<device-id>;SharedAccessKey=<key>
#
# Manual authentication settings when using an X.509 identity certificate
#   Please create a secret containing 2 items, the Edge device identity X.509 certificate, and the 
#   Edge device identity private key. Then give the chart the secret name and the item names. 
#   For example, if a secret is created like this:
#   `kubectl create secret generic -n device-namespace edge-authentication --from-file=certs/identity_certificate.pem --from-file=private/identity_key.pem
#   The YAML would look like:
#     identitySecret: "edge-authentication"
#     identityCert: "identity_certificate.pem"
#     identityPk: "identity_key.pem"
#
#     iothubHostname - Required. The Azure Iot Hub hostname.
#                       Ex. <hub-name>.azure-devices.net
#     deviceId       - Required. The Edge device id.
#     identitySecret - Required. The secret name.
#     identityCert   - Required. The secret item name for Edge device identity X.509 certificate.
#     identityPk     - Required. The secret item name forEdge device identity private key.
#
# DPS Settings
#   If configuring for configured for X.509 authentication, please create a secret containing 2 
#   items, the Edge device identity X.509 certificate, and the Edge device identity private key. 
#   Then give the chart the secret name and the item names. For example, if a secret is created like 
#   this:
#   `kubectl create secret generic -n device-namespace edge-authentication --from-file=certs/identity_certificate.pem --from-file=private/identity_key.pem
#   The YAML would look like:
#     identitySecret: "edge-authentication"
#     identityCert: "identity_certificate.pem"
#     identityPk: "identity_key.pem"
#
#     scopeId        - Required. Value of a specific DPS instance's ID scope
#     registrationId - Required for TPM and symmetric key provisioning flows.
#                       Optional for X.509 provisioning. Registration ID of a
#                       specific device in DPS.
#                       For more information regarding DPS registration ids
#                       please see https://docs.microsoft.com/en-us/azure/iot-dps/concepts-device#registration-id
#     symmetricKey   - Optional. This entry should only be specified when
#                       provisioning devices configured for symmetric key
#                       attestation. Device specific symmetric key.
#     identitySecret - Optional. The secret name.
#     identityCert   - Optional. The secret item name for Edge device identity X.509 certificate.
#     identityPk     - Optional. The secret item name forEdge device identity private key.
#
# External Settings
#     endpoint - Required. Value of the endpoint used to retrieve device specific
#                information such as its IoT hub connection information.
#
# Dynamic Re-provisioning Settings
#     dynamicReprovisioning - Optional. A flag to opt-in to the dynamic re-provisioning 
#                              feature. If enabled, IoT Edge on detecting a possible 
#                              device re-provisioning event will shut down the daemon.
#                              This is so that on the next daemon startup, the device is 
#                              set up with the new provisioning information of the device in 
#                              in IoT Hub.
#                              For the external provisioning mode specifically, the daemon 
#                              will notify the external provisioning endpoint about the
#                              re-provisioning event before shutting down.
###############################################################################
# Manual provisioning configuration using a connection string
provisioning:
  source: "manual"
  #deviceConnectionString: "<ADD DEVICE CONNECTION STRING HERE>"
  dynamicReprovisioning: false

# Manual provisioning configuration using an X.509 identity certificate
# provisioning:
#   source: "manual"
#   authentication:
#     method: "x509"
#     iothubHostname: "<REQUIRED IOTHUB HOSTNAME>"
#     deviceId: "<REQUIRED DEVICE ID PROVISIONED IN IOTHUB>"
#     identitySecret: "<REQUIRED SECRET CONTAINING IDENTITY CERTIFICATE>"
#     identityCert: "<REQUIRED SECRET ITEM NAME FOR DEVICE IDENTITY CERTIFICATE>"
#     identityPk: "<REQUIRED SECRET ITEM NAME FOR DEVICE IDENTITY PRIVATE KEY>"
#   dynamicReprovisioning: false

# DPS symmetric key provisioning configuration
# provisioning:
#   source: "dps"
#   globalEndpoint: "https://global.azure-devices-provisioning.net"
#   scopeId: "{scope_id}"
#   attestation:
#     method: "symmetric_key"
#     registrationId: "{registration_id}"
#     symmetricKey: "{symmetric_key}"
#   dynamicReprovisioning: false

# DPS X.509 provisioning configuration
# provisioning:
#   source: "dps"
#   globalEndpoint: "https://global.azure-devices-provisioning.net"
#   scopeId: "{scope_id}"
#   attestation:
#     method: "x509"
#     registrationId: "<OPTIONAL REGISTRATION ID. IF UNSPECIFIED CAN BE OBTAINED FROM CN OF identity_cert"
#     identitySecret: "<REQUIRED SECRET CONTAINING IDENTITY CERTIFICATE>"
#     identityCert: "<REQUIRED SECRET ITEM NAME FOR DEVICE IDENTITY CERTIFICATE>"
#     identityPk: "<REQUIRED SECRET ITEM NAME FOR DEVICE IDENTITY PRIVATE KEY>"
#   dynamicReprovisioning: false

# External provisioning configuration
# provisioning:
#   source: "external"
#   endpoint: "http://localhost:9999"
#   dynamicReprovisioning: false