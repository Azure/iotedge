apiVersion: apps/v1
kind: Deployment
metadata:
  name: iotedged
  namespace: {{ include "edge-kubernetes.namespace" . | quote }}
  labels:
    app.kubernetes.io/name: {{ include "edge-kubernetes.name" . }}-iotedged
    helm.sh/chart: {{ include "edge-kubernetes.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "edge-kubernetes.name" . }}-iotedged
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "edge-kubernetes.name" . }}-iotedged
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: iotedged
          image: "{{ .Values.iotedged.image.repository }}:{{ .Values.iotedged.image.tag }}"
          imagePullPolicy: {{ .Values.iotedged.image.pullPolicy }}
          command: ["/app/iotedged"]
          args: ["-c", "/etc/iotedged/config.yaml"]
          env:
          - name: "IOTEDGE_LOG"
            value: "debug"
          volumeMounts:
          - name: config
            mountPath: "/etc/iotedged"
            readOnly: true
          - name: edge-home
            mountPath: {{ .Values.iotedged.data.targetPath | quote }}
          {{- if .Values.iotedged.certificates }}
          - name: edge-certs
            mountPath: "/etc/edgecerts"
            readOnly: true
          {{end}}
          ports:
            - name: management
              containerPort: {{ .Values.iotedged.ports.management }}
              protocol: TCP
            - name: workload
              containerPort: {{ .Values.iotedged.ports.workload }}
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: "/systeminfo?api-version={{ .Values.iotedged.apiVersion }}"
              port: {{ .Values.iotedged.ports.management }}
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: "/systeminfo?api-version={{ .Values.iotedged.apiVersion }}"
              port: {{ .Values.iotedged.ports.management }}
      serviceAccount: "iotedged"
      {{- /* Render image pull secrets if they have been provided. */ -}}
      {{- if .Values.registryCredentials }}
      imagePullSecrets:
        - name: regcreds
      {{ end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      volumes:
      - name: config
        secret:
          secretName: iotedged-config
      {{- if .Values.iotedged.certificates }}
      {{- /*
        NOTE: This sets up iotedged with a volume "/etc/edgecerts" populated with the given CA certs.
      */}}
      - name: edge-certs
        secret:
          secretName: {{ .Values.iotedged.certificates.secret }}
          items:
          - key: {{ .Values.iotedged.certificates.device_ca_cert | default "device_ca_cert" }}
            path: device_ca_cert
          - key: {{ .Values.iotedged.certificates.device_ca_pk | default "device_ca_pk" }}
            path: device_ca_pk
          - key: {{ .Values.iotedged.certificates.trusted_ca_certs | default "trusted_ca_certs" }}
            path: trusted_ca_certs
      {{else}}
      {{- /*
        NOTE: This sets up iotedged in the "quickstart" mode which is NOT meant
        for production use. For PoCs though, its wonderful! For production, this
        volume should probably be populated with proper CA certs.
      */}}
      {{end}}
      - name: edge-home
        {{- if .Values.iotedged.data.persistentVolumeClaim }}
        persistentVolumeClaim:
          claimName: {{ .Values.iotedged.data.persistentVolumeClaim.name }}
          readOnly: false
        {{ else }}
        emptyDir: {}
        {{ end -}}
