/* 
 * Secret Service
 *
 * IoT Edge Secret Service API
 *
 * OpenAPI spec version: 2020-07-22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;
use std::sync::Arc;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct DefaultApiClient<C: hyper::client::connect::Connect> {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> Self {
        Self {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi: Send + Sync {
    fn delete_secret(&self, api_version: &str, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send>;
    fn get_secret(&self, api_version: &str, id: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>> + Send>;
    fn pull_secret(&self, api_version: &str, id: &str, akv_uri: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send>;
    fn refresh_secret(&self, api_version: &str, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send>;
    fn set_secret(&self, api_version: &str, id: &str, value: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send>;
}


impl<C: hyper::client::connect::Connect + 'static> DefaultApi for DefaultApiClient<C> {
    fn delete_secret(&self, api_version: &str, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::DELETE;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", &api_version.to_string());
            query.finish()
        };
        let uri_str = format!("{}/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::builder()
            .method(method)
            .uri(uri)
            .body(hyper::Body::empty())
            .expect("could not build hyper::Request");

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().insert(hyper::header::USER_AGENT, hyper::http::HeaderValue::from_str(user_agent).unwrap());
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn get_secret(&self, api_version: &str, id: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::GET;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", &api_version.to_string());
            query.finish()
        };
        let uri_str = format!("{}/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::builder()
            .method(method)
            .uri(uri)
            .body(hyper::Body::empty())
            .expect("could not build hyper::Request");

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().insert(hyper::header::USER_AGENT, hyper::http::HeaderValue::from_str(user_agent).unwrap());
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<String, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn pull_secret(&self, api_version: &str, id: &str, akv_uri: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::POST;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", &api_version.to_string());
            query.finish()
        };
        let uri_str = format!("{}/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let serialized = serde_json::to_string(&akv_uri).unwrap();
        let content_len = serialized.len();
        let mut req = hyper::Request::builder()
            .method(method)
            .uri(uri)
            .body(hyper::Body::from(serialized))
            .expect("could not build hyper::Request");

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().insert(hyper::header::USER_AGENT, hyper::http::HeaderValue::from_str(user_agent).unwrap());
        }



        req.headers_mut().insert(hyper::header::CONTENT_TYPE, hyper::http::HeaderValue::from_str("application/json").unwrap());
        req.headers_mut().insert(hyper::header::CONTENT_LENGTH, hyper::http::HeaderValue::from(content_len as u64));

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn refresh_secret(&self, api_version: &str, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::PATCH;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", &api_version.to_string());
            query.finish()
        };
        let uri_str = format!("{}/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::builder()
            .method(method)
            .uri(uri)
            .body(hyper::Body::empty())
            .expect("could not build hyper::Request");

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().insert(hyper::header::USER_AGENT, hyper::http::HeaderValue::from_str(user_agent).unwrap());
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn set_secret(&self, api_version: &str, id: &str, value: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::PUT;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("api-version", &api_version.to_string());
            query.finish()
        };
        let uri_str = format!("{}/{id}?{}", configuration.base_path, query_string, id=id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let serialized = serde_json::to_string(&value).unwrap();
        let content_len = serialized.len();
        let mut req = hyper::Request::builder()
            .method(method)
            .uri(uri)
            .body(hyper::Body::from(serialized))
            .expect("could not build hyper::Request");

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().insert(hyper::header::USER_AGENT, hyper::http::HeaderValue::from_str(user_agent).unwrap());
        }



        req.headers_mut().insert(hyper::header::CONTENT_TYPE, hyper::http::HeaderValue::from_str("application/json").unwrap());
        req.headers_mut().insert(hyper::header::CONTENT_LENGTH, hyper::http::HeaderValue::from(content_len as u64));

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

}
