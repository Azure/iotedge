/* 
 * IoT Edge Module Workload API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-07-22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CertificateResponse {
  #[serde(rename = "privateKey")]
  private_key: ::models::PrivateKey,
  /// Base64 encoded PEM formatted byte array containing the certificate and its chain.
  #[serde(rename = "certificate")]
  certificate: String,
  /// Certificate expiration date-time (ISO 8601)
  #[serde(rename = "expiration")]
  expiration: String
}

impl CertificateResponse {
  pub fn new(private_key: ::models::PrivateKey, certificate: String, expiration: String) -> CertificateResponse {
    CertificateResponse {
      private_key: private_key,
      certificate: certificate,
      expiration: expiration
    }
  }

  pub fn set_private_key(&mut self, private_key: ::models::PrivateKey) {
    self.private_key = private_key;
  }

  pub fn with_private_key(mut self, private_key: ::models::PrivateKey) -> CertificateResponse {
    self.private_key = private_key;
    self
  }

  pub fn private_key(&self) -> &::models::PrivateKey {
    &self.private_key
  }


  pub fn set_certificate(&mut self, certificate: String) {
    self.certificate = certificate;
  }

  pub fn with_certificate(mut self, certificate: String) -> CertificateResponse {
    self.certificate = certificate;
    self
  }

  pub fn certificate(&self) -> &String {
    &self.certificate
  }


  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = expiration;
  }

  pub fn with_expiration(mut self, expiration: String) -> CertificateResponse {
    self.expiration = expiration;
    self
  }

  pub fn expiration(&self) -> &String {
    &self.expiration
  }


}



