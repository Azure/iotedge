/* 
 * IoT Edge Module Workload API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-07-22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SignRequest {
  /// Name of key to perform sign operation.
  #[serde(rename = "keyId")]
  key_id: String,
  /// Sign algorithm to be used.
  #[serde(rename = "algo")]
  algo: String,
  /// Data to be signed.
  #[serde(rename = "data")]
  data: String
}

impl SignRequest {
  pub fn new(key_id: String, algo: String, data: String) -> SignRequest {
    SignRequest {
      key_id: key_id,
      algo: algo,
      data: data
    }
  }

  pub fn set_key_id(&mut self, key_id: String) {
    self.key_id = key_id;
  }

  pub fn with_key_id(mut self, key_id: String) -> SignRequest {
    self.key_id = key_id;
    self
  }

  pub fn key_id(&self) -> &String {
    &self.key_id
  }


  pub fn set_algo(&mut self, algo: String) {
    self.algo = algo;
  }

  pub fn with_algo(mut self, algo: String) -> SignRequest {
    self.algo = algo;
    self
  }

  pub fn algo(&self) -> &String {
    &self.algo
  }


  pub fn set_data(&mut self, data: String) {
    self.data = data;
  }

  pub fn with_data(mut self, data: String) -> SignRequest {
    self.data = data;
    self
  }

  pub fn data(&self) -> &String {
    &self.data
  }


}



