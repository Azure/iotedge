/* 
 * Identity Service API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-02-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IdentitySpec : The identity specification.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IdentitySpec {
  /// The name of the IoT hub where the device is provisioned.
  #[serde(rename = "hubName")]
  hub_name: String,
  /// The identity name of the provisioned device in the assigned IoT Hub.
  #[serde(rename = "deviceId")]
  device_id: String,
  /// The identity name of the device workload in the provisioned device in the assigned IoT Hub.
  #[serde(rename = "moduleId", skip_serializing_if="Option::is_none")]
  module_id: Option<String>,
  /// The generation ID of the device workload assigned by IoT Hub.
  #[serde(rename = "genId", skip_serializing_if="Option::is_none")]
  gen_id: Option<String>,
  #[serde(rename = "auth")]
  auth: crate::models::Credentials
}

impl IdentitySpec {
  /// The identity specification.
  pub fn new(hub_name: String, device_id: String, auth: crate::models::Credentials) -> IdentitySpec {
    IdentitySpec {
      hub_name,
      device_id,
      module_id: None,
      gen_id: None,
      auth
    }
  }

  pub fn set_hub_name(&mut self, hub_name: String) {
    self.hub_name = hub_name;
  }

  pub fn with_hub_name(mut self, hub_name: String) -> IdentitySpec {
    self.hub_name = hub_name;
    self
  }

  pub fn hub_name(&self) -> &String {
    &self.hub_name
  }


  pub fn set_device_id(&mut self, device_id: String) {
    self.device_id = device_id;
  }

  pub fn with_device_id(mut self, device_id: String) -> IdentitySpec {
    self.device_id = device_id;
    self
  }

  pub fn device_id(&self) -> &String {
    &self.device_id
  }


  pub fn set_module_id(&mut self, module_id: String) {
    self.module_id = Some(module_id);
  }

  pub fn with_module_id(mut self, module_id: String) -> IdentitySpec {
    self.module_id = Some(module_id);
    self
  }

  pub fn module_id(&self) -> Option<&String> {
    self.module_id.as_ref()
  }

  pub fn reset_module_id(&mut self) {
    self.module_id = None;
  }

  pub fn set_gen_id(&mut self, gen_id: String) {
    self.gen_id = Some(gen_id);
  }

  pub fn with_gen_id(mut self, gen_id: String) -> IdentitySpec {
    self.gen_id = Some(gen_id);
    self
  }

  pub fn gen_id(&self) -> Option<&String> {
    self.gen_id.as_ref()
  }

  pub fn reset_gen_id(&mut self) {
    self.gen_id = None;
  }

  pub fn set_auth(&mut self, auth: crate::models::Credentials) {
    self.auth = auth;
  }

  pub fn with_auth(mut self, auth: crate::models::Credentials) -> IdentitySpec {
    self.auth = auth;
    self
  }

  pub fn auth(&self) -> &crate::models::Credentials {
    &self.auth
  }


}



