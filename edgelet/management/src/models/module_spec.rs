/* 
 * IoT Edge Management API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-07-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModuleSpec {
  /// The name of a the module.
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "type")]
  _type: String,
  #[serde(rename = "imagePullPolicy")]
  image_pull_policy: Option<String>,
  #[serde(rename = "config")]
  config: ::models::Config
}

impl ModuleSpec {
  pub fn new(name: String, _type: String, config: ::models::Config) -> ModuleSpec {
    ModuleSpec {
      name: name,
      _type: _type,
      image_pull_policy: None,
      config: config
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ModuleSpec {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ModuleSpec {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_image_pull_policy(&mut self, image_pull_policy: String) {
    self.image_pull_policy = Some(image_pull_policy);
  }

  pub fn with_image_pull_policy(mut self, image_pull_policy: String) -> ModuleSpec {
    self.image_pull_policy = Some(image_pull_policy);
    self
  }

  pub fn image_pull_policy(&self) -> Option<&String> {
    self.image_pull_policy.as_ref()
  }

  pub fn reset_image_pull_policy(&mut self) {
    self.image_pull_policy = None;
  }

  pub fn set_config(&mut self, config: ::models::Config) {
    self.config = config;
  }

  pub fn with_config(mut self, config: ::models::Config) -> ModuleSpec {
    self.config = config;
    self
  }

  pub fn config(&self) -> &::models::Config {
    &self.config
  }


}



