/* 
 * IoT Edge Management API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-07-22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SystemResources {
  #[serde(rename = "host_uptime")]
  host_uptime: i64,
  #[serde(rename = "process_uptime")]
  process_uptime: i64,
  #[serde(rename = "used_cpu")]
  used_cpu: f32,
  #[serde(rename = "used_ram")]
  used_ram: i64,
  #[serde(rename = "total_ram")]
  total_ram: i64,
  #[serde(rename = "disks")]
  disks: Vec<::models::Disk>,
  #[serde(rename = "docker_stats")]
  docker_stats: String
}

impl SystemResources {
  pub fn new(host_uptime: i64, process_uptime: i64, used_cpu: f32, used_ram: i64, total_ram: i64, disks: Vec<::models::Disk>, docker_stats: String) -> SystemResources {
    SystemResources {
      host_uptime: host_uptime,
      process_uptime: process_uptime,
      used_cpu: used_cpu,
      used_ram: used_ram,
      total_ram: total_ram,
      disks: disks,
      docker_stats: docker_stats
    }
  }

  pub fn set_host_uptime(&mut self, host_uptime: i64) {
    self.host_uptime = host_uptime;
  }

  pub fn with_host_uptime(mut self, host_uptime: i64) -> SystemResources {
    self.host_uptime = host_uptime;
    self
  }

  pub fn host_uptime(&self) -> &i64 {
    &self.host_uptime
  }


  pub fn set_process_uptime(&mut self, process_uptime: i64) {
    self.process_uptime = process_uptime;
  }

  pub fn with_process_uptime(mut self, process_uptime: i64) -> SystemResources {
    self.process_uptime = process_uptime;
    self
  }

  pub fn process_uptime(&self) -> &i64 {
    &self.process_uptime
  }


  pub fn set_used_cpu(&mut self, used_cpu: f32) {
    self.used_cpu = used_cpu;
  }

  pub fn with_used_cpu(mut self, used_cpu: f32) -> SystemResources {
    self.used_cpu = used_cpu;
    self
  }

  pub fn used_cpu(&self) -> &f32 {
    &self.used_cpu
  }


  pub fn set_used_ram(&mut self, used_ram: i64) {
    self.used_ram = used_ram;
  }

  pub fn with_used_ram(mut self, used_ram: i64) -> SystemResources {
    self.used_ram = used_ram;
    self
  }

  pub fn used_ram(&self) -> &i64 {
    &self.used_ram
  }


  pub fn set_total_ram(&mut self, total_ram: i64) {
    self.total_ram = total_ram;
  }

  pub fn with_total_ram(mut self, total_ram: i64) -> SystemResources {
    self.total_ram = total_ram;
    self
  }

  pub fn total_ram(&self) -> &i64 {
    &self.total_ram
  }


  pub fn set_disks(&mut self, disks: Vec<::models::Disk>) {
    self.disks = disks;
  }

  pub fn with_disks(mut self, disks: Vec<::models::Disk>) -> SystemResources {
    self.disks = disks;
    self
  }

  pub fn disks(&self) -> &Vec<::models::Disk> {
    &self.disks
  }


  pub fn set_docker_stats(&mut self, docker_stats: String) {
    self.docker_stats = docker_stats;
  }

  pub fn with_docker_stats(mut self, docker_stats: String) -> SystemResources {
    self.docker_stats = docker_stats;
    self
  }

  pub fn docker_stats(&self) -> &String {
    &self.docker_stats
  }


}



