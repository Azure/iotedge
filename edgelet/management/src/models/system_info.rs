/* 
 * IoT Edge Management API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-07-07
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SystemInfo {
  #[serde(rename = "osType")]
  os_type: String,
  #[serde(rename = "architecture")]
  architecture: String,
  #[serde(rename = "version")]
  version: Option<String>,
  #[serde(rename = "server_version")]
  server_version: Option<String>,
  #[serde(rename = "kernel_version")]
  kernel_version: Option<String>,
  #[serde(rename = "operating_system")]
  operating_system: Option<String>,
  #[serde(rename = "cpus")]
  cpus: Option<i32>,
  #[serde(rename = "virtualized")]
  virtualized: Option<String>
}

impl SystemInfo {
  pub fn new(os_type: String, architecture: String) -> SystemInfo {
    SystemInfo {
      os_type: os_type,
      architecture: architecture,
      version: None,
      server_version: None,
      kernel_version: None,
      operating_system: None,
      cpus: None,
      virtualized: None
    }
  }

  pub fn set_os_type(&mut self, os_type: String) {
    self.os_type = os_type;
  }

  pub fn with_os_type(mut self, os_type: String) -> SystemInfo {
    self.os_type = os_type;
    self
  }

  pub fn os_type(&self) -> &String {
    &self.os_type
  }


  pub fn set_architecture(&mut self, architecture: String) {
    self.architecture = architecture;
  }

  pub fn with_architecture(mut self, architecture: String) -> SystemInfo {
    self.architecture = architecture;
    self
  }

  pub fn architecture(&self) -> &String {
    &self.architecture
  }


  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> SystemInfo {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_server_version(&mut self, server_version: String) {
    self.server_version = Some(server_version);
  }

  pub fn with_server_version(mut self, server_version: String) -> SystemInfo {
    self.server_version = Some(server_version);
    self
  }

  pub fn server_version(&self) -> Option<&String> {
    self.server_version.as_ref()
  }

  pub fn reset_server_version(&mut self) {
    self.server_version = None;
  }

  pub fn set_kernel_version(&mut self, kernel_version: String) {
    self.kernel_version = Some(kernel_version);
  }

  pub fn with_kernel_version(mut self, kernel_version: String) -> SystemInfo {
    self.kernel_version = Some(kernel_version);
    self
  }

  pub fn kernel_version(&self) -> Option<&String> {
    self.kernel_version.as_ref()
  }

  pub fn reset_kernel_version(&mut self) {
    self.kernel_version = None;
  }

  pub fn set_operating_system(&mut self, operating_system: String) {
    self.operating_system = Some(operating_system);
  }

  pub fn with_operating_system(mut self, operating_system: String) -> SystemInfo {
    self.operating_system = Some(operating_system);
    self
  }

  pub fn operating_system(&self) -> Option<&String> {
    self.operating_system.as_ref()
  }

  pub fn reset_operating_system(&mut self) {
    self.operating_system = None;
  }

  pub fn set_cpus(&mut self, cpus: i32) {
    self.cpus = Some(cpus);
  }

  pub fn with_cpus(mut self, cpus: i32) -> SystemInfo {
    self.cpus = Some(cpus);
    self
  }

  pub fn cpus(&self) -> Option<&i32> {
    self.cpus.as_ref()
  }

  pub fn reset_cpus(&mut self) {
    self.cpus = None;
  }

  pub fn set_virtualized(&mut self, virtualized: String) {
    self.virtualized = Some(virtualized);
  }

  pub fn with_virtualized(mut self, virtualized: String) -> SystemInfo {
    self.virtualized = Some(virtualized);
    self
  }

  pub fn virtualized(&self) -> Option<&String> {
    self.virtualized.as_ref()
  }

  pub fn reset_virtualized(&mut self) {
    self.virtualized = None;
  }

}



