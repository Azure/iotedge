/*
 * IoT Edge Management API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2018-06-28
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde_derive::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Config {
    #[serde(rename = "settings")]
    settings: Value,
    #[serde(rename = "env", skip_serializing_if = "Option::is_none")]
    env: Option<Vec<crate::models::EnvVar>>,
}

impl Config {
    pub fn new(settings: Value) -> Self {
        Config {
            settings,
            env: None,
        }
    }

    pub fn set_settings(&mut self, settings: Value) {
        self.settings = settings;
    }

    pub fn with_settings(mut self, settings: Value) -> Self {
        self.settings = settings;
        self
    }

    pub fn settings(&self) -> &Value {
        &self.settings
    }

    pub fn set_env(&mut self, env: Vec<crate::models::EnvVar>) {
        self.env = Some(env);
    }

    pub fn with_env(mut self, env: Vec<crate::models::EnvVar>) -> Self {
        self.env = Some(env);
        self
    }

    pub fn env(&self) -> Option<&[crate::models::EnvVar]> {
        self.env.as_ref().map(AsRef::as_ref)
    }

    pub fn reset_env(&mut self) {
        self.env = None;
    }
}
