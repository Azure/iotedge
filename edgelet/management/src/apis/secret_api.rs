/* 
 * IoT Edge Management API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-07-22
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::borrow::Borrow;
use std::sync::Arc;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct SecretApiClient<C: hyper::client::connect::Connect> {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> SecretApiClient<C> {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> SecretApiClient<C> {
        SecretApiClient {
            configuration: configuration,
        }
    }
}

pub trait SecretApi: Send + Sync {
    fn delete_secret(&self, api_version: &str, name: &str, secret_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send>;
    fn get_secret(&self, api_version: &str, name: &str, secret_id: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>> + Send>;
    fn pull_secret(&self, api_version: &str, name: &str, secret_id: &str, akv_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send>;
    fn refresh_secret(&self, api_version: &str, name: &str, secret_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send>;
    fn set_secret(&self, api_version: &str, name: &str, secret_id: &str, value: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send>;
}


impl<C: hyper::client::connect::Connect + 'static> SecretApi for SecretApiClient<C> {
    fn delete_secret(&self, api_version: &str, name: &str, secret_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::DELETE;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("api-version", &api_version.to_string())
            .finish();
        let uri_str = format!("{}/modules/{name}/secrets/{secretId}{}", configuration.base_path, query, name=name, secretId=secret_id);

        let uri: hyper::Uri = uri_str.parse().unwrap();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut builder = hyper::Request::builder();

        builder.method(method);
        builder.uri(uri);

        if let Some(ref user_agent) = configuration.user_agent {
            builder.header(hyper::header::USER_AGENT, hyper::header::HeaderValue::from_str(user_agent).unwrap());
        }


        let req = builder
            .body(hyper::Body::empty())
            .expect("could not build hyper::Request");

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn get_secret(&self, api_version: &str, name: &str, secret_id: &str) -> Box<dyn Future<Item = String, Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::GET;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("api-version", &api_version.to_string())
            .finish();
        let uri_str = format!("{}/modules/{name}/secrets/{secretId}{}", configuration.base_path, query, name=name, secretId=secret_id);

        let uri: hyper::Uri = uri_str.parse().unwrap();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut builder = hyper::Request::builder();

        builder.method(method);
        builder.uri(uri);

        if let Some(ref user_agent) = configuration.user_agent {
            builder.header(hyper::header::USER_AGENT, hyper::header::HeaderValue::from_str(user_agent).unwrap());
        }


        let req = builder
            .body(hyper::Body::empty())
            .expect("could not build hyper::Request");

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<String, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn pull_secret(&self, api_version: &str, name: &str, secret_id: &str, akv_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::POST;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("api-version", &api_version.to_string())
            .finish();
        let uri_str = format!("{}/modules/{name}/secrets/{secretId}{}", configuration.base_path, query, name=name, secretId=secret_id);

        let uri: hyper::Uri = uri_str.parse().unwrap();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut builder = hyper::Request::builder();

        builder.method(method);
        builder.uri(uri);

        if let Some(ref user_agent) = configuration.user_agent {
            builder.header(hyper::header::USER_AGENT, hyper::header::HeaderValue::from_str(user_agent).unwrap());
        }


        let serialized = serde_json::to_string(&akv_id).unwrap();
        builder.header(hyper::header::CONTENT_TYPE, hyper::header::HeaderValue::from_str("application/json").unwrap());
        builder.header(hyper::header::CONTENT_LENGTH, serialized.len());
        let req = builder
            .body(hyper::Body::from(serialized))
            .expect("could not build hyper::Request");

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn refresh_secret(&self, api_version: &str, name: &str, secret_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::PATCH;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("api-version", &api_version.to_string())
            .finish();
        let uri_str = format!("{}/modules/{name}/secrets/{secretId}{}", configuration.base_path, query, name=name, secretId=secret_id);

        let uri: hyper::Uri = uri_str.parse().unwrap();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut builder = hyper::Request::builder();

        builder.method(method);
        builder.uri(uri);

        if let Some(ref user_agent) = configuration.user_agent {
            builder.header(hyper::header::USER_AGENT, hyper::header::HeaderValue::from_str(user_agent).unwrap());
        }


        let req = builder
            .body(hyper::Body::empty())
            .expect("could not build hyper::Request");

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn set_secret(&self, api_version: &str, name: &str, secret_id: &str, value: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>> + Send> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::PUT;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("api-version", &api_version.to_string())
            .finish();
        let uri_str = format!("{}/modules/{name}/secrets/{secretId}{}", configuration.base_path, query, name=name, secretId=secret_id);

        let uri: hyper::Uri = uri_str.parse().unwrap();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut builder = hyper::Request::builder();

        builder.method(method);
        builder.uri(uri);

        if let Some(ref user_agent) = configuration.user_agent {
            builder.header(hyper::header::USER_AGENT, hyper::header::HeaderValue::from_str(user_agent).unwrap());
        }


        let serialized = serde_json::to_string(&value).unwrap();
        builder.header(hyper::header::CONTENT_TYPE, hyper::header::HeaderValue::from_str("application/json").unwrap());
        builder.header(hyper::header::CONTENT_LENGTH, serialized.len());
        let req = builder
            .body(hyper::Body::from(serialized))
            .expect("could not build hyper::Request");

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

}
