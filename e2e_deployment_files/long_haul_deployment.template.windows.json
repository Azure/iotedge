{
  "modulesContent": {
    "$edgeAgent": {
      "properties.desired": {
        "schemaVersion": "1.0",
        "runtime": {
          "type": "docker",
          "settings": {
            "minDockerVersion": "v1.25",
            "loggingOptions": "",
            "registryCredentials": {
              "rc1": {
                "username": "<CR.Username>",
                "password": "<CR.Password>",
                "address": "<Container_Registry>"
              }
            }
          }
        },
        "systemModules": {
          "edgeAgent": {
            "type": "docker",
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-agent:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            },
            "env": {
              "experimentalfeatures__enabled": {
                  "value": "true"
              },
              "experimentalfeatures__enableMetrics": {
                  "value": "true"
              }
            }
          },
          "edgeHub": {
            "type": "docker",
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-hub:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": "{\"User\": \"ContainerAdministrator\",\"HostConfig\": {\"PortBindings\": {\"8883/tcp\": [{\"HostPort\": \"8883\"}],\"443/tcp\": [{\"HostPort\": \"443\"}],\"5671/tcp\": [{\"HostPort\": \"5671\"}]}}}"
            },
            "env": {
              "CollectMetrics": {
                "value": "true"
              },
              "experimentalfeatures__enabled": {
                  "value": "true"
              },
              "experimentalfeatures__enableMetrics": {
                  "value": "true"
              }
            },
            "status": "running",
            "restartPolicy": "always"
          }
        },
        "modules": {
          "loadGen1": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "messageFrequency": {
                "value": "<LoadGen.MessageFrequency>"
              },
              "transportType": {
                "value": "amqp"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-load-gen:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "loadGen2": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "messageFrequency": {
                "value": "<LoadGen.MessageFrequency>"
              },
              "transportType": {
                "value": "mqtt"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-load-gen:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "twinTester1": {
            "settings": {
                "image": "<Container_Registry>/microsoft/azureiotedge-twin-tester:<Build.BuildNumber>-windows-<Architecture>",
                "createOptions": ""
            },
            "type": "docker",
            "version": "1.0",
            "env": {
                "TransportType": {
                    "value": "amqp"
                },
                "ServiceClientConnectionString": {
                    "value": "<ServiceClientConnectionString>"
                },
                "TwinUpdateSize": {
                    "value": "<TwinUpdateSize>"
                },
                "TwinUpdateFrequency": {
                    "value": "<TwinUpdateFrequency>"
                },
                "TwinUpdateFailureThreshold": {
                    "value": "<TwinUpdateFailureThreshold>"
                }
            },
            "status": "running",
            "restartPolicy": "always"
          },
          "twinTester2": {
            "settings": {
                "image": "<Container_Registry>/microsoft/azureiotedge-twin-tester:<Build.BuildNumber>-windows-<Architecture>",
                "createOptions": ""
            },
            "type": "docker",
            "version": "1.0",
            "env": {
                "TransportType": {
                    "value": "mqtt"
                },
                "ServiceClientConnectionString": {
                    "value": "<ServiceClientConnectionString>"
                },
                "TwinUpdateSize": {
                    "value": "<TwinUpdateSize>"
                },
                "TwinUpdateFrequency": {
                    "value": "<TwinUpdateFrequency>"
                },
                "TwinUpdateFailureThreshold": {
                    "value": "<TwinUpdateFailureThreshold>"
                }
            },
            "status": "running",
            "restartPolicy": "always"
          },
          "tempSensor": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-simulated-temperature-sensor:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            },
            "env": {
              "MessageCount": {
                "value": "-1"
              },
              "ClientTransportType": {
                "value": "Amqp_Tcp_Only"
              }
            }
          },
          "tempFilter": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "TemperatureThreshold": {
                "value": "19"
              },
              "ClientTransportType": {
                "value": "Amqp_Tcp_Only"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-temperature-filter:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "tempSensor2": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-simulated-temperature-sensor:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            },
            "env": {
              "MessageCount": {
                "value": "-1"
              },
              "ClientTransportType": {
                "value": "Mqtt_Tcp_Only"
              }
            }
          },
          "tempFilter2": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "TemperatureThreshold": {
                "value": "19"
              },
              "ClientTransportType": {
                "value": "Mqtt_Tcp_Only"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-temperature-filter:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "snitcher": {
            "version": "2.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "BUILD_ID": {
                "value": "<Snitch.BuildId>"
              },
              "TEST_DURATION_IN_SECS": {
                "value": "<Snitch.TestDurationInSecs>"
              },
              "REPORTING_INTERVAL_IN_SECS": {
                "value": "<Snitch.ReportingIntervalInSecs>"
              },
              "ALERT_URL": {
                "value": "<Snitch.AlertUrl>"
              },
              "ANALYZER_URL": {
                "value": "http://analyzer:15000/api/report"
              },
              "BLOB_STORAGE_ACCOUNT": {
                "value": "<Snitch.StorageAccount>"
              },
              "BLOB_STORAGE_MASTER_KEY": {
                "value": "<Snitch.StorageMasterKey>"
              },
              "BLOB_CONTAINER_NAME": {
                "value": "loadtest1"
              },
              "RUST_LOG": {
                "value": "snitcher=info"
              },
              "MANAGEMENT_URI": {
                "value": "<Management.Uri>"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/snitcher:<Snitch.BuildNumber>-windows-<Architecture>",
              "createOptions": "{\"HostConfig\":{\"Binds\":[\"C:\\\\ProgramData\\\\iotedge\\\\mgmt:C:\\\\ProgramData\\\\iotedge\\\\mgmt\"]}}"
            }
          },
          "analyzer": {
            "type": "docker",
            "status": "running",
            "restartPolicy": "never",
            "env": {
              "EventHubConnectionString": {
                "value": "<Analyzer.EventHubConnectionString>"
              },
              "ConsumerGroupId": {
                "value": "<Analyzer.ConsumerGroupId>"
              },
              "LogAnalyticsEnabled": {
                "value": "<Analyzer.LogAnalyticsEnabled>"
              },
              "LogAnalyticsWorkspaceId": {
                "value": "<LogAnalyticsWorkspaceId>"
              },
              "LogAnalyticsSharedKey": {
                "value": "<LogAnalyticsSharedKey>"
              },
              "LogAnalyticsLogType": {
                "value": "<Analyzer.LogAnalyticsLogType>"
              },
              "Logging:LogLevel:Microsoft": {
                "value": "Error"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-analyzer:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": "{\"HostConfig\":{\"PortBindings\":{\"15000/tcp\":[{\"HostPort\":\"15000\"}]}}}"
            }
          },
          "DirectMethodSender": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "ReportingEndpointUrl":
              {
                "value": "http://analyzer:15000"
              },
              "InvocationSource": {
                "value": "Cloud"
              },
              "IOT_HUB_CONNECTION_STRING": {
                "value": "<ServiceClientConnectionString>"
              },
              "TargetModuleId": {
                "value": "DirectMethodReceiver"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-direct-method-sender:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "DirectMethodReceiver": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "ClientTransportType": {
                "value": "Amqp_Tcp_Only"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-direct-method-receiver:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "DirectMethodSender2": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "ReportingEndpointUrl":
              {
                "value": "http://analyzer:15000"
              },
              "InvocationSource": {
                "value": "Cloud"
              },
              "IOT_HUB_CONNECTION_STRING": {
                "value": "<ServiceClientConnectionString>"
              },
              "TargetModuleId": {
                "value": "DirectMethodReceiver2"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-direct-method-sender:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "DirectMethodReceiver2": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
              "ClientTransportType": {
                "value": "Mqtt_Tcp_Only"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-direct-method-receiver:<Build.BuildNumber>-windows-<Architecture>",
              "createOptions": ""
            }
          },
          "moduleRestarter": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "on-failure",
            "env": {
              "ServiceClientConnectionString": {
                "value": "<ServiceClientConnectionString>"
              },
              "DesiredModulesToRestartCSV": {
                "value": "<DesiredModulesToRestartCSV>"
              },
              "RestartIntervalInMins": {
                "value": "<RestartIntervalInMins>"
              }
            },
            "settings": {
              "image": "<Container_Registry>/microsoft/azureiotedge-module-restarter:<Build.BuildNumber>-windows-<Architecture>"
            }
          },
          "metricsCollector": {
            "version": "1.0",
            "type": "docker",
            "status": "running",
            "restartPolicy": "always",
            "env": {
                "logAnalyticsWorkspaceId": {
                    "value": "<LogAnalyticsWorkspaceId>"
                },
                "logAnalyticsSharedKey": {
                    "value": "<LogAnalyticsSharedKey>"
                },
                "logAnalyticsLogType": {
                  "value": "testMetrics"
                },
                "MetricsEndpointsCSV": {
                  "value": "<MetricsCollector.MetricsEndpointsCSV>"
                },
                "ScrapeFrequencyInSecs": {
                    "value": "<MetricsCollector.ScrapeFrequencyInSecs>"
                },
                "UploadTarget": {
                  "value": "<MetricsCollector.UploadTarget>"
                }
            },
            "settings": {
                "image": "<Container_Registry>/microsoft/azureiotedge-metrics-collector:<Build.BuildNumber>-windows-<Architecture>",
                "createOptions": ""
            }
          }
        }
      }
    },
    "$edgeHub": {
      "properties.desired": {
        "schemaVersion": "1.0",
        "routes": {
          "upstreamLoadGen1": "FROM /messages/modules/loadGen1/outputs/output1 INTO $upstream",
          "upstreamLoadGen2": "FROM /messages/modules/loadGen2/outputs/output1 INTO $upstream",
          "TempFilterToCloud": "FROM /messages/modules/tempFilter/outputs/* INTO $upstream",
          "TempSensorToTempFilter": "FROM /messages/modules/tempSensor/outputs/temperatureOutput INTO BrokeredEndpoint(\"/modules/tempFilter/inputs/input1\")",
          "TempFilterToCloud2": "FROM /messages/modules/tempFilter2/outputs/* INTO $upstream",
          "TempSensorToTempFilter2": "FROM /messages/modules/tempSensor2/outputs/temperatureOutput INTO BrokeredEndpoint(\"/modules/tempFilter2/inputs/input1\")",
          "DirectMethodSender1ToUpstream": "FROM /messages/modules/DirectMethodSender/outputs/output1 INTO $upstream",
          "DirectMethodSender2ToUpstream": "FROM /messages/modules/DirectMethodSender2/outputs/output1 INTO $upstream"
        },
        "storeAndForwardConfiguration": {
          "timeToLiveSecs": 86400
        }
      }
    },
    "metricsCollector": {
      "properties.desired": {
        "testType": "longhaul",
        "testId": "<TrackingId>",
        "upstreamProtocol": "amqp"
      }
    }
  }
}
